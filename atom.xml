<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DonY15</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-06T09:29:58.553Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>宝全哥哥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FastDFS 基础原理</title>
    <link href="http://yoursite.com/2018/07/03/FastDfs%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/07/03/FastDfs基础原理/</id>
    <published>2018-07-03T15:57:51.000Z</published>
    <updated>2018-07-06T09:29:58.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FastDFS-基础原理"><a href="#FastDFS-基础原理" class="headerlink" title="FastDFS 基础原理"></a>FastDFS 基础原理</h2><h3 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h3><p>Depth First Search </p><p><strong>无向图算法概念</strong>(一种递归原理)</p><p>先按照一条边进行搜索,当遇到第一个节点时,对它相邻的其他节点进行搜索并标记为已查找的节点(会查找完第一条节点的最深层后返回)<br>详细见算法目录(持续更新)</p><p><img src="http://i.imgur.com/vJ23ZgT.jpg" alt="&quot;无向图算法图片&quot;的图片搜索结果"></p><h3 id="FastDFS–结构"><a href="#FastDFS–结构" class="headerlink" title="FastDFS–结构"></a>FastDFS–结构</h3><h2 id="1">FastDFS 架构–结构</h2><p><strong>FastDFS服务有三个角色:跟踪服务器(tracker server)、存储服务器(storage server)和客户端(client)</strong></p><p>主要解决了海量数据存储问题 ,特别适合以中小文件（建议范围：4KB &lt; file_size &lt;500MB）为载体的在线服务。 </p><h4 id="跟踪器Tracker"><a href="#跟踪器Tracker" class="headerlink" title="跟踪器Tracker :"></a>跟踪器Tracker :</h4><p>主要做调度工作，相当于mvc中的controller的角色，在访问上起负载均衡的作用。跟踪器和存储节点都可以由一台或多台服务器构成，跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务，其中<strong>跟踪器</strong>中的所有服务器都是<strong>对等</strong>的，可以根据服务器的压力情况随时增加或减少。 </p><p>跟踪器Tracker负责管理所有的Storage和group，本身不需要持久化任何数据,直接增加机器就可以拓展tracker,每个Storage在启动后会连接Tracker，并周期性保持联系.</p><h4 id="存储服务器Storage"><a href="#存储服务器Storage" class="headerlink" title="存储服务器Storage:"></a>存储服务器Storage:</h4><p>以group为最小单位,方便实现 应用隔离、负载均衡、副本数定制（group内storage server数量即为该group的副本数）,建议同一group内的配置尽量相同,减少资源浪费(storage依赖于本地文件系统)</p><h4 id="客户端Client"><a href="#客户端Client" class="headerlink" title="客户端Client:"></a>客户端Client:</h4><p><strong>基本文件访问接口:</strong>比如upload、download、append、delete等，以客户端库的方式提供给用户使用。 </p><h3 id="FastDFS–运行"><a href="#FastDFS–运行" class="headerlink" title="FastDFS–运行"></a>FastDFS–运行</h3><p><strong>tracker</strong></p><p>当集群中不止一个tracker server时，由于tracker之间是完全对等的关系，客户端在upload文件时可以任意选择一个trakcer。</p><p><strong>group</strong></p><p>当tracker接收到upload file的请求时，会为该文件分配一个可以存储该文件的group，支持如下选择group的规则： 1. Round robin，所有的group间轮询 </p><ol start="2"><li>Specified group，指定某一个确定的group </li><li>Load balance，剩余存储空间多多group优先</li></ol><p><strong>storage</strong></p><p>当选定group后，tracker会在group内选择一个storage server给客户端，支持如下选择storage的规则： </p><ol><li>Round robin，在group内的所有storage间轮询 </li><li>First server ordered by ip，按ip排序 </li><li>First server ordered by priority，按优先级排序（优先级在storage上配置）</li></ol><p><strong>storage path</strong></p><p>当分配好storage server后，客户端将向storage发送写文件请求，storage将会为文件分配一个数据存储目录，支持如下规则： </p><ol><li>Round robin，多个存储目录间轮询 </li><li>剩余存储空间最多的优先</li></ol><p><strong>Fileid</strong></p><p>选定存储目录之后，storage会为文件生一个Fileid，<br>由storage server ip、文件创建时间、文件大小、文件crc32和一个随机数拼接而成，<br>然后将这个二进制串进行base64编码，转换为可打印的字符串。</p><p><strong>选择两级目录</strong></p><p>当选定存储目录之后，storage会为文件分配一个fileid，每个存储目录下有两级256*256的子目录，storage会按文件fileid进行两次hash（猜测），路由到其中一个子目录，然后将文件以fileid为文件名存储到该子目录下。</p><p><strong>生成文件名</strong> </p><p>当文件存储到某个子目录后，即认为该文件存储成功，接下来会为该文件生成一个文件名，文件名由group、存储目录、两级子目录、fileid、文件后缀名（由客户端指定，主要用于区分文件类型）拼接而成。</p><p><strong>文件同步</strong></p><p>写文件时，客户端将文件写至group内一个storage server即认为写文件成功，<br>storage server写完文件后，会由后台线程将文件同步至 [同group] 内其他的storage server。<br>storage的同步进度会作为元数据的一部分汇报到tracker上，tracke在选择读storage的时候会以同步进度作为参考。</p><p><strong>Download file</strong></p><p>客户端upload file成功后，会拿到一个storage生成的文件名，接下来客户端根据这个文件名即可访问到该文件。</p><h3 id="FastDFS–特点"><a href="#FastDFS–特点" class="headerlink" title="FastDFS–特点"></a>FastDFS–特点</h3><h4 id="小文件合并存储"><a href="#小文件合并存储" class="headerlink" title="小文件合并存储"></a>小文件合并存储</h4><p><strong>解决问题:</strong></p><ol><li>本地文件系统inode数量有限，从而存储的小文件数量也就受到限制。 </li><li>多级目录+目录里很多文件，导致访问文件的开销很大（可能导致很多次IO） </li><li>按小文件存储，备份与恢复的效率低</li></ol><p>FastDFS在V3.0版本里引入小文件合并存储的机制，可将多个小文件存储到一个大的文件（trunk file），为了支持这个机制，FastDFS生成的文件fileid需要额外增加16个字节 </p><h4 id="HTTP访问支持"><a href="#HTTP访问支持" class="headerlink" title="HTTP访问支持"></a>HTTP访问支持</h4><p>客户端可以通过http协议来下载文件，tracker在接收到请求时，通过http的redirect机制将请求[重定向]至文件所在的storage上；除了内置的http协议外，FastDFS还提供了通过apache或nginx扩展模块下载文件的支持。</p><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p>group机制本身可用来做负载均衡，但这只是一种静态的负载均衡机制，需要预先知道应用的访问特性；同时group机制也导致不可能在group之间迁移数据来做动态负载均衡。</p><h3 id="FastDFS–使用小结"><a href="#FastDFS–使用小结" class="headerlink" title="FastDFS–使用小结"></a>FastDFS–使用小结</h3><p>（1）每次上传文件后都会返回一个地址，用户需要自己保存此地址。<br>（2）为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。</p><h3 id="FastDFS原理系列文章-转发"><a href="#FastDFS原理系列文章-转发" class="headerlink" title="FastDFS原理系列文章(转发)"></a>FastDFS原理系列文章(转发)</h3><p><strong><a href="https://blog.csdn.net/hfty290/article/details/42076205" target="_blank" rel="noopener">https://blog.csdn.net/hfty290/article/details/42076205</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;FastDFS-基础原理&quot;&gt;&lt;a href=&quot;#FastDFS-基础原理&quot; class=&quot;headerlink&quot; title=&quot;FastDFS 基础原理&quot;&gt;&lt;/a&gt;FastDFS 基础原理&lt;/h2&gt;&lt;h3 id=&quot;深度优先搜索&quot;&gt;&lt;a href=&quot;#深度优先搜索&quot;
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/03/hello-world/"/>
    <id>http://yoursite.com/2018/07/03/hello-world/</id>
    <published>2018-07-03T15:51:12.163Z</published>
    <updated>2018-07-05T12:34:12.004Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
