<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DonY15</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-08T13:31:01.267Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>宝全哥哥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IDE基础-Eclipse</title>
    <link href="http://yoursite.com/2018/08/08/IDE%E5%9F%BA%E7%A1%80-Eclipse/"/>
    <id>http://yoursite.com/2018/08/08/IDE基础-Eclipse/</id>
    <published>2018-08-07T16:00:00.000Z</published>
    <updated>2018-08-08T13:31:01.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDE基础"><a href="#IDE基础" class="headerlink" title="IDE基础"></a>IDE基础</h2><p>[TOC]</p><h3 id="1-一楼送给自己"><a href="#1-一楼送给自己" class="headerlink" title="1.一楼送给自己"></a>1.一楼送给自己</h3><p>用习惯IDEA,很长时间没有使用Eclipse了,马上换工作可能又要用回Eclipse,写一篇回归文档,重新巩固一下Eclipse的基础使用,简单粗暴,新手不宜观看        ಠ_ಠ我有一个特异功能！！(Maven+基础快捷键篇)</p><h3 id="2-Maven搭建"><a href="#2-Maven搭建" class="headerlink" title="2.Maven搭建"></a>2.Maven搭建</h3><p><strong>注意开始选择简单maven,否则建出来的项目包可能不完整,主要是jre可能不会自动识别,导致message问题不显示</strong></p><p>本次maven搭建是简单的粗粒度模块切分,主要是熟悉<strong>parent继承</strong>和<strong>聚合项目</strong>在Eclipse中的搭建方式和<strong>BUG坑</strong></p><h4 id="2-1-从首选项导入Maven"><a href="#2-1-从首选项导入Maven" class="headerlink" title="2-1.从首选项导入Maven"></a>2-1.从首选项导入Maven</h4><p><img src="https://i.imgur.com/tRcpLJ5.png" alt=""></p><h4 id="2-2-Maven配置"><a href="#2-2-Maven配置" class="headerlink" title="2-2.Maven配置"></a>2-2.Maven配置</h4><p><img src="https://i.imgur.com/HWKL3sw.png" alt=""></p><h4 id="2-3-搭建Server服务器软件"><a href="#2-3-搭建Server服务器软件" class="headerlink" title="2-3.搭建Server服务器软件"></a>2-3.搭建Server服务器软件</h4><p><img src="https://i.imgur.com/Uad0d58.png" alt=""></p><p>服务器软件可以这样搭<strong>↑↑↑</strong>,但是实际中我们建议使用maven的<strong>tomcat插件↓↓↓</strong>来使用(模块较多时效果更好)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在聚合pom工程配置tomcat插件统一启动即可(减少其他模块频繁打包) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-4-新建Maven工程-parent"><a href="#2-4-新建Maven工程-parent" class="headerlink" title="2-4.新建Maven工程(parent)"></a>2-4.新建Maven工程(parent)</h4><p>(pom)</p><p><img src="https://i.imgur.com/BrsYk8C.png" alt=""></p><h4 id="2-4-parent配置"><a href="#2-4-parent配置" class="headerlink" title="2-4.parent配置"></a>2-4.parent配置</h4><p> (pom)</p><p><img src="https://i.imgur.com/hg3GCVr.png" alt=""><br><img src="https://i.imgur.com/zw9BVzW.png" alt=""></p><h4 id="2-5-common配置"><a href="#2-5-common配置" class="headerlink" title="2-5.common配置"></a>2-5.common配置</h4><p> (jar)</p><p><img src="https://i.imgur.com/U4vDRHB.png" alt=""></p><h4 id="2-6-mvc聚合配置"><a href="#2-6-mvc聚合配置" class="headerlink" title="2-6.mvc聚合配置"></a>2-6.mvc聚合配置</h4><p> (pom) 此处三层架构没有拆解,统一扔到聚合里了,正常可以将模块拆分</p><p><img src="https://i.imgur.com/e5LwXCn.png" alt=""></p><p>注意聚合中的模块大多数会用到common中的工具类或者实体类,这里的pom文件需要依赖common,后面不在提示依赖关系(根据业务逻辑进行依赖jar和模块即可)<br><img src="https://i.imgur.com/oqIeNNn.png" alt=""></p><h4 id="2-7-聚合模块pojo"><a href="#2-7-聚合模块pojo" class="headerlink" title="2-7.聚合模块pojo"></a>2-7.聚合模块pojo</h4><p>(jar)</p><p><img src="https://i.imgur.com/xlEmr3c.png" alt=""><br><img src="https://i.imgur.com/KrG76Qj.png" alt=""><br><img src="https://i.imgur.com/aAuNUhA.png" alt=""></p><h4 id="2-8-聚合模块dao-省略-service"><a href="#2-8-聚合模块dao-省略-service" class="headerlink" title="2-8.聚合模块dao(省略)/service"></a>2-8.聚合模块dao(省略)/service</h4><p>(jar)</p><p><img src="https://i.imgur.com/jsLF0jT.png" alt=""></p><h4 id="2-9-聚合模块controller"><a href="#2-9-聚合模块controller" class="headerlink" title="2-9.聚合模块controller"></a>2-9.聚合模块controller</h4><p>(war)</p><p><img src="https://i.imgur.com/03pqII2.png" alt=""></p><p>注意问题:此时webapp为空(因为选择的基本maven)</p><p><img src="https://i.imgur.com/4VZXkAC.png" alt=""></p><p>右键war模块,选择JavaEE工具重新部署(点一下就行了),webapp将会注入内容(web-inf等)</p><p><img src="https://i.imgur.com/lX1VfJa.png" alt=""></p><h4 id="2-10-聚合结构完成"><a href="#2-10-聚合结构完成" class="headerlink" title="2-10.聚合结构完成"></a>2-10.聚合结构完成</h4><p><img src="https://i.imgur.com/1yxPu4f.png" alt=""></p><h4 id="2-end-总结"><a href="#2-end-总结" class="headerlink" title="2-end.总结"></a>2-end.总结</h4><p>Eclipse的maven搭建并不是很复杂,主要是用习惯了IDEA后,经常会忘记Eclipse搭建的坑,比如</p><ol><li>建立的模块少包(没有选简单maven模板,jre没有注入)</li><li>建立的模块少webapp资源(还是bug,解决方案很多)</li><li>合理的选择打包方式(打pom,src中存在的是site(别紧张,没啥用))</li></ol><p>建议全部项目都以简单Maven模板的方式搭建,区别在于打包方式的不同pom/jar/war</p><h3 id="3-基础快捷键"><a href="#3-基础快捷键" class="headerlink" title="3.基础快捷键"></a>3.基础快捷键</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[核心快捷键]</span><br><span class="line">Alt+/  代码助手/单词补全</span><br><span class="line">Ctrl+1 快速修正</span><br><span class="line">Shift+F2 打开外部Java文档</span><br><span class="line">Ctrl+Shift+O 快速导包/清理无效包</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------(**查看**)----------------</span><br><span class="line">Ctrl+H 搜索对话框</span><br><span class="line">Ctrl+O 快速Outline结构显示</span><br><span class="line">全局 查找并替换 Ctrl+F </span><br><span class="line">Ctrl+e 快速切换编辑页面</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------(**Alt修改代码**)----------------</span><br><span class="line">Ctrl+D 删除行</span><br><span class="line">Alt+Up/Down 上下移动选中行</span><br><span class="line">Ctrl+Alt+↑/↓ 复制当前行到上/下一行(复制增加)</span><br><span class="line">Alt+← 前一个编辑的页面</span><br><span class="line">Alt+→ 下一个编辑的页面(当然是针对上面那条来说了)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------</span><br><span class="line">Ctrl+Shift+F 格式化当前代码</span><br><span class="line">Alt+Shift+M 抽取方法 (这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------</span><br><span class="line">Ctrl+Shift+S 保存所有</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------------[辅助使用]-----------------------------------</span><br><span class="line">Ctrl+Shift+X/Y 改变大小写</span><br><span class="line">Alt+Shift+T 显示重构菜单</span><br><span class="line">Ctrl+P 全局打印</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------------[Debug辅助]-----------------------------------</span><br><span class="line">F5：Step Into（debug）</span><br><span class="line">F6：Step over（debug）</span><br><span class="line">F7：Step return（debug）</span><br><span class="line">F8：Resume（debug）</span><br><span class="line">F11：debug上一个应用（debug）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;IDE基础&quot;&gt;&lt;a href=&quot;#IDE基础&quot; class=&quot;headerlink&quot; title=&quot;IDE基础&quot;&gt;&lt;/a&gt;IDE基础&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-一楼送给自己&quot;&gt;&lt;a href=&quot;#1-一楼送给自己&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="IDE" scheme="http://yoursite.com/categories/IDE/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux基础操作文档</title>
    <link href="http://yoursite.com/2018/08/08/Linux%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/08/08/Linux基础操作/</id>
    <published>2018-08-07T16:00:00.000Z</published>
    <updated>2018-08-08T11:05:09.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux基础操作文档"><a href="#Linux基础操作文档" class="headerlink" title="Linux基础操作文档"></a>Linux基础操作文档</h2><p>[TOC]</p><h3 id="1-User操作"><a href="#1-User操作" class="headerlink" title="1.User操作"></a>1.User操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo(Superuser do) 超级用户操作</span><br><span class="line">passwd 修改密码</span><br><span class="line">chgrp(Change group) 改变用户组</span><br><span class="line">ps(Process Status)进程状态</span><br></pre></td></tr></table></figure><h3 id="2-文件-端口系统的增删改查"><a href="#2-文件-端口系统的增删改查" class="headerlink" title="2.文件/端口系统的增删改查"></a>2.文件/端口系统的增删改查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//增</span><br><span class="line">mkdir/mkdirs 创建文件夹/指定路径文件夹</span><br><span class="line">vim 创建/打开指定文件</span><br><span class="line">tar(解压) -zxvf(每个字母都有意义) 压缩包名字.tar.gz结尾</span><br><span class="line"></span><br><span class="line">//删</span><br><span class="line">rm </span><br><span class="line">umount(Unmount) 卸载</span><br><span class="line">rm -f file1 删除一个叫做 &apos;file1&apos; 的文件&apos; </span><br><span class="line">rmdir dir1 删除一个叫做 &apos;dir1&apos; 的目录&apos; </span><br><span class="line">rm -rf dir1 删除一个叫做 &apos;dir1&apos; 的目录并同时删除其内容 </span><br><span class="line">rm -rf dir1 dir2 同时删除两个目录及它们的内容 </span><br><span class="line"></span><br><span class="line">//改</span><br><span class="line">cp 拷贝粘贴</span><br><span class="line">mv xxx  xxx 移动/重命名</span><br><span class="line"></span><br><span class="line">//****查****</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">[普通查看]</span><br><span class="line">cd 查看各种目录</span><br><span class="line">ls(list) 查看当前文件夹</span><br><span class="line">cat 查看文件内容</span><br><span class="line">pwd 当前文件夹全路径</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line">[动态查看文本]</span><br><span class="line">tail -2 file1 查看一个文件的最后两行 </span><br><span class="line">tail -f /var/log/messages 实时查看被添加到一个文件中的内容 </span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line">[查看内存]</span><br><span class="line">cat /proc/meminfo 查看详细内存使用情况</span><br><span class="line"> free -h    快速查询内存使用(单位自动换算)</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line">[核心组成]</span><br><span class="line">/etc 存放配置文件的地方.配置文件目录</span><br><span class="line">/dev(DEVices)  设备</span><br><span class="line">/usr = Unix Shared Resources 共享资源</span><br></pre></td></tr></table></figure><h3 id="3-文本操作"><a href="#3-文本操作" class="headerlink" title="3.文本操作"></a>3.文本操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">i 进入insert状态</span><br><span class="line">esc 进入文本操作</span><br><span class="line">:0 光标回到第一行</span><br><span class="line">:$光标回到最后一行</span><br><span class="line">/dsf 搜索dsf这个字符串</span><br><span class="line">:u 撤销,相当于ctrl+Z</span><br><span class="line">:q 退出</span><br><span class="line">:wq 保存并退出</span><br><span class="line">注意:断电时需要删除临时文件.xxx.swp</span><br></pre></td></tr></table></figure><h3 id="4-网络操作"><a href="#4-网络操作" class="headerlink" title="4.网络操作"></a>4.网络操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping 测试ping值</span><br><span class="line">ifconfig 查看网关地址等</span><br></pre></td></tr></table></figure><h3 id="5-端口及PID查询"><a href="#5-端口及PID查询" class="headerlink" title="5.端口及PID查询"></a>5.端口及PID查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------------------------</span><br><span class="line">[查看进程]</span><br><span class="line"># ps -aux|grep java      //显示所有进程名中包含java字符串的进程</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">[查看端口]</span><br><span class="line">netstat -t 显示TCP协议的连接情况。</span><br><span class="line">netstat -u 显示UDP协议的连接情况。</span><br><span class="line">netstat -tln 查看linux的端口使用情况</span><br><span class="line">netstat -aln|grep 8080 查看8080端口占用情况</span><br></pre></td></tr></table></figure><h3 id="6-软件管理"><a href="#6-软件管理" class="headerlink" title="6.软件管理"></a>6.软件管理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1.源码安装：</span><br><span class="line">tar -zxvf filename.tar.gz 解压</span><br><span class="line">make 编译</span><br><span class="line">make install  安装</span><br><span class="line">make clean  清除1</span><br><span class="line">make distclean 清除2</span><br><span class="line"></span><br><span class="line">2.rpm(二进制包)安装：</span><br><span class="line">(安装本地自己下载的rpm软件包，自己解决软件之间的依赖。)</span><br><span class="line"> rpm -ivh xxx.rpm 安装</span><br><span class="line"> rpm -Uvh xxx.rpm 升级</span><br><span class="line">/**</span><br><span class="line"> 一般用不到</span><br><span class="line"> rpm -e xxx.rpm 反安装</span><br><span class="line"> rpm -qpi xxx.rpm 查询软件包的详细信息</span><br><span class="line"> rpm -qf xxx.rpm 查询某个文件是属于那个rpm包</span><br><span class="line">  rpm -qpl xxx.rpm 查该软件包会向系统里面写入哪些文件</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">3.yum安装：</span><br><span class="line">(在线安装，可以解决依赖问题。)</span><br><span class="line"> 通过yum安装的php，是不需要手动配置环境变量的。配置文件目录在/etc/php.ini</span><br><span class="line"> 通过yum安装的apache2，配置文件目录在/etc/httpd/conf/</span><br><span class="line"> rm -f /etc/httpd/conf.d/welcome.conf /var/www/error/noindex.html #删除默认测试页</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">[关闭]</span><br><span class="line"></span><br><span class="line">kill 进程号 正常关闭 (正常建议使用此命令)</span><br><span class="line">kill -9 进程号  强制关闭  (暴力关闭)</span><br></pre></td></tr></table></figure><h3 id="7-开发软件操作"><a href="#7-开发软件操作" class="headerlink" title="7.开发软件操作"></a>7.开发软件操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/sshd start 启动sshd服务器</span><br><span class="line">ps -ef|grep (服务名)如redis  服务查询(通用)</span><br><span class="line">tomcat</span><br><span class="line">    service tomcat stop 停止</span><br><span class="line">service tomcat start 启动</span><br><span class="line">    tail -f logs/catalina.out 卡特琳娜日志查询 在tomcat根目录下查看</span><br><span class="line"></span><br><span class="line">http://www.dony15.com:8080/dubbo-admin-2.8.4/governance/services  查看dubbo服务管理</span><br><span class="line"></span><br><span class="line">mysql</span><br><span class="line">    service mysql stop 停止</span><br><span class="line">service mysql start 启动</span><br><span class="line"></span><br><span class="line">zookeeper(目录)</span><br><span class="line">./zkServer.sh start 启动</span><br><span class="line">./zkServer.sh status 查看状态</span><br><span class="line">./zkServer.sh stop 停止</span><br><span class="line"></span><br><span class="line">redis(目录)</span><br><span class="line">    ./redis-server redis.conf 启动</span><br><span class="line">    ./redis-cli  -p 6379  连接</span><br><span class="line">    ./bin/redis-cli -p 7001 shutdown 停止</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">redis集群(目录)</span><br><span class="line">    ./start-cluster.sh 启动</span><br><span class="line">    ./stop-cluster.sh  停止</span><br><span class="line">    ./redis-cli -h 127.0.0.1 -p 7001 -c -a 123456    远程连接(密码可删)</span><br><span class="line">    ./redis-trib.rb add-node 127.0.0.1:7007 127.0.0.1:7001    追加节点(需要注意步骤较多)</span><br><span class="line">    ./redis-trib.rb del-node 127.0.0.1:7001 a06a54ab354327cd9920fa8b14a7b8b71a4d445a    删除</span><br><span class="line">redis哨兵</span><br><span class="line">     ???</span><br><span class="line"></span><br><span class="line">tracker</span><br><span class="line">    /usr/local/software/fastdfs-master/init.d/fdfs_trackerd start 启动</span><br><span class="line">    ps -ef | grep fdfs_trackerd 查看状态</span><br><span class="line">storage</span><br><span class="line">     /usr/local/software/fastdfs-master/init.d/fdfs_storaged start 启动</span><br><span class="line">    ps -ef | grep fdfs_storaged 查看状态</span><br><span class="line"></span><br><span class="line">nginx</span><br><span class="line">    nginx    启动</span><br><span class="line">    nginx -s stop 停止</span><br><span class="line">    nginx -s reload 重新启动</span><br><span class="line"></span><br><span class="line">activeMQ</span><br><span class="line">    ./activemq start  启动(bin目录下)</span><br><span class="line">    ./activemq stop   停止</span><br><span class="line">    ./activemq status 查看状态</span><br><span class="line">    访问服务器的8161端口</span><br><span class="line">    http://www.vm.com:8161/admin/</span><br><span class="line">    用户名密码都是admin</span><br></pre></td></tr></table></figure><h3 id="8-redis集群内部指令"><a href="#8-redis集群内部指令" class="headerlink" title="8.redis集群内部指令"></a>8.redis集群内部指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看</span><br><span class="line">info replication 查看节点信息</span><br><span class="line">quit  退出</span><br></pre></td></tr></table></figure><h3 id="9-防火墙设置-端口"><a href="#9-防火墙设置-端口" class="headerlink" title="9.防火墙设置(端口)"></a>9.防火墙设置(端口)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用iptables开放如下端口</span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">保存</span><br><span class="line">/etc/rc.d/init.d/iptables save</span><br><span class="line">重启服务</span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><h3 id="10-服务器备用url"><a href="#10-服务器备用url" class="headerlink" title="10.服务器备用url"></a>10.服务器备用url</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[solor]</span><br><span class="line">http://www.fzs.com:8080/solr/admin.html</span><br><span class="line"></span><br><span class="line">[dubbo]</span><br><span class="line">http://www.fzs.com:8080/dubbo-admin/    u:root    p:root</span><br><span class="line"></span><br><span class="line">[activeMQ]</span><br><span class="line">http://www.fzs.com:8161/admin/index.jsp    u:admin    p:admin</span><br></pre></td></tr></table></figure><h3 id="11-Linux连接问题解决"><a href="#11-Linux连接问题解决" class="headerlink" title="11.Linux连接问题解决"></a>11.Linux连接问题解决</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Xshell问题*</span><br><span class="line">/etc/init.d/sshd start 启动sshd服务器</span><br><span class="line">/etc/init.d/iptables stop 关闭防火墙</span><br><span class="line"></span><br><span class="line">配置hosts</span><br><span class="line">vim /etc/hosts</span><br><span class="line"></span><br><span class="line">mysql远程连接失败问题*</span><br><span class="line">use mysql; </span><br><span class="line">UPDATE user SET Password=PASSWORD(&apos;123456&apos;) where USER=&apos;root&apos;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="End-各种软件-框架连接问题"><a href="#End-各种软件-框架连接问题" class="headerlink" title="End.各种软件/框架连接问题"></a>End.各种软件/框架连接问题</h3><h4 id="1-MySQL连接问题"><a href="#1-MySQL连接问题" class="headerlink" title="1.MySQL连接问题"></a>1.MySQL连接问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">MySQL远程访问问题(搭配上面):授权法。</span><br><span class="line"></span><br><span class="line">例如，你想myuser使用mypassword从任何主机连接到mysql服务器的话。</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;myuser&apos;@&apos;%&apos; IDENTIFIED BY &apos;mypassword&apos; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">FLUSH   PRIVILEGES;</span><br><span class="line"></span><br><span class="line">如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器，并使用mypassword作为密码</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;myuser&apos;@&apos;192.168.1.3&apos; IDENTIFIED BY &apos;mypassword&apos; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">FLUSH   PRIVILEGES;</span><br><span class="line"></span><br><span class="line">如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器的dk数据库，并使用mypassword作为密码</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON dk.* TO &apos;myuser&apos;@&apos;192.168.1.3&apos; IDENTIFIED BY &apos;mypassword&apos; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">FLUSH   PRIVILEGES;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">我用的第一个方法,最后执行一个语句 mysql&gt;FLUSH RIVILEGES 使修改生效.就可以了</span><br><span class="line"></span><br><span class="line">另外一种方法,不过我没有亲自试过的,在csdn.net上找的,可以看一下.</span><br><span class="line"></span><br><span class="line">在安装mysql的机器上运行：</span><br><span class="line"></span><br><span class="line">1、d:/mysql/bin/&gt;mysql   -h   localhost   -u   root  //这样应该可以进入MySQL服务器</span><br><span class="line"></span><br><span class="line">2、mysql&gt;GRANT   ALL   PRIVILEGES   ON   *.*   TO   &apos;root&apos;@&apos;%&apos;   WITH   GRANT   OPTION  //赋予任何主机访问数据的权限</span><br><span class="line"></span><br><span class="line">3、mysql&gt;FLUSH   PRIVILEGES  //修改生效</span><br><span class="line"></span><br><span class="line">4、mysql&gt;EXIT  //退出MySQL服务器</span><br><span class="line"></span><br><span class="line">这样就可以在其它任何的主机上以root身份登录啦！</span><br><span class="line"></span><br><span class="line">来源： https://blog.csdn.net/zyj405569395/article/details/53614356</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Linux基础操作文档&quot;&gt;&lt;a href=&quot;#Linux基础操作文档&quot; class=&quot;headerlink&quot; title=&quot;Linux基础操作文档&quot;&gt;&lt;/a&gt;Linux基础操作文档&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-User操作&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Linux基础" scheme="http://yoursite.com/categories/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>volatile基础</title>
    <link href="http://yoursite.com/2018/08/05/volatile%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/08/05/volatile基础/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-08T11:14:26.861Z</updated>
    
    <content type="html"><![CDATA[<h2 id="volatile基础"><a href="#volatile基础" class="headerlink" title="volatile基础"></a>volatile基础</h2><p>[TOC]</p><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p><strong>A.</strong>轻量级同步机制,与synchronized重量级锁不同,不会引起线程的上下文切换,但是需要注意两个问题:</p><ol><li>复合类操作无法同步 如 <strong>count++</strong></li><li>在其他变量的不变式中包含则无法同步 如<strong>常量和条件</strong>(后续再深入理解不变式)</li></ol><p><strong>B.</strong>阻止指令重排</p><h3 id="2-内存可见性"><a href="#2-内存可见性" class="headerlink" title="2.内存可见性"></a>2.内存可见性</h3><p>volatile是轻量级的同步机制,相比于synchronized重量级锁来说 ,能够节省更大的消耗,虽然在总体能力上不如synchronized安全,但是在一定场合也具有自己的优势,合理的利用volatile能够让程序更高效的运行</p><p>volatile修饰的属性对整个内存来说是可见的,即:每个线程获取到的该数据都是最新的(此处内存分配属逻辑模拟)</p><ul><li>A线程(工作内存)→<pre><code>} 主内存空间 </code></pre></li><li>B线程(工作内存)→</li></ul><p>对线程来说,正常的共享资源会从主内存中copy到自己的工作内存中,这里如同内存和硬盘的区别,可以更加快速的使用copy的资源,但是此时的工作内存对于其他线程是不可见的,因此很容易因为并发产生数据异常</p><p>当使用volatile时,该共享资源每次更新都会被同步到主内存空间中,对于其他线程来说,该数据始终是最新的,因此可以一定程度的解决并发的问题,但是有一些情况volatile无法直接实现,如<strong>非复合类操作</strong></p><h3 id="3-解决count-原子性问题"><a href="#3-解决count-原子性问题" class="headerlink" title="3.解决count++原子性问题"></a>3.解决count++原子性问题</h3><p>count++之类的非符合类操作,volatile无法保证他的原子性问题,使共享资源无法实时同步,进而引发并发问题</p><p>复合类操作过程:</p><ol><li>读取</li><li>运算</li><li>赋值</li></ol><p>因为volatile本身只是轻量级的同步机制,并非锁机制,当复合类操作的过程中可能有其他线程继续操作该资源,从而导致并发问题</p><p><strong>解决:循环CAS 方案(待研究)</strong></p><h3 id="4-阻止指令重排"><a href="#4-阻止指令重排" class="headerlink" title="4.阻止指令重排"></a>4.阻止指令重排</h3><p>指令重排是java优化程序性能的一种手段(提供并行度),但是重排也有一定的规则:</p><p>指令重排不会对<strong>存在依赖关系</strong>的数据进行操作</p><p>​    如a=1;b=a</p><p>指令重排不会对单线程下的结果进行操作</p><p>​    如a=1;b=2;c=a+b;</p><p>被volatile修饰的变量,在编译时,会插入内存屏障来阻止处理器等对数据的指令重排,阻止指令重排规则:</p><ol><li>第一个是volatile读操作时,无论第二个是什么操作,都会阻止指令重排</li><li>第二个是volatile写操作时,无论第一个是什么操作,都会阻止指令重排</li><li>第一个是volatile写操作,得个是volatile读操作时,都会阻止指令重排</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;volatile基础&quot;&gt;&lt;a href=&quot;#volatile基础&quot; class=&quot;headerlink&quot; title=&quot;volatile基础&quot;&gt;&lt;/a&gt;volatile基础&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念
      
    
    </summary>
    
      <category term="SE基础" scheme="http://yoursite.com/categories/SE%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring Cloud基础使用</title>
    <link href="http://yoursite.com/2018/07/20/Spring%20Cloud%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/07/20/Spring Cloud基础使用/</id>
    <published>2018-07-19T16:00:00.000Z</published>
    <updated>2018-07-24T10:34:11.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Cloud基础使用"><a href="#Spring-Cloud基础使用" class="headerlink" title="Spring Cloud基础使用"></a>Spring Cloud基础使用</h2><p>[TOC]</p><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><h4 id="1-1-什么是微服务"><a href="#1-1-什么是微服务" class="headerlink" title="1-1.什么是微服务?"></a>1-1.什么是微服务?</h4><p>微服务英文名称Micro service，<strong>Micro service架构模式</strong>就是将整个Web应用组织为<strong>一系列小的Web服务</strong>。</p><p>这些小的Web服务可以<strong>独立地编译及部署，并通过各自暴露的API接口相互通讯</strong>。</p><p>它们彼此相互协作，作为一个整体为用户提供功能，却可以<strong>独立地进行扩展</strong>。 </p><h4 id="1-2-微服务架构需要的功能或使用场景"><a href="#1-2-微服务架构需要的功能或使用场景" class="headerlink" title="1-2.微服务架构需要的功能或使用场景"></a>1-2.微服务架构需要的功能或使用场景</h4><ul><li>将整个系统根据业务逻辑拆分为多个子系统</li><li>每个子服务器可以部署多个应用,应用之间使用负载均衡</li></ul><ol><li>需要一个服务注册中心,所有的应用都在注册中心注册,负载均衡也在注册中心通过策略实现</li><li>所有的客户端都通过同一个网关地址访问后台的服务，通过路由配置，网关来判断一个URL请求由哪个服务处理。请求转发到服务上的时候也使用负载均衡。 </li><li>服务之间有时候也需要相互访问。例如有一个用户模块，其他服务在处理一些业务的时候，要获取用户服务的用户数据。 </li><li>需要一个断路器，及时处理服务调用时的超时和错误，防止由于其中一个服务的问题而导致整体系统的瘫痪。 </li><li>还需要一个监控功能，监控每个服务调用花费的时间等。 </li></ol><p>  目前主流的微服务框架：Dubbo、 SpringCloud、thrift、Hessian等，目前国内的中小企业用的大多数都是Dubbo，SpringCloud </p><h4 id="1-3-Spring-Colud概念"><a href="#1-3-Spring-Colud概念" class="headerlink" title="1-3.Spring Colud概念"></a>1-3.Spring Colud概念</h4><p>　springCloud是<strong>基于SpringBoot</strong>的一整套实现微服务的框架。</p><p>他提供了微服务开发所需的</p><p><strong>配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理</strong>等组件。</p><p>最重要的是，</p><p>  跟spring boot框架一起使用的话，会让你开发微服务架构的云服务非常好的方便。</p><h3 id="2-组成"><a href="#2-组成" class="headerlink" title="2.组成"></a>2.组成</h3><p><img src="https://i.imgur.com/SSZ7cM9.jpg" alt=""></p><h4 id="2-1-Spring-cloud子项目包括"><a href="#2-1-Spring-cloud子项目包括" class="headerlink" title="2-1.Spring cloud子项目包括"></a><strong>2-1.Spring cloud子项目包括</strong></h4><p> <strong>Spring Cloud Config</strong>：配置管理开发工具包，可以让你把配置放到远程服务器，目前支持本地存储、Git以及Subversion。 </p><p><strong>Spring Cloud Bus</strong>：事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与Spring Cloud Config联合实现热部署。 </p><p><strong>Spring Cloud Netflix</strong>：针对多种Netflix组件提供的开发工具包，其中包括Eureka、Hystrix、Zuul、Archaius等。 </p><p><strong>Netflix Eureka</strong>：云端负载均衡，一个基于 REST 的服务，用于定位服务，以实现云端的负载均衡和中间层服务器的故障转移。 </p><p><strong>Netflix Hystrix</strong>：容错管理工具，旨在通过控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力。 </p><p><strong>Netflix Zuul</strong>：边缘服务工具，是提供动态路由，监控，弹性，安全等的边缘服务。 </p><p><strong>Netflix Archaius</strong>：配置管理API，包含一系列配置管理API，提供动态类型化属性、线程安全配置操作、轮询框架、回调机制等功能。 </p><p><strong>Spring Cloud for Cloud Foundry</strong>：通过Oauth2协议绑定服务到CloudFoundry，CloudFoundry是VMware推出的开源PaaS云平台。 </p><p><strong>Spring Cloud Sleuth</strong>：日志收集工具包，封装了Dapper,Zipkin和HTrace操作。 </p><p><strong>Spring Cloud Data Flow</strong>：大数据操作工具，通过命令行方式操作数据流。 </p><p><strong>Spring Cloud Security</strong>：安全工具包，为你的应用程序添加安全控制，主要是指OAuth2。 </p><p><strong>Spring Cloud Consul</strong>：封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。 </p><p><strong>Spring Cloud Zookeeper</strong>：操作Zookeeper的工具包，用于使用zookeeper方式的服务注册和发现。 </p><p><strong>Spring Cloud Stream</strong>：数据流操作开发包，封装了与Redis,Rabbit、Kafka等发送接收消息。 </p><p><strong>Spring Cloud CLI</strong>：基于 Spring Boot CLI，可以让你以命令行方式快速建立云组件。 </p><h3 id="3-特点"><a href="#3-特点" class="headerlink" title="3.特点"></a>3.特点</h3><ol><li>约定优于配置 </li><li>开箱即用、快速启动 </li><li>适用于各种环境 </li><li>轻量级的组件 </li><li>组件支持丰富，功能齐全 </li></ol><h3 id="4-Dubbo和Spring-Cloud对比"><a href="#4-Dubbo和Spring-Cloud对比" class="headerlink" title="4.Dubbo和Spring Cloud对比"></a>4.Dubbo和Spring Cloud对比</h3><p>**传送门:<a href="https://www.hellojava.com/a/1040.html" target="_blank" rel="noopener">https://www.hellojava.com/a/1040.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-Cloud基础使用&quot;&gt;&lt;a href=&quot;#Spring-Cloud基础使用&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud基础使用&quot;&gt;&lt;/a&gt;Spring Cloud基础使用&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 
      
    
    </summary>
    
      <category term="Spring全家桶" scheme="http://yoursite.com/categories/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>SQL银行模拟语句整合</title>
    <link href="http://yoursite.com/2018/07/15/SQL%E9%93%B6%E8%A1%8C%E6%A8%A1%E6%8B%9F%E8%AF%AD%E5%8F%A5%E6%95%B4%E5%90%88/"/>
    <id>http://yoursite.com/2018/07/15/SQL银行模拟语句整合/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2018-07-21T08:59:27.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL银行模拟语句整合"><a href="#SQL银行模拟语句整合" class="headerlink" title="SQL银行模拟语句整合"></a>SQL银行模拟语句整合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br></pre></td><td class="code"><pre><span class="line">--创建表空间</span><br><span class="line">create tablespace bankspace datafile &apos;E:\bank\bank.dbf&apos; size 10m autoextend on;</span><br><span class="line">--创建用户bankuser</span><br><span class="line">create user bankuser identified by bankuser default tablespace bankspace;</span><br><span class="line">--</span><br><span class="line">drop table tradeinfo;</span><br><span class="line">drop table userInfo;</span><br><span class="line">drop table cardInfo;</span><br><span class="line">drop table Deposit;</span><br><span class="line">--为用户授权</span><br><span class="line">grant connect,resource to bankuser;</span><br><span class="line">--创建用户信息表</span><br><span class="line">create table userInfo --用户信息表</span><br><span class="line">(</span><br><span class="line">customerID number not null,</span><br><span class="line">customerName varchar2(8),</span><br><span class="line">PID varchar2(18) not null,</span><br><span class="line">telephone varchar2(20) not null,</span><br><span class="line">address varchar(50)</span><br><span class="line">);</span><br><span class="line">--创建银行卡信息表</span><br><span class="line">create table cardinfo(</span><br><span class="line">cardid char(19) NOT NULL,</span><br><span class="line">curid varchar(10)NOT NULL,--币种</span><br><span class="line">savingid number NOT NULL,</span><br><span class="line">openDate date NOT NULL,</span><br><span class="line">openMoney number NOT NULL,</span><br><span class="line">balance number NOT NULL,</span><br><span class="line">pass char(6)NOT NULL,</span><br><span class="line">isreportloss number(1)NOT NULL,--判断卡是否挂失</span><br><span class="line">customerID number NOT NULL</span><br><span class="line">);</span><br><span class="line">select * from userInfo;</span><br><span class="line">--创建交易信息表</span><br><span class="line">create table tradeInfo </span><br><span class="line">(</span><br><span class="line">tradeDate DATE NOT NULL,</span><br><span class="line">tradeType Char(4) NOT NULL,</span><br><span class="line">cardID  CHAR(19) NOT NULL,</span><br><span class="line">tradeMoney NUMBER NOT NULL,</span><br><span class="line">remark LONG</span><br><span class="line">);</span><br><span class="line">select * from tradeInfo;</span><br><span class="line">--创建存款类型表</span><br><span class="line">create table deposit (</span><br><span class="line">savingID NUMBER NOT NULL,</span><br><span class="line">savingName varchar(20)NOT NULL,</span><br><span class="line">descrip varchar(50)</span><br><span class="line">);</span><br><span class="line">/*为deposit表添加约束*/</span><br><span class="line">alter table deposit add constraint pa_savingID</span><br><span class="line">primary key(savingid);</span><br><span class="line">/*为userInfo添加约束*/</span><br><span class="line">--主键</span><br><span class="line">alter table userinfo add constraint pk_customerID</span><br><span class="line">primary key(customerID);</span><br><span class="line">--check约束，身份证号长度</span><br><span class="line">alter table userinfo add constraint ck_pid</span><br><span class="line">check(length(pid)=18 or length(pid)=15);</span><br><span class="line">--unique唯一约束，身份证号唯一</span><br><span class="line">alter table userinfo add constraint uq_pid unique(pid);</span><br><span class="line">--check约束，电话号码</span><br><span class="line">alter table userinfo add constraint ck_telephone</span><br><span class="line">check(regexp_like(telephone,&apos;(^\d&#123;3,4&#125;-\d&#123;7,8&#125;$)|(^\d&#123;11&#125;$)&apos;));</span><br><span class="line">--查看创建的约束</span><br><span class="line">select * from user_constraints where table_name=&apos;DEPOSIT&apos;;</span><br><span class="line">select * from user_constraints where table_name=&apos;USERINFO&apos;;</span><br><span class="line">/*为cardInfo添加约束*/</span><br><span class="line">--主键</span><br><span class="line">alter table cardinfo add constraint pk_cardid</span><br><span class="line">primary key(cardid);</span><br><span class="line">--check约束，卡号</span><br><span class="line">alter table cardinfo add constraint ck_cardID</span><br><span class="line">check(regexp_like(cardid,&apos;1010 3576 \d&#123;4&#125; \d&#123;4&#125;&apos;));</span><br><span class="line">--修改表中字段</span><br><span class="line">alter table cardInfo modify (curid varchar(10) default &apos;RMB&apos;);</span><br><span class="line">alter table cardInfo modify (opendate varchar(10) default sysdate);</span><br><span class="line">--预存金额大于等于1</span><br><span class="line">alter table cardinfo add constraint ck_openmoney</span><br><span class="line">check(openmoney&gt;=1);</span><br><span class="line">--check 约束 ，预存金额大于等于1</span><br><span class="line">alter table cardinfo add constraint ck_balance</span><br><span class="line">check(balance&gt;=1);</span><br><span class="line">--密码检查约束，密码必须是六位数字</span><br><span class="line">alter table cardinfo add constraint ck_pass</span><br><span class="line">check(regexp_like(pass,&apos;^[0-9]&#123;6&#125;$&apos;));</span><br><span class="line">--密码默认6个8</span><br><span class="line">alter table cardinfo modify (pass char(6) default &apos;888888&apos;);</span><br><span class="line">--是否挂失默认值0</span><br><span class="line">alter table cardinfo modify (isreportloss number(1) default 0);</span><br><span class="line">--外键约束</span><br><span class="line">alter table cardinfo add constraint fk_customerid</span><br><span class="line">foreign key(customerid)references userInfo(customerid);</span><br><span class="line">--外键约束</span><br><span class="line">alter table cardinfo add constraint fk_savingid</span><br><span class="line">foreign key(savingid)references deposit(savingid);</span><br><span class="line">/*为tradeinfo 表添加约束*/</span><br><span class="line">--交易类型(存入、支取)</span><br><span class="line">alter table tradeinfo add constraint ck_tradetype</span><br><span class="line">check(tradetype in (&apos;存入&apos;,&apos;支取&apos;));</span><br><span class="line">--外键</span><br><span class="line">alter table tradeinfo add constraint fk_cardID</span><br><span class="line">foreign key(cardid)references cardInfo(cardId);</span><br><span class="line">--交易金额大于0</span><br><span class="line">alter table tradeinfo add constraint ck_tradeMoney</span><br><span class="line">check(tradeMoney&gt;0);</span><br><span class="line">--交易时间</span><br><span class="line">alter table tradeinfo modify (tradeDate date default sysdate);</span><br><span class="line">/***************************************************************************************************/</span><br><span class="line">/*                                        插入测试数据                                              */</span><br><span class="line">/***************************************************************************************************/</span><br><span class="line">/*</span><br><span class="line"> ==========================</span><br><span class="line"> 测试数据</span><br><span class="line"> ==========================</span><br><span class="line"> */</span><br><span class="line">--存款类型</span><br><span class="line">INSERT INTO deposit (savingID,savingName,descrip) VALUES (1,&apos;活期&apos;,&apos;按存款日结算利息&apos;);</span><br><span class="line">INSERT INTO deposit (savingID,savingName,descrip) VALUES (2,&apos;定期一年&apos;,&apos;存款期是1年&apos;);</span><br><span class="line">INSERT INTO deposit (savingID,savingName,descrip) VALUES (3,&apos;定期二年&apos;,&apos;存款期是2年&apos;);</span><br><span class="line">INSERT INTO deposit (savingID,savingName,descrip) VALUES (4,&apos;定期三年&apos;,&apos;存款期是3年&apos;);</span><br><span class="line">INSERT INTO deposit (savingID,savingName) VALUES (5,&apos;定活两便&apos;);</span><br><span class="line">INSERT INTO deposit (savingID,savingName) VALUES (6,&apos;通知&apos;);</span><br><span class="line">INSERT INTO deposit (savingID,savingName,descrip) VALUES (7,&apos;零存整取一年&apos;,&apos;存款期是1年&apos;);</span><br><span class="line">INSERT INTO deposit (savingID,savingName,descrip) VALUES (8,&apos;零存整取二年&apos;,&apos;存款期是2年&apos;);</span><br><span class="line">INSERT INTO deposit (savingID,savingName,descrip) VALUES (9,&apos;零存整取三年&apos;,&apos;存款期是3年&apos;);</span><br><span class="line">INSERT INTO deposit (savingID,savingName,descrip) VALUES (10,&apos;存本取息五年&apos;,&apos;按月支取利息&apos;);</span><br><span class="line">SELECT * FROM DEPOSIT;</span><br><span class="line">SELECT * FROM userinfo;</span><br><span class="line">SELECT * FROM cardinfo;</span><br><span class="line">SELECT * FROM tradeinfo;</span><br><span class="line">INSERT INTO userInfo(customerID,customerName,PID,telephone,address )</span><br><span class="line">     VALUES(1,&apos;张三&apos;,&apos;123456789012345&apos;,&apos;010-67898978&apos;,&apos;北京海淀&apos;);</span><br><span class="line">INSERT INTO cardInfo(cardID,savingID,openMoney,balance,customerID)</span><br><span class="line">     VALUES(&apos;1010 3576 1234 5678&apos;,1,1000,1000,1);</span><br><span class="line">INSERT INTO userInfo(customerID,customerName,PID,telephone)</span><br><span class="line">     VALUES(2,&apos;李四&apos;,&apos;321245678912345678&apos;,&apos;0478-44443333&apos;);</span><br><span class="line">INSERT INTO cardInfo(cardID,savingID,openMoney,balance,customerID)</span><br><span class="line">     VALUES(&apos;1010 3576 1212 1134&apos;,2,1,1,2);</span><br><span class="line">INSERT INTO userInfo(customerID,customerName,PID,telephone)</span><br><span class="line">     VALUES(3,&apos;王五&apos;,&apos;567891234532124670&apos;,&apos;010-44443333&apos;);</span><br><span class="line">INSERT INTO cardInfo(cardID,savingID,openMoney,balance,customerID)</span><br><span class="line">     VALUES(&apos;1010 3576 1212 1130&apos;,2,1601,1601,3);</span><br><span class="line">INSERT INTO userInfo(customerID,customerName,PID,telephone)</span><br><span class="line">     VALUES(4,&apos;丁六&apos;,&apos;567891321242345618&apos;,&apos;0752-43345543&apos;);</span><br><span class="line">INSERT INTO cardInfo(cardID,savingID,openMoney,balance,customerID)</span><br><span class="line">     VALUES(&apos;1010 3576 1212 1004&apos;,2,1,1,4);</span><br><span class="line">/*</span><br><span class="line">张三的卡号（1010 3576 1234 5678）取款900元，李四的卡号（1010 3576 1212 1134）存款5000元，要求保存交易记录，以便客户查询和银行业务统计。</span><br><span class="line">说明：当存钱或取钱（如300元）时候，会往交易信息表（tradeInfo）中添加一条交易记录，</span><br><span class="line">      同时应更新银行卡信息表（cardInfo）中的现有余额（如增加或减少500元）</span><br><span class="line">*/</span><br><span class="line">/*--------------交易信息表插入交易记录--------------------------*/</span><br><span class="line">INSERT INTO tradeInfo(tradeType,cardID,tradeMoney) </span><br><span class="line">      VALUES(&apos;支取&apos;,&apos;1010 3576 1234 5678&apos;,900)  ;</span><br><span class="line">/*-------------更新银行卡信息表中的现有余额-------------------*/</span><br><span class="line">UPDATE cardInfo SET balance=balance-900 WHERE cardID=&apos;1010 3576 1234 5678&apos;;</span><br><span class="line">/*--------------交易信息表插入交易记录--------------------------*/</span><br><span class="line">INSERT INTO tradeInfo(tradeType,cardID,tradeMoney) </span><br><span class="line">      VALUES(&apos;存入&apos;,&apos;1010 3576 1212 1130&apos;,300)  ;</span><br><span class="line">/*-------------更新银行卡信息表中的现有余额-------------------*/</span><br><span class="line">UPDATE cardInfo SET balance=balance+300 WHERE cardID=&apos;1010 3576 1212 1130&apos;;</span><br><span class="line">/*--------------交易信息表插入交易记录--------------------------*/</span><br><span class="line">INSERT INTO tradeInfo(tradeType,cardID,tradeMoney) </span><br><span class="line">      VALUES(&apos;存入&apos;,&apos;1010 3576 1212 1004&apos;,1000)  ;</span><br><span class="line">/*-------------更新银行卡信息表中的现有余额-------------------*/</span><br><span class="line">UPDATE cardInfo SET balance=balance+1000 WHERE cardID=&apos;1010 3576 1212 1004&apos;;</span><br><span class="line">/*--------------交易信息表插入交易记录--------------------------*/</span><br><span class="line">INSERT INTO tradeInfo(tradeType,cardID,tradeMoney) </span><br><span class="line">      VALUES(&apos;支取&apos;,&apos;1010 3576 1212 1130&apos;,1900)  ;</span><br><span class="line">/*-------------更新银行卡信息表中的现有余额--报错-----------------*/</span><br><span class="line">UPDATE cardInfo SET balance=balance-1900 WHERE cardID=&apos;1010 3576 1212 1130&apos;;</span><br><span class="line">/*--------------交易信息表插入交易记录--------------------------*/</span><br><span class="line">INSERT INTO tradeInfo(tradeType,cardID,tradeMoney) </span><br><span class="line">      VALUES(&apos;存入&apos;,&apos;1010 3576 1212 1134&apos;,5000)   ;</span><br><span class="line">      </span><br><span class="line">      --INSERT INTO tradeInfo(tradeType,cardID,tradeMoney,Tradedate) </span><br><span class="line">      --VALUES(&apos;存入&apos;,&apos;1010 3576 1212 1134&apos;,5000,to_date(&apos;2014-06-01&apos;,&apos;yyyy-mm-dd&apos;))   ;</span><br><span class="line">/*-------------更新银行卡信息表中的现有余额-------------------*/</span><br><span class="line">UPDATE cardInfo SET balance=balance+5000 WHERE cardID=&apos;1010 3576 1212 1134&apos;;</span><br><span class="line">commit;</span><br><span class="line">/*--------检查测试数据是否正确---------*/</span><br><span class="line">SELECT * FROM cardInfo;</span><br><span class="line">SELECT * FROM tradeInfo;</span><br><span class="line">SELECT * FROM userInfo;</span><br><span class="line">--删除数据</span><br><span class="line">delete from tradeInfo;</span><br><span class="line">delete from cardInfo;</span><br><span class="line">delete from userInfo;</span><br><span class="line">delete from DEPOSIT;</span><br><span class="line">/*</span><br><span class="line">取本周第一天</span><br><span class="line">select trunc (sysdate,&apos;DAY&apos;) from dual;</span><br><span class="line">*/</span><br><span class="line">/*---------修改密码-----*/</span><br><span class="line">--1.张三（卡号为1010 3576 1234 5678）修改银行卡密码为123456</span><br><span class="line">--2.李四（卡号为1010 3576 1212 1134）修改银行卡密码为123123</span><br><span class="line">update cardInfo set pass=&apos;123456&apos; WHERE cardID=&apos;1010 3576 1234 5678&apos; ;</span><br><span class="line">update cardInfo set pass=&apos;123123&apos; WHERE cardID=&apos;1010 3576 1212 1134&apos; ;</span><br><span class="line">--查询账户信息</span><br><span class="line">SELECT * FROM cardInfo;</span><br><span class="line">/*---------挂失帐号---------*/</span><br><span class="line">--李四（卡号为1010 3576 1212 1134）因银行卡丢失，申请挂失</span><br><span class="line">update cardInfo set IsReportLoss=1 WHERE cardID=&apos;1010 3576 1212 1134&apos; ;</span><br><span class="line">SELECT * FROM cardInfo;</span><br><span class="line">--查看修改密码和挂失结果</span><br><span class="line">SELECT cardid 卡号,curID 货币,savingName 储蓄种类,opendate 开户日期,openmoney 开户金额,balance 余额,pass 密码,</span><br><span class="line">    case IsReportLoss WHEN 1 THEN &apos;挂失&apos;  WHEN 0 THEN &apos;未挂失&apos; ELSE NULL end 是否挂失, </span><br><span class="line">    customerName 客户姓名</span><br><span class="line">FROM CardInfo, Deposit, UserInfo</span><br><span class="line">WHERE CardInfo.savingID=Deposit.savingID and CardInfo.customerID = UserInfo.customerID;</span><br><span class="line">/*--------统计银行的资金流通余额和盈利结算------------------------------*/</span><br><span class="line">--统计说明:存款代表资金流入,取款代表资金.假定存款利率为千分之3,贷款利率为千分之8</span><br><span class="line">/*--单一货币RMB--*/</span><br><span class="line">DECLARE </span><br><span class="line">    v_inMoney number;</span><br><span class="line">    v_outMoney number;</span><br><span class="line">    v_profit number;</span><br><span class="line">begin</span><br><span class="line">    --SELECT * FROM tradeInfo </span><br><span class="line">    SELECT sum(tradeMoney) into v_inMoney FROM tradeInfo WHERE (tradeType=&apos;存入&apos;);</span><br><span class="line">    SELECT sum(tradeMoney) into v_outMoney FROM tradeInfo WHERE (tradeType=&apos;支取&apos;);</span><br><span class="line">    dbms_output.put_line(&apos;银行流通余额总计为:&apos;||to_char(v_inMoney-v_outMoney)||&apos;RMB&apos;);</span><br><span class="line">    v_profit:=v_outMoney*0.008-v_inMoney*0.003;</span><br><span class="line">    dbms_output.put_line(&apos;盈利结算为:&apos;||to_char(v_profit)||&apos;RMB&apos;);</span><br><span class="line">end;</span><br><span class="line">/*--------查询本周开户的卡号,显示该卡相关信息-----------------*/</span><br><span class="line">SELECT c.cardID 卡号,u.customerName 姓名,c.curID 货币,d.savingName 存款类型,c.openDate 开户日期,c.openMoney 开户金额,c.balance 存款余额,</span><br><span class="line">       CASE c.IsReportLoss WHEN 0 THEN &apos;正常账户&apos;</span><br><span class="line">                           WHEN 1 THEN &apos;挂失账户&apos;</span><br><span class="line">                           ELSE NULL</span><br><span class="line">       END 账户状态</span><br><span class="line">FROM cardInfo c INNER JOIN userInfo u ON (c.customerID = u.customerID)</span><br><span class="line">INNER JOIN Deposit d ON (c.savingID = d.savingID )</span><br><span class="line">WHERE  openDate between trunc(sysdate,&apos;DAY&apos;) and trunc(sysdate,&apos;DAY&apos;)+6</span><br><span class="line">/*---------查询本月交易金额最高的卡号----------------------*/</span><br><span class="line">SELECT * FROM tradeInfo;</span><br><span class="line">SELECT DISTINCT cardID </span><br><span class="line">FROM tradeInfo </span><br><span class="line">WHERE  tradeMoney=</span><br><span class="line">    (SELECT Max(tradeMoney) FROM tradeInfo</span><br><span class="line">     WHERE to_char(tradeDate,&apos;yyyy-mm&apos;)=to_char(sysdate,&apos;yyyy-mm&apos;));</span><br><span class="line">   </span><br><span class="line">/*---------查询挂失帐号的客户信息---------------------*/</span><br><span class="line">SELECT customerName as 客户姓名,telephone as 联系电话 FROM userInfo </span><br><span class="line">    WHERE customerID IN (SELECT customerID FROM cardInfo WHERE IsReportLoss=1);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">/*------催款提醒：例如某种业务的需要，每个月末，如果发现用户帐上余额少于200元，将致电催款。---*/</span><br><span class="line">SELECT customerName as 客户姓名,telephone as 联系电话,balance as 存款余额 </span><br><span class="line">FROM userInfo INNER JOIN cardInfo ON  userInfo.customerID=cardInfo.customerID </span><br><span class="line">WHERE balance&lt;200;</span><br><span class="line">/*视图查询*/</span><br><span class="line">--1.创建视图：为了向客户显示信息友好,查询各表要求字段全为中文字段名。</span><br><span class="line">create or replace VIEW vw_userInfo  --客户信息表视图</span><br><span class="line">  AS </span><br><span class="line">    select customerID as 客户编号,customerName as 开户名, PID as 身份证号,</span><br><span class="line">        telephone as 电话号码,address as 居住地址  from userInfo;</span><br><span class="line">--使用视图</span><br><span class="line">SELECT * FROM vw_userInfo;</span><br><span class="line">--2.创建视图：查询银行卡信息</span><br><span class="line">create or replace VIEW vw_cardInfo  --银行卡信息表视图</span><br><span class="line">  AS </span><br><span class="line">    select c.cardID as 卡号,u.customerName as 客户,c.curID as 货币种类, d.savingName as 存款类型,c.openDate as 开户日期,</span><br><span class="line">       c.balance as 余额,c.pass 密码,</span><br><span class="line">       case c.IsReportLoss when 0 then &apos;正常&apos;</span><br><span class="line">                           when 1 then &apos;挂失&apos;</span><br><span class="line">       end as 是否挂失</span><br><span class="line">    from cardInfo c, deposit d,userinfo u</span><br><span class="line">    where c.savingID=d.savingID and c.customerID=u.customerID;</span><br><span class="line">--使用视图</span><br><span class="line">SELECT * FROM vw_cardInfo;</span><br><span class="line">SELECT 客户,余额 FROM vw_cardInfo where 客户=&apos;张三&apos;;</span><br><span class="line">--3.创建视图：查看交易信息</span><br><span class="line">create VIEW vw_tradeInfo  --交易信息表视图</span><br><span class="line">  AS </span><br><span class="line">    select tradeDate as 交易日期,tradeType as 交易类型, cardID as 卡号,tradeMoney as 交易金额,</span><br><span class="line">      remark as 备注  from tradeInfo ;</span><br><span class="line">--使用视图</span><br><span class="line">SELECT * FROM vw_tradeInfo;</span><br><span class="line">--4.根据客户登录名（采用实名制访问银行系统）查询该客户帐户信息的视图</span><br><span class="line">/*trim去掉前后空格*/</span><br><span class="line">create or replace VIEW vw_oneUserInfo  </span><br><span class="line">  AS </span><br><span class="line">     select customerID as 客户编号,customerName as 开户名, PID as 身份证号,</span><br><span class="line">        telephone as 电话号码,address as 居住地址  </span><br><span class="line">     from userInfo</span><br><span class="line">     where UPPER(TRIM(customerName)) in (select UPPER(TRIM(username)) from user_users);</span><br><span class="line">select * from user_users;</span><br><span class="line">--使用视图</span><br><span class="line">select * from vw_oneUserInfo;</span><br><span class="line">/*</span><br><span class="line">存储过程</span><br><span class="line">*/</span><br><span class="line">select * from tradeinfo;</span><br><span class="line">select * from cardinfo;</span><br><span class="line">/*--1.取钱或存钱的存储过程*/</span><br><span class="line">create or replace procedure usp_takeMoney </span><br><span class="line">  (v_card char, --卡号</span><br><span class="line">  v_m number,  --存取金额</span><br><span class="line">  v_type char,  --存取类型</span><br><span class="line">  v_inputPass char default NULL) --密码</span><br><span class="line">as</span><br><span class="line">    v1 number(1);  --临时变量</span><br><span class="line">    v_mybalance  number; --余额</span><br><span class="line">begin</span><br><span class="line">    dbms_output.put_line(&apos;交易正进行,请稍后......&apos;);</span><br><span class="line">    if (v_type=&apos;支取&apos;) then</span><br><span class="line">       SELECT 1 into v1 FROM cardInfo WHERE cardID=v_card and pass=v_inputPass;</span><br><span class="line">    end if;</span><br><span class="line">    SELECT balance into v_mybalance </span><br><span class="line">    FROM cardInfo </span><br><span class="line">    WHERE cardID=v_card;</span><br><span class="line">    if (v_type=&apos;支取&apos;) then</span><br><span class="line">       if (v_mybalance&gt;=v_m+1) then</span><br><span class="line">           update cardInfo set balance=balance-v_m WHERE cardID=v_Card;</span><br><span class="line">       else</span><br><span class="line">            dbms_output.put_line(&apos;卡号&apos;||v_card||&apos;  余额：&apos;||to_char(v_mybalance));</span><br><span class="line">            raise_application_error(-20000,&apos;交易失败！余额不足！&apos;);</span><br><span class="line">        end if;</span><br><span class="line">    else</span><br><span class="line">         update cardInfo set balance=balance+v_m WHERE cardID=v_card;</span><br><span class="line">    end if;</span><br><span class="line">    dbms_output.put_line(&apos;交易成功！交易金额：&apos;||to_char(v_m));</span><br><span class="line">    SELECT balance into v_mybalance FROM cardInfo WHERE cardID=v_card;</span><br><span class="line">    dbms_output.put_line(&apos;卡号&apos;||v_card||&apos;  余额：&apos;||to_char(v_mybalance)); </span><br><span class="line">    INSERT INTO tradeInfo(tradeType,cardID,tradeMoney) VALUES(v_type,v_card,v_m);</span><br><span class="line">    commit;</span><br><span class="line">exception</span><br><span class="line">   when no_data_found then</span><br><span class="line">      raise_application_error(-20001,&apos;卡号或密码错误!&apos;);</span><br><span class="line">end;</span><br><span class="line">--调用存储过程取钱或存钱 张三取300，</span><br><span class="line"> --现实中的取款机依靠读卡器读出张三的卡号,这里根据张三的名字查出考号来模拟</span><br><span class="line"> </span><br><span class="line"> DECLARE</span><br><span class="line">   emp_20000 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(emp_20000, -20000);</span><br><span class="line">   emp_20001 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(emp_20001, -20001);</span><br><span class="line">   v_card char(19);</span><br><span class="line">BEGIN</span><br><span class="line">    select cardID into v_card </span><br><span class="line">    from cardInfo Inner Join userInfo ON cardInfo.customerID=userInfo.customerID </span><br><span class="line">    where customerName=&apos;张三&apos;;</span><br><span class="line">    usp_takeMoney(v_card,300 ,&apos;支取&apos;,&apos;123456&apos;);</span><br><span class="line">EXCEPTION</span><br><span class="line">   WHEN emp_20000 THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;交易失败！余额不足！&apos;);</span><br><span class="line">      rollback;</span><br><span class="line">   WHEN emp_20001 THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;密码错误!&apos;);</span><br><span class="line">      rollback;</span><br><span class="line">   WHEN no_data_found THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;用户名不存在!&apos;);      </span><br><span class="line">      rollback;</span><br><span class="line">   WHEN OTHERS THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;出现了其他异常错误&apos;);</span><br><span class="line">      rollback;</span><br><span class="line">END;</span><br><span class="line">--调用存储过程，李四存500</span><br><span class="line"> </span><br><span class="line">DECLARE</span><br><span class="line">   emp_20000 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(emp_20000, -20000);</span><br><span class="line">   emp_20001 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(emp_20001, -20001);</span><br><span class="line">   v_card char(19);</span><br><span class="line">BEGIN</span><br><span class="line">    select cardID into v_card </span><br><span class="line">    from cardInfo Inner Join userInfo ON cardInfo.customerID=userInfo.customerID </span><br><span class="line">    where customerName=&apos;李四&apos;;</span><br><span class="line">    usp_takeMoney(v_card,500 ,&apos;存入&apos;);</span><br><span class="line">EXCEPTION</span><br><span class="line">   WHEN emp_20000 THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;交易失败！余额不足！&apos;);</span><br><span class="line">      rollback;</span><br><span class="line">   WHEN emp_20001 THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;密码错误!&apos;);</span><br><span class="line">      rollback;</span><br><span class="line">   WHEN OTHERS THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;出现了其他异常错误&apos;);</span><br><span class="line">      rollback;</span><br><span class="line">END;</span><br><span class="line">select * from vw_cardInfo;</span><br><span class="line">select * from vw_tradeInfo;</span><br><span class="line">/*--2.产生随机卡号的存储过程(dbms_random包来实现) --*/</span><br><span class="line">create or replace procedure usp_randCardID(v_randCardID OUT char)</span><br><span class="line">AS</span><br><span class="line">    v_r number(8);</span><br><span class="line">BEGIN</span><br><span class="line">  v_r:=round(dbms_random.value(10000000,99999999));--产生这个范围(10000000,99999999)的随机数</span><br><span class="line">  v_randCardID:=&apos;1010 3576 &apos;||substr(v_r,1,4)||&apos; &apos;||substr(v_r,5,8);--四位一空格</span><br><span class="line">end;</span><br><span class="line">--测试产生随机卡号</span><br><span class="line">DECLARE </span><br><span class="line">    v_mycardID char(19) ;</span><br><span class="line">BEGIN</span><br><span class="line">    usp_randCardID(v_mycardID);</span><br><span class="line">    dbms_output.put_line(&apos;产生的随机卡号为：&apos;||v_mycardID);</span><br><span class="line">END;</span><br><span class="line">/*--3.开户的存储过程--*/</span><br><span class="line">select * from userInfo;</span><br><span class="line">CREATE SEQUENCE seq_customerID</span><br><span class="line">        START WITH 10 </span><br><span class="line">        INCREMENT BY 1</span><br><span class="line">        NOMAXVALUE </span><br><span class="line">        NOCYCLE</span><br><span class="line">        CACHE 30;</span><br><span class="line">create or replace procedure usp_openAccount</span><br><span class="line">( v_customerName char,</span><br><span class="line">  v_PID char,</span><br><span class="line">  v_telephone char,</span><br><span class="line">  v_openMoney number,</span><br><span class="line">  v_savingName char,</span><br><span class="line">  v_address varchar default &apos;&apos; )</span><br><span class="line">AS</span><br><span class="line">   v_mycardID char(19);</span><br><span class="line">   v_cur_customerID int;</span><br><span class="line">   v_savingID int ;</span><br><span class="line">   v1 int;</span><br><span class="line"> begin</span><br><span class="line">   --调用产生随机卡号的存储过程获得随机卡号</span><br><span class="line">   usp_randCardID (v_mycardID);</span><br><span class="line">   SELECT count(*) into v1 FROM cardInfo WHERE cardID=v_mycardID;</span><br><span class="line">   while (v1&lt;&gt;0) loop</span><br><span class="line">      usp_randCardID (v_mycardID);</span><br><span class="line">      SELECT count(*) into v1 FROM cardInfo WHERE cardID=v_mycardID;            </span><br><span class="line">   end loop;</span><br><span class="line">   dbms_output.put_line(&apos;尊敬的客户,开户成功!系统为您产生的随机卡号为:&apos;||v_mycardID);</span><br><span class="line">   dbms_output.put_line(&apos;开户日期&apos;||to_char(sysdate,&apos;yyyy-mm-dd&apos;)||&apos;  开户金额:&apos;||to_char(v_openMoney));</span><br><span class="line">   select count(*) into v1 from userInfo where PID=v_PID;</span><br><span class="line">   if v1=0 then</span><br><span class="line">         INSERT INTO userInfo(customerID,customerName,PID,telephone,address )</span><br><span class="line">          VALUES(seq_customerID.nextval,v_customerName,v_PID,v_telephone,v_address) ;   </span><br><span class="line">   end if;  </span><br><span class="line">   SELECT savingID into v_savingID FROM deposit WHERE savingName =v_savingName;</span><br><span class="line">   select customerID into v_cur_customerID from userInfo where PID=v_PID;</span><br><span class="line">   INSERT INTO cardInfo(cardID,savingID,openMoney,balance,customerID)</span><br><span class="line">         VALUES(v_mycardID,v_savingID,v_openMoney,v_openMoney,v_cur_customerID);</span><br><span class="line">exception</span><br><span class="line">    when no_data_found then</span><br><span class="line">        raise_application_error(-20000,&apos;存款类型不正确,请重新输入!&apos;);</span><br><span class="line">    when others then</span><br><span class="line">        raise_application_error(-20001,&apos;其他错误,请重新输入!&apos;);</span><br><span class="line">end;</span><br><span class="line">--调用存储过程重新开户</span><br><span class="line">begin</span><br><span class="line">    usp_openAccount (&apos;王老五&apos;,&apos;334456889012678&apos;,&apos;2222-63598978&apos;,1000,&apos;活期&apos;,&apos;河南新乡&apos;);</span><br><span class="line">    commit;</span><br><span class="line">end;</span><br><span class="line">--EXEC usp_openAccount(&apos;赵小二&apos;,&apos;213445678912342222&apos;,&apos;0760-44446666&apos;,1,&apos;定期&apos;);</span><br><span class="line">select * from vw_userInfo;</span><br><span class="line">select * from vw_cardInfo;</span><br><span class="line">select * from vw_tradeInfo;</span><br><span class="line">GO</span><br><span class="line">/*--4.输入页数和每页显示的记录数，实现分页显示*/</span><br><span class="line">--DROP PROCEDURE usp_pagingDisplay</span><br><span class="line">SELECT tradeDate 交易日期,tradeType 交易类型,cardID 卡号,trademoney 交易金额 </span><br><span class="line">FROM (SELECT t.*,rownum rn FROM (SELECT * FROM tradeInfo ) t)</span><br><span class="line">WHERE rn&gt;=4 and rn&lt;=6;</span><br><span class="line">CREATE OR REPLACE PROCEDURE usp_pagingDisplay</span><br><span class="line">( v_page number:= 1, </span><br><span class="line">  v_records number:= 10)</span><br><span class="line">AS</span><br><span class="line">  v_rec1 number;</span><br><span class="line">  v_rec2 number;</span><br><span class="line">  v_statement varchar2(200);</span><br><span class="line">  TYPE cursor_type IS REF CURSOR;</span><br><span class="line">  --声明一个游标变量</span><br><span class="line">  c1 CURSOR_TYPE;</span><br><span class="line">  v_trade tradeinfo%rowtype;</span><br><span class="line">begin</span><br><span class="line">  v_rec1:= (v_page-1)*v_records+1;</span><br><span class="line">  v_rec2:= v_page*v_records;</span><br><span class="line">  v_statement:=&apos;SELECT  tradeDate,tradeType,cardID,trademoney,REMARK &apos;;</span><br><span class="line">  --SQL语句拼接</span><br><span class="line">  v_statement:=v_statement||&apos;FROM (SELECT t.*,rownum rn FROM (SELECT * FROM tradeInfo ) t) &apos;;</span><br><span class="line">  v_statement:=v_statement||&apos;WHERE rn&gt;=&apos;||v_rec1||&apos; and rn&lt;=&apos;||v_rec2;</span><br><span class="line">  --dbms_output.put_line(v_statement);</span><br><span class="line">  dbms_output.put_line(&apos;交易日期   交易类型             卡号           交易金额 &apos;);</span><br><span class="line">  dbms_output.put_line(&apos;---------------------------------------------------------&apos;);</span><br><span class="line">  open c1 for v_statement;</span><br><span class="line">  LOOP</span><br><span class="line">      FETCH c1 INTO v_trade ;</span><br><span class="line">      EXIT WHEN c1%NOTFOUND;</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(to_char(v_trade.tradeDate,&apos;yyyy-mm-dd&apos;)||&apos;     &apos;||v_trade.tradeType||&apos;     &apos;||v_trade.cardID||&apos;     &apos;||v_trade.trademoney);</span><br><span class="line">  END LOOP;</span><br><span class="line">  CLOSE c1;</span><br><span class="line">END;</span><br><span class="line">BEGIN</span><br><span class="line"> usp_pagingDisplay(2,2);</span><br><span class="line">END;</span><br><span class="line">/*---- 5.打印对账单 ----*/</span><br><span class="line">--drop proc usp_CheckSheet</span><br><span class="line">CREATE OR REPLACE PROCEDURE usp_CheckSheet(</span><br><span class="line">  v_cardID varchar2,</span><br><span class="line">  v_date1 date:=NULL,</span><br><span class="line">  v_date2 date:=NULL)</span><br><span class="line">AS</span><br><span class="line">    v_custName varchar2(20);</span><br><span class="line">    v_curName varchar2(20);</span><br><span class="line">    v_savingName varchar2(20);</span><br><span class="line">    v_openDate date;</span><br><span class="line">  TYPE cursor_type IS REF CURSOR;</span><br><span class="line">  --声明一个游标变量</span><br><span class="line">   c1 CURSOR_TYPE;</span><br><span class="line">   v_trade tradeinfo%rowtype;</span><br><span class="line">   v_sqlStr varchar2(2000);</span><br><span class="line">BEGIN</span><br><span class="line">    SELECT c.curID, u.customerName,d.savingName ,c.openDate</span><br><span class="line">  INTO v_curName,v_custName,v_savingName, v_openDate</span><br><span class="line">    FROM cardInfo c inner join  userInfo u on c.customerID=u.customerID</span><br><span class="line">                  inner join deposit d on c.savingID = d.savingID</span><br><span class="line">    WHERE  cardID = v_cardID; --and u.customerName = user_name()</span><br><span class="line">    dbms_output.put_line(&apos;卡号：&apos; || v_cardID);</span><br><span class="line">    dbms_output.put_line(&apos;姓名:&apos;  || v_custName);</span><br><span class="line">    dbms_output.put_line(&apos;货币:&apos;  || v_curName);</span><br><span class="line">    dbms_output.put_line(&apos;存款类型：&apos;  || v_savingName);</span><br><span class="line">    dbms_output.put_line(&apos;开户日期：&apos;  || to_char(v_openDate,&apos;yyyy&quot;年&quot;mm&quot;月&quot;dd&quot;日&quot;&apos;));</span><br><span class="line">    dbms_output.put_line(&apos; &apos;);</span><br><span class="line">    dbms_output.put_line(&apos;--------------------------------------------------------------------&apos;);</span><br><span class="line">  dbms_output.put_line(&apos;交易日   &apos;||&apos;   类型  &apos;||&apos;   交易金额  &apos;||&apos;   备注&apos;);</span><br><span class="line">  v_sqlStr:=&apos;SELECT *</span><br><span class="line">        FROM tradeInfo</span><br><span class="line">        WHERE cardID=&apos;&apos;&apos;||v_cardID||&apos;&apos;&apos;&apos;;</span><br><span class="line">  IF v_date2 IS NOT NULL THEN</span><br><span class="line">      v_sqlStr:=v_sqlStr||&apos; AND tradeDate &lt;=to_date(&apos;&apos;&apos;||to_char(v_date2,&apos;yyyy-mm-dd&apos;)||&apos; 23:59:59&apos;||&apos;&apos;&apos;,&apos;&apos;yyyy-mm-dd hh24:mi:ss&apos;&apos;)&apos;;</span><br><span class="line">  END IF;</span><br><span class="line">  IF v_date1 IS NOT NULL THEN</span><br><span class="line">      v_sqlStr:=v_sqlStr||&apos; AND tradeDate &gt;=to_date(&apos;&apos;&apos;||to_char(v_date1,&apos;yyyy-mm-dd&apos;)||&apos; 00:00:00&apos;||&apos;&apos;&apos;,&apos;&apos;yyyy-mm-dd hh24:mi:ss&apos;&apos;)&apos;;       </span><br><span class="line">  END IF;</span><br><span class="line">  v_sqlStr:=v_sqlStr||&apos; ORDER BY tradeDate&apos;;</span><br><span class="line">  --dbms_output.put_line(v_sqlStr);</span><br><span class="line">  open c1 for v_sqlStr;</span><br><span class="line">  LOOP</span><br><span class="line">      FETCH c1 INTO v_trade ;</span><br><span class="line">      EXIT WHEN c1%NOTFOUND;  </span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(to_char(v_trade.tradeDate,&apos;yyyy-mm-dd&apos;)||&apos;     &apos;||v_trade.tradeType||&apos;     &apos;||v_trade.tradeMoney||&apos;     &apos;||v_trade.remark);</span><br><span class="line">  END LOOP;</span><br><span class="line">  CLOSE c1;</span><br><span class="line">END;</span><br><span class="line">--调用</span><br><span class="line">begin</span><br><span class="line">  -- Test statements here</span><br><span class="line">  usp_CheckSheet(&apos;1010 3576 1212 1130&apos;,to_date(&apos;2012-12-01&apos;,&apos;yyyy-mm-dd&apos;),to_date(&apos;2013-11-01&apos;,&apos;yyyy-mm-dd&apos;));</span><br><span class="line">end;</span><br><span class="line">/*--6.查询、统计在指定时间段内没有发生交易的账户信息*/</span><br><span class="line">--drop proc usp_getWithoutTrade</span><br><span class="line">create or replace procedure usp_getWithoutTrade(</span><br><span class="line">  v_Num out number ,</span><br><span class="line">  v_Amount out number ,</span><br><span class="line">  v_date1 date := NULL,</span><br><span class="line">  v_date2 date := NULL)</span><br><span class="line">AS</span><br><span class="line"> v_sd date;</span><br><span class="line"> v_ed date;</span><br><span class="line">TYPE cursor_type IS REF CURSOR;</span><br><span class="line">c1 CURSOR_TYPE;</span><br><span class="line">v_cur userInfo%rowtype;</span><br><span class="line">BEGIN</span><br><span class="line">  IF v_date1 IS NULL THEN</span><br><span class="line">   v_sd:=trunc(sysdate,&apos;month&apos;);</span><br><span class="line">  END IF;</span><br><span class="line">  IF v_date2 IS NULL THEN</span><br><span class="line">     v_ed := sysdate;</span><br><span class="line">  END IF;</span><br><span class="line">  dbms_output.put_line(&apos;客户号   &apos;||&apos;  客户姓名&apos;||&apos;    身份证号&apos;||&apos;   电话&apos;||&apos;   地址&apos;);</span><br><span class="line">  dbms_output.put_line(&apos;---------------------------------------------------------------&apos;);</span><br><span class="line">  open c1 for SELECT distinct u.customerID,u.customerName,u.PID,u.telephone,address</span><br><span class="line">  FROM userInfo u</span><br><span class="line">  JOIN cardInfo c ON u.customerID = c.customerID</span><br><span class="line">  WHERE c.cardID NOT IN (SELECT cardID FROM tradeInfo WHERE tradeDate Between  v_sd and v_ed);</span><br><span class="line">  LOOP</span><br><span class="line">      FETCH c1 INTO v_cur ;</span><br><span class="line">      EXIT WHEN c1%NOTFOUND;</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(v_cur.customerID||&apos;     &apos;||v_cur.customerName||&apos;     &apos;||v_cur.PID||&apos;     &apos;||v_cur.telephone||&apos;   &apos;||v_cur.address);</span><br><span class="line">  END LOOP;</span><br><span class="line">  CLOSE c1;</span><br><span class="line">  SELECT COUNT(customerID),SUM(balance) into  v_Num,v_Amount</span><br><span class="line">  FROM cardInfo</span><br><span class="line">  WHERE cardID NOT IN (SELECT cardID FROM tradeInfo WHERE tradeDate Between v_sd and v_ed);</span><br><span class="line">end;</span><br><span class="line">--调用存储过程</span><br><span class="line">DECLARE </span><br><span class="line">  v_NUM number;</span><br><span class="line">  v_Amount number(18,2);</span><br><span class="line">  v_date1 date;</span><br><span class="line">  v_date2 date;</span><br><span class="line">begin</span><br><span class="line">  v_date1:= to_date(&apos;2009-1-1&apos;,&apos;yyyy-mm-dd&apos;);</span><br><span class="line">  v_date2:= sysdate;</span><br><span class="line">  usp_getWithoutTrade(v_NUM, v_Amount);--, @date1, @date2</span><br><span class="line">  dbms_output.put_line(&apos;统计未发生交易的客户&apos;);</span><br><span class="line">  dbms_output.put_line( &apos;---------------------------------------&apos;);</span><br><span class="line">  dbms_output.put_line( &apos;客户人数：&apos; || v_NUM || &apos;  客户总余额：&apos; || v_Amount);</span><br><span class="line">end;</span><br><span class="line">/*--7.统计银行卡交易量和交易额*/</span><br><span class="line">--drop proc usp_getTradeInfo</span><br><span class="line">create or replace procedure usp_getTradeInfo(</span><br><span class="line">  v_Num1 out number,</span><br><span class="line">  v_Amount1 out number,</span><br><span class="line">  v_Num2 out number,</span><br><span class="line">  v_Amount2  out number,</span><br><span class="line">  v_date1 date:=trunc(sysdate,&apos;year&apos;),</span><br><span class="line">  v_date2 date:=sysdate,</span><br><span class="line">  v_address varchar:= NULL)</span><br><span class="line">AS</span><br><span class="line">BEGIN</span><br><span class="line"> </span><br><span class="line">  IF v_address IS NULL THEN</span><br><span class="line">    SELECT COUNT(tradeMoney), SUM(tradeMoney) into v_num1,v_Amount1</span><br><span class="line">    FROM tradeInfo</span><br><span class="line">    WHERE tradeDate BETWEEN v_date1 AND v_date2 AND tradeType=&apos;存入&apos;;</span><br><span class="line">    SELECT COUNT(tradeMoney), SUM(tradeMoney) into v_num2,v_Amount2</span><br><span class="line">    FROM tradeInfo</span><br><span class="line">    WHERE tradeDate BETWEEN v_date1 AND v_date2 AND tradeType=&apos;支取&apos;;</span><br><span class="line">  ELSE</span><br><span class="line">    SELECT  COUNT(tradeMoney), SUM(tradeMoney) into v_num1,v_Amount1</span><br><span class="line">    FROM tradeInfo JOIN cardInfo ON tradeInfo.cardID = cardInfo.cardID</span><br><span class="line">           JOIN userInfo ON cardInfo.customerID = userInfo.customerID</span><br><span class="line">    WHERE tradeDate BETWEEN v_date1 AND v_date2 AND tradeType=&apos;存入&apos;</span><br><span class="line">        AND address Like &apos;%&apos;||v_address||&apos;%&apos;;</span><br><span class="line">    SELECT COUNT(tradeMoney), SUM(tradeMoney) into v_num2,v_Amount2</span><br><span class="line">    FROM tradeInfo JOIN cardInfo ON tradeInfo.cardID = cardInfo.cardID</span><br><span class="line">           JOIN userInfo ON cardInfo.customerID = userInfo.customerID</span><br><span class="line">    WHERE tradeDate BETWEEN v_date1 AND v_date2 AND tradeType=&apos;支取&apos;</span><br><span class="line">        AND address Like &apos;%&apos;||v_address||&apos;%&apos;;</span><br><span class="line">  END IF;</span><br><span class="line">  v_num1:=nvl(v_num1,0);</span><br><span class="line">  v_num2:=nvl(v_num2,0);</span><br><span class="line">  v_Amount1:=nvl(v_Amount1,0);</span><br><span class="line">  v_Amount2:=nvl(v_Amount2,0);</span><br><span class="line">end;</span><br><span class="line">--调用</span><br><span class="line">declare </span><br><span class="line">    v_CNT1 number;</span><br><span class="line">    v_Total1 number(18,2);</span><br><span class="line">    v_CNT2 number;</span><br><span class="line">    v_Total2 number(18,2);</span><br><span class="line">    v_date1 date;</span><br><span class="line">    v_date2 date;</span><br><span class="line">begin</span><br><span class="line">    v_date1 := to_date(&apos;2009-1-1&apos;,&apos;yyyy-mm-dd&apos;);</span><br><span class="line">    v_date2 := sysdate;</span><br><span class="line">    usp_getTradeInfo (v_CNT1, v_Total1, v_CNT2, v_Total2, v_date1,v_date2,&apos;北京海淀&apos;);--, &apos;北京&apos;;</span><br><span class="line">    dbms_output.put_line(&apos;统计银行卡交易量和交易额&apos;);</span><br><span class="line">    dbms_output.put_line(&apos;&apos;);</span><br><span class="line">    dbms_output.put_line(&apos;起始日期：&apos; || to_char(v_date1,&apos;yyyy-mm-dd&apos;) ||  &apos;  截止日期：&apos; || to_char(v_date2,&apos;yyyy-mm-dd&apos;));</span><br><span class="line">    dbms_output.put_line(&apos;-----------------------------------------------------------&apos;);</span><br><span class="line">    dbms_output.put_line(&apos;存入笔数：&apos; || v_CNT1 || &apos;  存入金额：&apos; ||v_Total1);</span><br><span class="line">    dbms_output.put_line( &apos;支取笔数：&apos; || v_CNT2|| &apos;  支取金额：&apos; ||v_Total2);</span><br><span class="line">    dbms_output.put_line(&apos;-----------------------------------------------------------&apos;);</span><br><span class="line">    dbms_output.put_line(&apos;发生笔数：&apos; || (v_CNT1+v_CNT2)|| &apos;  结余金额：&apos; || (v_Total1-v_Total2));</span><br><span class="line">end;</span><br><span class="line">/*复杂的业务逻辑*/</span><br><span class="line">--转帐的事务存储过程</span><br><span class="line">--  drop proc usp_tradefer</span><br><span class="line">create or replace procedure usp_tradefer (</span><br><span class="line">    v_card1 varchar2,</span><br><span class="line">    v_pwd varchar2,</span><br><span class="line">    v_card2 varchar2,</span><br><span class="line">    v_outmoney number)</span><br><span class="line">AS</span><br><span class="line">   v_date1 date:= sysdate;</span><br><span class="line">   v_date2 date:= sysdate;</span><br><span class="line">   </span><br><span class="line">   emp_20000 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(emp_20000, -20000);</span><br><span class="line">   emp_20001 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(emp_20001, -20001);</span><br><span class="line">BEGIN</span><br><span class="line">    commit;</span><br><span class="line">    dbms_output.put_line(&apos;开始转账，请稍后......&apos;);</span><br><span class="line">    usp_takeMoney(v_card1,v_outmoney ,&apos;支取&apos;,v_pwd);</span><br><span class="line">    usp_takeMoney(v_card2,v_outmoney ,&apos;存入&apos;);</span><br><span class="line">    commit;</span><br><span class="line">    dbms_output.put_line(&apos;转账成功！&apos;);</span><br><span class="line">    v_date2 := sysdate;</span><br><span class="line">    dbms_output.put_line(&apos;打印转出账户对账单&apos;);</span><br><span class="line">    dbms_output.put_line(&apos;-------------------&apos;);</span><br><span class="line">    usp_CheckSheet(v_card1,v_date1,v_date2);</span><br><span class="line">    dbms_output.put_line(&apos;打印转入账户对账单&apos;);</span><br><span class="line">    dbms_output.put_line( &apos;-------------------&apos;);</span><br><span class="line">    usp_CheckSheet(v_card2,v_date1,v_date2);</span><br><span class="line">EXCEPTION</span><br><span class="line">   WHEN emp_20000 THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;交易失败！余额不足！转账失败！&apos;);</span><br><span class="line">      rollback;</span><br><span class="line">   WHEN emp_20001 THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;卡号或密码错误! 转账失败！&apos;);</span><br><span class="line">      rollback;</span><br><span class="line">   WHEN OTHERS THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;出现了其他异常错误,转账失败！&apos;);</span><br><span class="line">      rollback;</span><br><span class="line">END;</span><br><span class="line">--测试上述事务存储过程</span><br><span class="line">--从李四的帐户转帐2000到张三的帐户</span><br><span class="line">--同上一样,现实中的取款机依靠读卡器读出张三/李四的卡号,这里根据张三/李四的名字查出考号来模拟</span><br><span class="line">DECLARE</span><br><span class="line">   emp_20000 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(emp_20000, -20000);</span><br><span class="line">   emp_20001 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(emp_20001, -20001);</span><br><span class="line">   v_card1 char(19);</span><br><span class="line">   v_card2 char(19);</span><br><span class="line">BEGIN</span><br><span class="line">    select cardID into v_card1 </span><br><span class="line">    from cardInfo Inner Join userInfo ON cardInfo.customerID=userInfo.customerID </span><br><span class="line">    where customerName=&apos;李四&apos;;</span><br><span class="line">    select cardID into v_card2 </span><br><span class="line">    from cardInfo Inner Join userInfo ON cardInfo.customerID=userInfo.customerID </span><br><span class="line">    where customerName=&apos;张三&apos;;</span><br><span class="line">    usp_tradefer(v_card1,&apos;123123&apos;,v_card2,2000);</span><br><span class="line">EXCEPTION</span><br><span class="line">   WHEN emp_20000 THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;交易失败！余额不足！转账失败！&apos;);</span><br><span class="line">   WHEN emp_20001 THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;密码错误!转账失败！&apos;);</span><br><span class="line">   WHEN no_data_found THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;用户名不存在!转账失败！&apos;);      </span><br><span class="line">   WHEN OTHERS THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;出现了其他异常错误！&apos;);</span><br><span class="line">END;</span><br><span class="line">select * from vw_userInfo;</span><br><span class="line">select * from vw_cardInfo;</span><br><span class="line">select * from vw_tradeInfo;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SQL银行模拟语句整合&quot;&gt;&lt;a href=&quot;#SQL银行模拟语句整合&quot; class=&quot;headerlink&quot; title=&quot;SQL银行模拟语句整合&quot;&gt;&lt;/a&gt;SQL银行模拟语句整合&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="SQL" scheme="http://yoursite.com/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring Boot基础使用</title>
    <link href="http://yoursite.com/2018/07/13/SpringBoot%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/07/13/SpringBoot基础原理/</id>
    <published>2018-07-12T16:00:00.000Z</published>
    <updated>2018-07-21T08:54:38.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Boot基础使用"><a href="#Spring-Boot基础使用" class="headerlink" title="Spring Boot基础使用"></a>Spring Boot基础使用</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>SpringBoot可以用更少的配置快速构建项目,对杂乱的配置和第三方jar包进行了重新封装</p><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><h4 id="2-1-0XML-约定大于配置"><a href="#2-1-0XML-约定大于配置" class="headerlink" title="2-1.   0XML 约定大于配置"></a>2-1.   0XML 约定大于配置</h4><p>使用properties或者yml来代替</p><p>配置优先级顺序(高到底)</p><ul><li>resources/config/properties</li><li>resources/config/yml</li><li>resources/properties</li><li>resources/yml</li></ul><p><strong>优先使用resources/config中的properties</strong></p><h4 id="2-2-允许多环境配置搭建"><a href="#2-2-允许多环境配置搭建" class="headerlink" title="2-2.允许多环境配置搭建"></a>2-2.允许多环境配置搭建</h4><p>spring.profiles.active=dev或者online</p><ul><li>application-dev.properties</li><li>application-online.properties</li></ul><h3 id="3-核心注解"><a href="#3-核心注解" class="headerlink" title="3.核心注解"></a>3.核心注解</h3><h4 id="3-1-SpringBootApplication"><a href="#3-1-SpringBootApplication" class="headerlink" title="3-1.@SpringBootApplication"></a>3-1.@SpringBootApplication</h4><h4 id="3-2-EnableAutoConfiguration"><a href="#3-2-EnableAutoConfiguration" class="headerlink" title="3-2.@EnableAutoConfiguration"></a>3-2.@EnableAutoConfiguration</h4><h4 id="3-3-EnableTransactionManagement"><a href="#3-3-EnableTransactionManagement" class="headerlink" title="3-3.@EnableTransactionManagement"></a>3-3.@EnableTransactionManagement</h4><h4 id="3-4-SpringBootConfiguration"><a href="#3-4-SpringBootConfiguration" class="headerlink" title="3-4.@SpringBootConfiguration"></a>3-4.@SpringBootConfiguration</h4><h4 id="3-5-MapperScan-“com-test03-dao”"><a href="#3-5-MapperScan-“com-test03-dao”" class="headerlink" title="3-5.@MapperScan(“com.test03.dao”)"></a>3-5.@MapperScan(“com.test03.dao”)</h4><h4 id="3-6-Bean"><a href="#3-6-Bean" class="headerlink" title="3-6.@Bean"></a>3-6.@Bean</h4><h4 id="3-configuration和component的关系"><a href="#3-configuration和component的关系" class="headerlink" title="3-?.configuration和component的关系"></a>3-?.configuration和component的关系</h4><ul><li>component用来生成实例对象</li><li>configuration用来表示配置类</li><li>…</li></ul><h3 id="4-Thymeleaf-丁香叶"><a href="#4-Thymeleaf-丁香叶" class="headerlink" title="4.Thymeleaf 丁香叶"></a>4.Thymeleaf 丁香叶</h3><p>SpringBoot官方不支持使用JSP,官方推荐 <strong>Thymeleaf</strong> 引擎代替JSP</p><p><strong>Thymeleaf支持动静结合</strong></p><h4 id="4-1-语法-th-前缀"><a href="#4-1-语法-th-前缀" class="headerlink" title="4-1. 语法 th: 前缀"></a>4-1. 语法 th: 前缀</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;p th:text=&quot;$&#123;text&#125;&quot;&gt;我是普通文本&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p th:utext=&quot;$&#123;htmlText&#125;&quot;&gt;我是转义文本(标签)&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;a th:href=&quot;@&#123;&#123;ahref&#125;?pa=&#123;text&#125;(ahref=$&#123;ahref&#125;,text=$&#123;text&#125;)&#125;&quot;&gt;我是a标签&lt;/a&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">我是表格&lt;br/&gt;</span><br><span class="line">&lt;table border=&quot;1&quot;&gt;</span><br><span class="line">    &lt;tr th:each=&quot;dept:$&#123;deptList&#125;&quot;&gt;</span><br><span class="line">        &lt;td th:text=&quot;$&#123;dept.id&#125;&quot;&gt;id&lt;/td&gt;</span><br><span class="line">        &lt;td th:text=&quot;$&#123;dept.name&#125;&quot;&gt;name&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我是下拉框</span><br><span class="line">    &lt;select  &gt;</span><br><span class="line">        &lt;option th:each=&quot;dept:$&#123;deptList&#125;&quot; th:value=&quot;$&#123;dept.id&#125;&quot; th:text=&quot;$&#123;dept.name&#125;&quot; th:selected=&quot;$&#123;dept.id&#125;==$&#123;param.id[0]&#125;&quot;&gt;&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;input th:value=&quot;$&#123;text&#125;&quot;&gt; //value值</span><br><span class="line">  </span><br><span class="line">&lt;script th:src=&quot;@&#123;static/test.js&#125;&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div th:if=&quot;$&#123;ahref == &apos;test&apos;&#125;&quot;&gt;条件判断是否显示这段话&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>后台可以使用Model</p><h3 id="5-PageInfo的使用"><a href="#5-PageInfo的使用" class="headerlink" title="5.PageInfo的使用"></a>5.PageInfo的使用</h3><h5 id="传送门https-blog-csdn-net-csdn-huzeliang-article-details-79350425"><a href="#传送门https-blog-csdn-net-csdn-huzeliang-article-details-79350425" class="headerlink" title="传送门https://blog.csdn.net/csdn_huzeliang/article/details/79350425"></a>传送门<a href="https://blog.csdn.net/csdn_huzeliang/article/details/79350425" target="_blank" rel="noopener">https://blog.csdn.net/csdn_huzeliang/article/details/79350425</a></h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-Boot基础使用&quot;&gt;&lt;a href=&quot;#Spring-Boot基础使用&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot基础使用&quot;&gt;&lt;/a&gt;Spring Boot基础使用&lt;/h2&gt;&lt;h3 id=&quot;1-概念&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Spring全家桶" scheme="http://yoursite.com/categories/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>实用工具类集合</title>
    <link href="http://yoursite.com/2018/07/12/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2018/07/12/实用工具类集合/</id>
    <published>2018-07-11T16:00:00.000Z</published>
    <updated>2018-07-29T13:38:13.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实用工具类集合"><a href="#实用工具类集合" class="headerlink" title="实用工具类集合"></a>实用工具类集合</h2><p>[TOC]</p><p><strong>简述</strong></p><p>该工具类集合章会持续更新,具体工具类会集成到我的GitHub仓库中</p><p><strong>传送门</strong></p><p><strong><a href="https://github.com/dony15/mymodes" target="_blank" rel="noopener">https://github.com/dony15/mymodes</a></strong></p><h4 id="1-js-utils-js-前段小集合工具"><a href="#1-js-utils-js-前段小集合工具" class="headerlink" title="1.js-utils.js-前段小集合工具"></a>1.js-utils.js-前段小集合工具</h4><p>常用js的前段封装</p><ol><li><p>XMLHttpRequest 原生ajax的获取 ,内置了Chrome和IE的兼容转换</p></li><li><p>图片上传功能前段,四个id解决 | 图片 | 表单 | 回显 | 的结合</p></li><li><p>验证码显示和输入框校验 两个id 一个url 即可解决 | 校验 | 提示 | 提交url |的结合</p></li><li><p>点击切换验证码 id和url </p></li></ol><h4 id="2-pattern-js-正则工具"><a href="#2-pattern-js-正则工具" class="headerlink" title="2.pattern.js-正则工具"></a>2.pattern.js-正则工具</h4><p>包含开发中各种验证常用的正则封装</p><h4 id="2-CollectionsFactory-集合封装工具"><a href="#2-CollectionsFactory-集合封装工具" class="headerlink" title="2.CollectionsFactory-集合封装工具"></a>2.CollectionsFactory-集合封装工具</h4><p>包含各种集合类型的构建,静态工具类,使代码看起来更加<strong>规范简洁</strong></p><h4 id="3-DownloadUtil-文件下载工具"><a href="#3-DownloadUtil-文件下载工具" class="headerlink" title="3.DownloadUtil-文件下载工具"></a>3.DownloadUtil-文件下载工具</h4><p>文件下载工具类,根据文件名或者文件路径获取文件进行下载(多场景的封装)</p><h4 id="3-FileUtil-文件处理工具"><a href="#3-FileUtil-文件处理工具" class="headerlink" title="3.FileUtil-文件处理工具"></a>3.FileUtil-文件处理工具</h4><p>非常实用的文件处理工具,如获取文件名/去重/清空但不删除文件夹/磁盘遍历/xml生成等等…</p><h4 id="4-FormatStyle-文件容量格式转换工具"><a href="#4-FormatStyle-文件容量格式转换工具" class="headerlink" title="4.FormatStyle-文件容量格式转换工具"></a>4.FormatStyle-文件容量格式转换工具</h4><p>文件容量单位的格式转换,主要解决特殊情况下<strong>因为数字太大导致java直接写无法识别的</strong></p><h4 id="5-IDUtils-ID生成工具"><a href="#5-IDUtils-ID生成工具" class="headerlink" title="5.IDUtils-ID生成工具"></a>5.IDUtils-ID生成工具</h4><p>ID的多种生成策略</p><h4 id="5-JsonUtils-Json转化工具"><a href="#5-JsonUtils-Json转化工具" class="headerlink" title="5.JsonUtils-Json转化工具"></a>5.JsonUtils-Json转化工具</h4><p>使用jackson,多种类型和json的转化封装 <strong>对象 | List</strong></p><h4 id="6-ResourcesUtil-资源读取工具"><a href="#6-ResourcesUtil-资源读取工具" class="headerlink" title="6.ResourcesUtil-资源读取工具"></a>6.ResourcesUtil-资源读取工具</h4><p>资源读取工具类,较为特殊,使用较少(主要是国际语言的匹配读取,现在前段控制即可)</p><h4 id="7-UtilFuns-乱七八糟工具"><a href="#7-UtilFuns-乱七八糟工具" class="headerlink" title="7.UtilFuns-乱七八糟工具"></a>7.UtilFuns-乱七八糟工具</h4><p>该工具类非常的丰富.各种SE的基础转换和时间/固定长度转换/编码解码等都有涉猎</p><h4 id="8-QuartzUtil-时间调度工具"><a href="#8-QuartzUtil-时间调度工具" class="headerlink" title="8.QuartzUtil-时间调度工具"></a>8.QuartzUtil-时间调度工具</h4><p>该工具为时间调度工具类,包含增加工作,修改工作,移除工作,启动所有定时和关闭所有定时</p><h4 id="9-CookieUtils-Cookie设置工具"><a href="#9-CookieUtils-Cookie设置工具" class="headerlink" title="9.CookieUtils-Cookie设置工具"></a>9.CookieUtils-Cookie设置工具</h4><p>Cookie的设置与获取/删除/生命周期等操作集合</p><h4 id="10-ResopnseResult-响应消息工具"><a href="#10-ResopnseResult-响应消息工具" class="headerlink" title="10.ResopnseResult-响应消息工具"></a>10.ResopnseResult-响应消息工具</h4><p>响应消息的一种规范工具类 status(Boolean)/msg(String)/data(Object)</p><h4 id="11-ExcelUtils-Excel报表"><a href="#11-ExcelUtils-Excel报表" class="headerlink" title="11.ExcelUtils-Excel报表"></a>11.ExcelUtils-Excel报表</h4><p>数据库报表工具包,将数据库数据生成Excel表格,<strong>发送到前端</strong>或<strong>保存到本地</strong></p><p>(内置sheet分页功能/数据类型转换)</p><h4 id="12-SmsUtils-短信验证"><a href="#12-SmsUtils-短信验证" class="headerlink" title="12.SmsUtils-短信验证"></a>12.SmsUtils-短信验证</h4><p>短信API产品的DEMO程序,执行main函数即可体验短信产品API功能</p><p>(只需要将AK替换成开通了云通信-短信产品功能的AK即可)(<strong>国际短信发送请勿参照此DEMO</strong>)</p><h4 id="13-generatorSqlmapCustom-逆向工程-贼稳当版"><a href="#13-generatorSqlmapCustom-逆向工程-贼稳当版" class="headerlink" title="13.generatorSqlmapCustom-逆向工程(贼稳当版)"></a>13.generatorSqlmapCustom-逆向工程(贼稳当版)</h4><p><strong>ssm逆向工程工具包</strong></p><ol><li>自动生成mybatis持久层数据以及pojo对象</li><li>自动搭建持久层和pojo等<strong>关系映射</strong></li><li>生成几乎所有<strong>增删改</strong>和<strong>单表查功能</strong></li></ol><h4 id="14-wxpay工具类-微信支付"><a href="#14-wxpay工具类-微信支付" class="headerlink" title="14.wxpay工具类-微信支付"></a>14.wxpay工具类-微信支付</h4><h4 id="15-EncodeInterceptor-编码拦截工具"><a href="#15-EncodeInterceptor-编码拦截工具" class="headerlink" title="15.EncodeInterceptor-编码拦截工具"></a>15.EncodeInterceptor-编码拦截工具</h4><h4 id="16-策略模式redis工具类"><a href="#16-策略模式redis工具类" class="headerlink" title="16.策略模式redis工具类"></a>16.策略模式redis工具类</h4><p>​    接口+单机/集群+基础配置</p><h4 id="17-MessageDigestUtils-md5-sha-1-加密工具"><a href="#17-MessageDigestUtils-md5-sha-1-加密工具" class="headerlink" title="17.MessageDigestUtils -md5/sha-1-加密工具"></a>17.MessageDigestUtils -md5/sha-1-加密工具</h4><h4 id="18-FileUpLoadUtils-文件上传"><a href="#18-FileUpLoadUtils-文件上传" class="headerlink" title="18.FileUpLoadUtils-文件上传"></a>18.FileUpLoadUtils-文件上传</h4><p>较原生的上传,本地可选水印版(很少用),可以修改为FastDFS使用</p><h4 id="19-HttpClientUtil"><a href="#19-HttpClientUtil" class="headerlink" title="19.HttpClientUtil"></a>19.HttpClientUtil</h4><p>Http请求url的工具类,需要导入jar包 httpclient | jsoup(该jar爬虫时导入即可)</p><h4 id="20-java爬虫"><a href="#20-java爬虫" class="headerlink" title="20.java爬虫"></a>20.java爬虫</h4><p>基础爬虫封装(豆瓣部分示例)</p><h4 id="其他中文命名工具类不再解释-简单明了"><a href="#其他中文命名工具类不再解释-简单明了" class="headerlink" title="其他中文命名工具类不再解释(简单明了)"></a>其他中文命名工具类不再解释(简单明了)</h4><hr><h2 id="狗厂-amp-飞机厂工具库推荐"><a href="#狗厂-amp-飞机厂工具库推荐" class="headerlink" title="狗厂&amp;飞机厂工具库推荐"></a>狗厂&amp;飞机厂工具库推荐</h2><h5 id="1-Google-Guava"><a href="#1-Google-Guava" class="headerlink" title="1.Google Guava"></a>1.Google Guava</h5><p><strong>官方教程（汉译）传送门：</strong><a href="https://blog.csdn.net/axi295309066/article/details/70856889" target="_blank" rel="noopener">https://blog.csdn.net/axi295309066/article/details/70856889</a></p><p><strong>中文指南传送门：</strong><a href="https://blog.csdn.net/qq_35246620/article/details/77970421" target="_blank" rel="noopener">https://blog.csdn.net/qq_35246620/article/details/77970421</a></p><h5 id="2-apache-commons"><a href="#2-apache-commons" class="headerlink" title="2.apache commons"></a>2.apache commons</h5><p><strong>官网</strong>：<a href="http://commons.apache.org/" target="_blank" rel="noopener">http://commons.apache.org/</a></p><p><strong>中文指南传送门：</strong><a href="http://www.mamicode.com/info-detail-1828364.html" target="_blank" rel="noopener">http://www.mamicode.com/info-detail-1828364.html</a></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实用工具类集合&quot;&gt;&lt;a href=&quot;#实用工具类集合&quot; class=&quot;headerlink&quot; title=&quot;实用工具类集合&quot;&gt;&lt;/a&gt;实用工具类集合&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该工具类集合章会持续
      
    
    </summary>
    
      <category term="工具类" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Zookeeper与Dubbo基础原理</title>
    <link href="http://yoursite.com/2018/07/08/Zookeeper%E4%B8%8EDubbo%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/07/08/Zookeeper与Dubbo基础原理/</id>
    <published>2018-07-07T16:00:00.000Z</published>
    <updated>2018-07-26T15:00:04.103Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Zookeeper与Dubbo基础原理"><a href="#Zookeeper与Dubbo基础原理" class="headerlink" title="Zookeeper与Dubbo基础原理"></a>Zookeeper与Dubbo基础原理</h3><p>[TOC]</p><h4 id="1-Zookeeper-RPC框架"><a href="#1-Zookeeper-RPC框架" class="headerlink" title="1.Zookeeper(RPC框架)"></a>1.Zookeeper(RPC框架)</h4><p><strong>高效的分布式分布式应用协调服务,提供注册和负载均衡等–&gt;服务中心</strong></p><p><strong>Zookeeper也是集群管理工具,用来管理各种需要的集群,如solorCloud</strong></p><ul><li>zookeeper让调用者知道调用的哪台服务器地址,也是集群的管理者</li><li>Zookeeper具有心跳检测机制,当服务器挂掉时可以让调用者知道,从而切换请求服务器</li><li>Zookeeper具有高并发的横向扩展,在不改变代码的情况下对设备进行扩展</li></ul><p><strong>1.命名服务   2.配置管理   3.集群管理   4.分布式锁  5.队列管理</strong> </p><p>命名服务:在zookeeper的文件系统里创建一个目录，即有唯一的path。在我们使用tborg无法确定上游程序的部署机器时即可与下游程序约定好path，通过path即能互相探索发现。 </p><p>配置管理:程序分散部署在多台机器上难以管理,可以将每台设备的信息存储在Zookeeper的目录节点中,然后相关程序对该目录进行监控,如果配置信息发生变化,则Zookeeper会发布新的配置</p><p>集群管理:(1)设备的加入(2)选举master(可以改变设备编号,编号第一位自动master(一种思路))</p><p>分布式锁:zookeeper是一致性的文件系统,锁服务可以分为两类，(1)保持独占，(2)控制时序。  </p><p>列队管理:</p><ol><li>同步队列，当一个队列的成员都聚齐时，这个队列才可用，否则一直等待所有成员到达。在约定目录下创建临时目录节点，监听节点数目是否是我们要求的数目。  </li><li>队列按照 FIFO 方式进行入队和出队操作。和分布式锁服务中的控制时序场景基本原理一致，入列有编号，出列按编号。   </li></ol><h5 id="1-1-特性"><a href="#1-1-特性" class="headerlink" title="1-1.特性"></a>1-1.特性</h5><ol><li>最终一致性：client不论连接到哪个Server，展示给它都是同一个视图，这是zookeeper<strong>最重要的性能</strong>。 </li><li>可靠性：具有简单、健壮、良好的性能，如果消息被到一台服务器接受，那么它将被所有的服务器接受。 </li><li>实时性：Zookeeper保证客户端将在一个时间间隔范围内获得服务器的更新信息，或者服务器失效的信息。但由于网络延时等原因，Zookeeper不能保证两个客户端能同时得到刚更新的数据，如果需要最新数据，应该在读数据之前调用sync()接口。  </li><li>等待无关（wait-free）：慢的或者失效的client不得干预快速的client的请求，使得每个client都能有效的等待。  </li><li>原子性：更新只能成功或者失败，没有中间状态。  </li><li>顺序性：包括全局有序和偏序两种：全局有序是指如果在一台服务器上消息a在消息b前发布，则在所有Server上消息a都将在消息b前被发布；偏序是指如果一个消息b在消息a后被同一个发送者发布，a必将排在b前面。  </li></ol><h5 id="1-2-Zookeeper工作原理"><a href="#1-2-Zookeeper工作原理" class="headerlink" title="1-2.Zookeeper工作原理"></a>1-2.Zookeeper工作原理</h5><p>​    Zookeeper 的核心是<strong>原子广播</strong>，这个机制保证了各个Server之间的同步。实现这个机制的协议叫做<strong>Zab协议</strong>。Zab协议有两种模式，它们分别是<strong>恢复模式</strong>（选主）和<strong>广播模式</strong>（同步）。当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，当领导者被选举出来，且大多数Server完成了和 leader的状态同步以后，恢复模式就结束了。状态同步保证了leader和Server具有相同的系统状态 </p><p>​    为了保证事务的<strong>顺序一致性</strong>，zookeeper采用了递增的事务id号（zxid）来标识事务。所有的提议（proposal）都在被提出的时候加上了zxid。实现中zxid是一个64位的数字，它高32位是epoch用来标识leader关系是否改变，每次一个leader被选出来，它都会有一个新的epoch，标识当前属于那个leader的统治时期。低32位用于递增计数。 </p><p><strong>(部分整理)</strong></p><p><strong>原文:<a href="https://blog.csdn.net/xqb_756148978/article/details/52259381" target="_blank" rel="noopener">https://blog.csdn.net/xqb_756148978/article/details/52259381</a></strong></p><h4 id="2-Dubbo-SOA基础框架"><a href="#2-Dubbo-SOA基础框架" class="headerlink" title="2.Dubbo(SOA基础框架)"></a>2.Dubbo(SOA基础框架)</h4><p><strong>管理中间层的框架,与注册中心搭配使用,如Zookeeper(最常用),使之具有Zookeeper负载均衡/资源同步等的特性</strong></p><p>​      <strong>单一应用架构</strong>(ORM)</p><p> –&gt;<strong>垂直应用架构</strong>(MVC) 传统架构,难以应对高并发/高可用问题</p><p>–&gt;<strong>分布式服务架构</strong>(RPC) 功能拆分,多台服务器做不同的功能,相当于节点,一个节点下可以有多态服务器做集群</p><p>–&gt;<strong>流动计算架构</strong>(SOA) 节点和节点通过SOA通信,将冗余的业务逻辑单独提取出来,分为表现层和业务层 缓存 数据库层…</p><h5 id="2-1-核心部分"><a href="#2-1-核心部分" class="headerlink" title="2-1.核心部分"></a>2-1.核心部分</h5><ol><li>远程通讯 </li><li>集群容错 </li><li>自动发现 </li></ol><h5 id="2-2-作用"><a href="#2-2-作用" class="headerlink" title="2-2.作用"></a>2-2.作用</h5><ol><li><strong>透明化的远程方法调用</strong>，就像调用本地方法一样调用远程方法，只需简单配置，没有任何API侵入   </li><li><strong>软负载均衡及容错机制</strong>，可在内网替代F5等硬件负载均衡器，降低成本，减少单点.</li><li><strong>服务自动注册与发现</strong>，不再需要写死服务提供方地址，注册中心基于接口名查询服务提供者的IP地址，并且能够平滑添加或删除服务提供者。</li></ol><p>Dubbo采用全spring配置方式,透明化接入,应用,没有API入侵</p><h5 id="2-3-架构"><a href="#2-3-架构" class="headerlink" title="2-3.架构"></a>2-3.架构</h5><p><img src="https://i.imgur.com/zNpr0bk.jpg" alt=""></p><pre><code>Provider: 暴露服务的服务提供方。</code></pre><p>​       Consumer: 调用远程服务的服务消费方。</p><p>​       Registry: 服务注册与发现的注册中心。</p><p>​       Monitor: 统计服务的调用次调和调用时间的监控中心.</p><p>​    Container: 服务运行器。</p><h5 id="2-4-调用关系说明："><a href="#2-4-调用关系说明：" class="headerlink" title="2-4.调用关系说明："></a>2-4.调用关系说明：</h5><ol start="0"><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ol><h5 id="2-5-注意Dubbo内部版本冲突"><a href="#2-5-注意Dubbo内部版本冲突" class="headerlink" title="2-5.注意Dubbo内部版本冲突"></a>2-5.注意Dubbo内部版本冲突</h5><p>dubbo的jar包中存在spring 2.+版本以及netty过时版本,需要屏蔽使用,防止冲突</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;exclusions&gt;</span><br><span class="line">            &lt;exclusion&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring&lt;/artifactId&gt;</span><br><span class="line">            &lt;/exclusion&gt;</span><br><span class="line">            &lt;exclusion&gt;</span><br><span class="line">                &lt;groupId&gt;org.jboss.netty&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;netty&lt;/artifactId&gt;</span><br><span class="line">            &lt;/exclusion&gt;</span><br><span class="line">        &lt;/exclusions&gt;</span><br></pre></td></tr></table></figure><h5 id="2-6注意Dubbo发布过程"><a href="#2-6注意Dubbo发布过程" class="headerlink" title="2.6注意Dubbo发布过程"></a>2.6注意Dubbo发布过程</h5><ol><li>初始化Spring容器</li><li>占用暴露服务的端口进行发布,此时本机的端口不可以冲突</li></ol><p><strong>收藏Dubbo架构详解<a href="http://shiyanjun.cn/archives/325.html" target="_blank" rel="noopener">http://shiyanjun.cn/archives/325.html</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Zookeeper与Dubbo基础原理&quot;&gt;&lt;a href=&quot;#Zookeeper与Dubbo基础原理&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper与Dubbo基础原理&quot;&gt;&lt;/a&gt;Zookeeper与Dubbo基础原理&lt;/h3&gt;&lt;p&gt;[T
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>工具类集合分析--接口</title>
    <link href="http://yoursite.com/2018/07/08/%E5%B7%A5%E5%85%B7%E7%B1%BB%E9%9B%86%E5%90%88%E5%88%86%E6%9E%90--%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2018/07/08/工具类集合分析--接口/</id>
    <published>2018-07-07T16:00:00.000Z</published>
    <updated>2018-07-12T06:15:22.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="工具类集合分析–接口"><a href="#工具类集合分析–接口" class="headerlink" title="工具类集合分析–接口"></a>工具类集合分析–接口</h3><p>[TOC]</p><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><p>使用接口作为工具类,一般分两种情况</p><p>​    (1)定义常量</p><p>​    (2)定义动态工具类</p><h4 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h4><h5 id="1-定义常量"><a href="#1-定义常量" class="headerlink" title="1.定义常量"></a>1.定义常量</h5><p>可以在工具类中快捷明了的定义常量来使用,因为接口中默认属性便是常量,如:</p><p>​    int HOTEL_STATUS_INVALID=0;//酒店失效</p><p>​    int HOTEL_STATUS_VALID=1;//酒店有效</p><p>当controller中往前端传递数据时,需要判断状态,而状态从controller中多次定义会导致观察不变,不利于交接和后期维护,此时便可以将状态抽出来存进接口工具类中,提高代码的<strong>可读性</strong>和<strong>开发效率</strong> (RestFull开发风格中,提高代码可读性尤为突出)</p><h5 id="2-定义动态工具类"><a href="#2-定义动态工具类" class="headerlink" title="2.定义动态工具类"></a>2.定义动态工具类</h5><p>当程序运行在不同的环境中时,因为程序对环境的耦合性,频繁的修改代码会大大降低开发效率,可以使用工具类接口的方式,将耦合性降低,如<strong>动态工具类</strong></p><p><strong>场景</strong></p><p>​    redis 单机版和集群版    (可以根据需要选择具体的方案,减少代码的修改量)</p><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;工具类集合分析–接口&quot;&gt;&lt;a href=&quot;#工具类集合分析–接口&quot; class=&quot;headerlink&quot; title=&quot;工具类集合分析–接口&quot;&gt;&lt;/a&gt;工具类集合分析–接口&lt;/h3&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h4 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述
      
    
    </summary>
    
      <category term="工具类" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Solr基础原理</title>
    <link href="http://yoursite.com/2018/07/06/Solr%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/07/06/Solr基础原理/</id>
    <published>2018-07-05T16:00:00.000Z</published>
    <updated>2018-07-26T15:46:01.516Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Solr基础原理"><a href="#Solr基础原理" class="headerlink" title="Solr基础原理"></a>Solr基础原理</h3><p>[TOC]</p><h4 id="1-目录核心组成"><a href="#1-目录核心组成" class="headerlink" title="1.目录核心组成"></a>1.目录核心组成</h4><p><strong>1.core</strong></p><p>​    solr的索引库,可以理解为数据库,需要手动创建(文件夹),core可以根据需要建立多个索引库,索引库的内容可以在后台看到也可以在core中看到</p><p><strong>2.solrhome</strong></p><p>​    solr的配置目录,solr服务器所有的配置文件存放的目录(<strong>core创建在solrhome中</strong>)</p><h5 id="3-collection一个完整的索引库-逻辑结构"><a href="#3-collection一个完整的索引库-逻辑结构" class="headerlink" title="3.collection一个完整的索引库,逻辑结构"></a><strong>3.collection</strong>一个完整的索引库,<strong>逻辑结构</strong></h5><p><strong>1.高并发,高可用</strong></p><ul><li>solr的逻辑索引(逻辑意义上的完整索引),由多个<strong>shard片</strong>的组成<strong>负载均衡</strong></li><li>每个shard可以分成多份Core,<strong>每份相同,主(leadereplica)从(replica)同步,高可用</strong></li><li>collection本质是可以跨越多个核的索引,包含冗余的索引.</li></ul><p><strong>2.海量存储</strong></p><ul><li>当存储空间不够时,只需要<strong>横向扩充shard片</strong>就可以</li></ul><h5 id="4-SolrCloud-物理结构"><a href="#4-SolrCloud-物理结构" class="headerlink" title="4.SolrCloud,物理结构"></a>4.SolrCloud,物理结构</h5><p>一个SolrCloud集群,包含多个Solr服务器,每个Solr服务器包含多个Core(索引库)</p><p><img src="https://i.imgur.com/53JsCkq.png" alt=""></p><p><strong>参考<a href="https://blog.csdn.net/zhousenshan/article/details/51799567" target="_blank" rel="noopener">https://blog.csdn.net/zhousenshan/article/details/51799567</a></strong></p><h4 id="2-配置详解"><a href="#2-配置详解" class="headerlink" title="2.配置详解"></a>2.配置详解</h4><h5 id="1-配置中文分词"><a href="#1-配置中文分词" class="headerlink" title="1.配置中文分词"></a>1.配置中文分词</h5><ol><li><fieldtype name="text_ik" class="solr.TextField">   <!-- text_ik 中文分词包的引用名 --></fieldtype></li><li><analyzer class="org.wltea.analyzer.lucene.IKAnalyzer">  <!-- 中文分词包 --></analyzer></li><li></li><li><!-- 字段title 使用中文分词 stored="true"下载并索引 --></li><li><field name="item_title" type="text_ik" indexed="true" stored="true"> </field></li><li><!-- 字段price 使用long类型 --></li><li><field name="item_price" type="long" indexed="true" stored="true"></field></li><li><!-- city_id 使用long类型 --></li><li><field name="item_city_id" type="long" indexed="true" stored="true"> </field></li><li><!-- city_name 因为城市名固定,所以不需要分词,String即可 --></li><li><field name="item_city_name" type="string" indexed="true" stored="true"></field></li><li><!-- image 图片地址,String类型 --></li><li><field name="item_image" type="string" indexed="true" stored="true"></field></li><li><!-- content 中文分词 stored="false"(不下载,但可以索引) --></li><li><field name="item_content" type="text_ik" indexed="true" stored="false"></field></li><li><!-- item_keywords 自定义查询名(关键字);可以根据title||city_name||content来查询 --></li><li><field name="item_keywords" type="text_ik" indexed="true" stored="false" multivalued="true"></field></li><li><copyfield source="item_title" dest="item_keywords"></copyfield></li><li><copyfield source="item_city_name" dest="item_keywords"></copyfield></li><li><copyfield source="item_content" dest="item_keywords"></copyfield></li></ol><ol><li><!-- 默认使用item_keywords(Solr后台分词查询中显示自定义的字段) --></li><li><requesthandler name="/select" class="solr.SearchHandler"></requesthandler></li><li>​    &lt;!– default values for query parameters can be specified, these</li><li>​         will be overridden by parameters in the request</li><li>​      –&gt;</li><li>​     <lst name="defaults"></lst></li><li>​       <str name="echoParams">explicit</str></li><li>​       <str name="df">item_keywords</str></li><li>​        <int name="rows">10</int></li></ol><ol><li><!-- 默认使用item_keywords(开启查询) --></li><li><requesthandler name="/query" class="solr.SearchHandler"></requesthandler></li><li>​     <lst name="defaults"></lst></li><li>​       <str name="echoParams">explicit</str></li><li>​       <str name="wt">json</str></li><li>​       <str name="indent">true</str></li><li>​       <str name="df">item_keywords</str></li><li>​     </li><li></li></ol><h5 id="2-配置Solr-Dataimport"><a href="#2-配置Solr-Dataimport" class="headerlink" title="2.配置Solr Dataimport"></a>2.配置Solr Dataimport</h5><ol><li><!-- dataimport 开启Solr连接数据库功能 --></li><li><requesthandler name="/dataimport" class="org.apache.solr.handler.dataimport.DataImportHandler"> </requesthandler></li><li>​    <lst name="defaults">      </lst></li><li><!-- dataimport读取data-config.xml设定的JDBC配置文件 -->   </li><li>​         <str name="config">data-config.xml</str> </li><li>​              </li><li>  </li></ol><ol><li><dataconfig>       </dataconfig></li><li><!-- JDBC配置 --></li><li>​    <datasource type="JdbcDataSource" driver="com.mysql.jdbc.Driver" url="jdbc:mysql://localhost:3306/travel_db?characterEncoding=utf-8" user="root" password="root" batchsize="-1">   </datasource></li><li>​    <document>   </document></li><li><!-- 查询语句(全表查询)字段,并匹配分词中设定的name -->  </li><li>​        <entity name="hotel" query="select ID,TITLE,PRICE,IMAGE,CITY_NAME, CITY_ID from HOTEL" datasource="JdbcDataSource">        </entity></li><li>​            <field column="ID" name="id"> </field></li><li>​            <field column="TITLE" name="item_title"> </field></li><li>​                            <field column="PRICE" name="item_price"> </field></li><li>​                            <field column="CONTENT" name="item_content"></field></li><li><field column="IMAGE" name="item_image"></field></li><li>​                            <field column="CITY_NAME" name="item_city_name"></field></li><li><field column="CITY_ID" name="item_city_id"></field></li><li>​                </li><li>​            </li><li>  </li></ol><h5 id="3-Solr后台的使用"><a href="#3-Solr后台的使用" class="headerlink" title="3.Solr后台的使用"></a>3.Solr后台的使用</h5><p>第一次先Dataimport–&gt;Execute导入,然后Refresh刷新状态即可</p><p><strong>Query:查询功能</strong> </p><p>​    q  <em> ; </em>    –&gt;第一个 <em> 表示字段; 第二个 </em> 表示字段的内容;  </p><p>​    如    item_keywords:北京   分词中有”北京”关键字的内容</p><p>​        item_price:[* TO 200]  价格是200以内的内容</p><p>​        item_price:[100 TO 700]  价格是100-200的内容</p><h4 id="3-java中的作用"><a href="#3-java中的作用" class="headerlink" title="3.java中的作用"></a>3.java中的作用</h4><p>建立一个新的索引模块 index,接口层和实现发布层</p><p>写Solr<strong>更新</strong>和<strong>搜索</strong>两个方法dubbo发布即可在controller中使用</p><p>(一般与MQ一起使用,如activeMQ,见<strong>activeMQ基础与运用章节</strong>)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Solr基础原理&quot;&gt;&lt;a href=&quot;#Solr基础原理&quot; class=&quot;headerlink&quot; title=&quot;Solr基础原理&quot;&gt;&lt;/a&gt;Solr基础原理&lt;/h3&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h4 id=&quot;1-目录核心组成&quot;&gt;&lt;a href=&quot;#1-目录核心组成
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/03/hello-world/"/>
    <id>http://yoursite.com/2018/07/03/hello-world/</id>
    <published>2018-07-03T15:51:12.163Z</published>
    <updated>2018-07-05T12:34:12.004Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Shiro基础原理</title>
    <link href="http://yoursite.com/2018/06/04/Shiro%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/06/04/Shiro基础原理/</id>
    <published>2018-06-03T16:00:00.000Z</published>
    <updated>2018-07-29T13:36:07.668Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Shiro基础原理"><a href="#Shiro基础原理" class="headerlink" title="Shiro基础原理"></a>Shiro基础原理</h2><p>[TOC]</p><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p><strong>shiro是apache的一个开源框架，实现 |认证|授权|为核心的一系列权限管理框架.</strong></p><ul><li>Web 应用程序一般做法通过表单提交用户名及密码达到认证目的。 </li><li>“授权”即是否允许已认证用户访问受保护资源。 </li></ul><h3 id="2-对比"><a href="#2-对比" class="headerlink" title="2.对比"></a>2.对比</h3><p><strong>Shiro与Spring Security</strong></p><ol><li>简单性:shiro更加简单,更容易理解</li><li>灵活性:shiro可以使用在 |Web|EJB|IoC| 等大部分的应用环境,而Spring Security必须和Spring一起集成使用</li><li>拔插性:shiro干净的API(工具类集合)和设计模式(单例+工厂)使它可以方便的和许多其他框架整合,Spring Security则只能与Spring一起集成</li></ol><h3 id="3-组成"><a href="#3-组成" class="headerlink" title="3.组成"></a>3.组成</h3><p><img src="file:///C:/Users/Administrator/Documents/My%20Knowledge/temp/1b7bc2c3-9f2c-4ea2-8ed7-97820c205482/128/index_files/871676-20160722213407794-1894786938.png" alt="img"></p><h4 id="1-三个核心组件"><a href="#1-三个核心组件" class="headerlink" title="1.三个核心组件"></a>1.三个核心组件</h4><ol><li>Subject: 令牌与项目的登录关系,Shiro保证了项目整体的安全性,是<strong>Shiro对外API的核心</strong></li><li>Security Manager:负责安全认证预授权等  <strong>Shiro的核心</strong> </li><li>Realm:整个框架中<strong>必须</strong>由设计者自行实现的模块之一.并且Shiro支持多个<strong>Realm数据源</strong>,最为重要的一种实现方式—&gt;数据库查询,当需要多个数据库组合验证时,多个数据源的效果就体现出来</li></ol><hr><h4 id="2-主要功能"><a href="#2-主要功能" class="headerlink" title="2.主要功能"></a>2.主要功能</h4><ol><li>Authentication:    身份认证</li><li>Authorization:  授权,权限验证</li><li>Session Manager: 会话管理</li><li>Cryptography:加密</li><li>Web Support: web支持</li><li>Caching:缓存</li><li>Concurrency:多线程验证</li><li>Testing:提供测试支持</li><li>Run As:允许一个用户假装另一个用户访问</li><li>Remember Me: 记住我</li></ol><h4 id="3-组件和内容流程分析"><a href="#3-组件和内容流程分析" class="headerlink" title="3.组件和内容流程分析"></a>3.组件和内容流程分析</h4><h5 id="1-subject"><a href="#1-subject" class="headerlink" title="1.subject"></a>1.subject</h5><p>外部API核心,存储用户数据和返回数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Subject currentUser = SecurityUtils.getSubject();</span><br></pre></td></tr></table></figure><p><strong>获得Subject的方法,有了Subject才能和Shiro做深入的交互</strong></p><h5 id="2-SessionManager"><a href="#2-SessionManager" class="headerlink" title="2.SessionManager"></a>2.SessionManager</h5><ol><li><p>Shiro的Session提供了HttpSession常规的大部分功能,但是又有区别,即:Session不依赖于<strong>HTTP环境</strong>,可以在程序任何地方使用</p></li><li><p>Shiro的Session可以在任何的环境下使用<strong>相同的API</strong>,而且是<strong>自动启动SessionManager</strong></p></li></ol><p>如果希望在*<em>当前与应用程序会话期间</em>,为用户提供内容,则可以设置Session</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Session session = currentUser.getSession();</span><br><span class="line">session.setAttribute( &quot;someKey&quot;, &quot;aValue&quot; );</span><br></pre></td></tr></table></figure><h5 id="3-登录认证Authentication"><a href="#3-登录认证Authentication" class="headerlink" title="3.登录认证Authentication"></a>3.登录认证Authentication</h5><p>Shiro的认证功能,会根据Subject的信息进行判断,如果认证过,则直接进入/如果没认证,则需要先认证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if ( !currentUser.isAuthenticated() ) &#123;</span><br><span class="line">    //collect user principals and credentials in a gui specific manner</span><br><span class="line">    //such as username/password html form, X509 certificate, OpenID, etc.</span><br><span class="line">    //We&apos;ll use the username/password example here since it is the most common.</span><br><span class="line">    //(do you know what movie this is from? ;)</span><br><span class="line">    UsernamePasswordToken token = new UsernamePasswordToken(&quot;lonestarr&quot;, &quot;vespa&quot;);</span><br><span class="line">    //this is all you have to do to support &apos;remember me&apos; (no config - built in!):</span><br><span class="line">    token.setRememberMe(true);</span><br><span class="line">    currentUser.login(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UsernamePasswordToken</strong>(username/password)</p><p>以特定的方式收集用户的<strong>主体</strong>和<strong>凭证</strong></p><p><strong>Remember Me</strong>  no config - built in!(true/false)</p><p>Shiro内置功能,记住用户(详情待更新)</p><p><strong>登录尝试失败的反馈–异常</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    currentUser.login( token );</span><br><span class="line">    //if no exception, that&apos;s it, we&apos;re done!</span><br><span class="line">&#125; catch ( UnknownAccountException uae ) &#123;</span><br><span class="line">    //username wasn&apos;t in the system, show them an error message?</span><br><span class="line">&#125; catch ( IncorrectCredentialsException ice ) &#123;</span><br><span class="line">    //password didn&apos;t match, try again?</span><br><span class="line">&#125; catch ( LockedAccountException lae ) &#123;</span><br><span class="line">    //account for that username is locked - can&apos;t login.  Show them a message?</span><br><span class="line">&#125;</span><br><span class="line">    ... more types exceptions to check if you want ...</span><br><span class="line">&#125; catch ( AuthenticationException ae ) &#123;</span><br><span class="line">    //unexpected condition - error?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Shiro中使用多种异常完善认证</strong></p><ul><li>将Subject的.login(token)进行捕获,从而的到许多种异常提醒,根据相应的异常判断用户登录的错误信息</li><li>注意:Shiro有丰富的认证异常设定并支持自定义异常,在Realm中通过判断条件,抛出异常的方式,可以在Controller中接收需要的异常数据来完善程序的开发</li></ul><hr><p><img src="file:///C:/Users/Administrator/Documents/My%20Knowledge/temp/b9f81ac7-ad34-4adc-b4c2-cb2f73a4f2dd/128/index_files/48cae49c-8924-4a4e-8efd-bdbf38f07c97.jpg" alt="img">    </p><ol><li><strong>注意:Shiro不会自己维护用户|权限;</strong></li><li><strong>需要开发者去 设计|提供 ;</strong></li><li><strong>然后通过接口注入给Shiro即可</strong></li></ol><h3 id="4-源码"><a href="#4-源码" class="headerlink" title="4.源码"></a>4.源码</h3><h4 id="Token认证"><a href="#Token认证" class="headerlink" title="Token认证"></a>Token认证</h4><p><strong>JdbcRealm</strong></p><p>Shiro –&gt;JdbcRealm封装的固定sql</p><p> [1.封装根据用户名查询密码的SQL语句]</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The default query used to retrieve account data for the user.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_AUTHENTICATION_QUERY = <span class="string">"select password from users where username = ?"</span>;</span><br></pre></td></tr></table></figure><pre><code>[2.盐加密&amp;&amp;authenticationQuery验证查询(判断)] </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the salt style.  See &#123;<span class="doctag">@link</span> #saltStyle&#125;.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> saltStyle new SaltStyle to set.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSaltStyle</span><span class="params">(SaltStyle saltStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.saltStyle = saltStyle;</span><br><span class="line">        <span class="keyword">if</span> (saltStyle == SaltStyle.COLUMN &amp;&amp; authenticationQuery.equals(DEFAULT_AUTHENTICATION_QUERY)) &#123;</span><br><span class="line">            authenticationQuery = DEFAULT_SALTED_AUTHENTICATION_QUERY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>  [3.发现源代码中使用预编译的原生JDBC,并根据索引查找对比,所以要求自定义语句时不能乱写,根据规则走] </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement ps = null;</span><br><span class="line">        ResultSet rs = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            ps = conn.prepareStatement(authenticationQuery);</span><br><span class="line">            ps.setString(1, username);</span><br><span class="line"></span><br><span class="line">            // Execute query</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line">            // Loop over results - although we are only expecting one result, since usernames should be unique</span><br><span class="line">            boolean foundResult = false;</span><br><span class="line">            while (rs.next()) &#123;</span><br><span class="line"></span><br><span class="line">                // Check to ensure only one row is processed</span><br><span class="line">                if (foundResult) &#123;</span><br><span class="line">                    throw new AuthenticationException(&quot;More than one user row found for user [&quot; + username + &quot;]. Usernames must be unique.&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                result[0] = rs.getString(1);     //索引查询</span><br><span class="line">                if (returningSeparatedSalt) &#123;</span><br><span class="line">                    result[1] = rs.getString(2);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                foundResult = true;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p><strong>new SimpleAuthenticationInfo()(存放唯一认证) 源码分析</strong></p><p>principal: 整个Shiro中唯一的标识符,可以存用户名,也可以存ID</p><p>credentials: 唯一标识符的密码</p><p>realmName: 当前数据源的名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleAuthenticationInfo</span><span class="params">(Object principal, Object credentials, String realmName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.principals = <span class="keyword">new</span> SimplePrincipalCollection(principal, realmName);</span><br><span class="line">        <span class="keyword">this</span>.credentials = credentials;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\Desktop\20180122131153906.png" alt="20180122131153906"></p><p>使用了工厂模式来对SecurityManager进行生成和配置  </p><p>生成过程是使用<strong>单例+工厂</strong> </p><p>提供对外的<strong>工具类</strong>来使用，包含获取SecurityManager的方法和获取Subject的方法  </p><p><img src="C:\Users\Administrator\Desktop\3.png" alt="3"></p><p>(代码略)</p><p>subject的使用是通过传入AuthenticationToken接口（注意是接口，其实扩展接口rememnverMeaut…和HostAutho…），</p><p>该接口目前的实现类是UserPasswordToken，当然也可以自己扩展实现自定义的认证Token </p><h4 id="测试加密算法"><a href="#测试加密算法" class="headerlink" title="测试加密算法"></a>测试加密算法</h4><p><strong>盐值加密如果几个人密码一样，那么加密后的密码则一致。这样不安全，要解决这个问题，可以在密码上加盐。一般会选择不重复的值作为盐值，例如 用户名。</strong>(部分代码)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造方法：</span></span><br><span class="line">        <span class="comment">//第一个参数：散列算法</span></span><br><span class="line">        <span class="comment">//第二个参数：明文，原始密码</span></span><br><span class="line">        <span class="comment">//第三个参数：盐，通过使用随机数</span></span><br><span class="line">        <span class="comment">//第四个参数：散列的次数，比如散列两次，相当 于md5(md5(''))</span></span><br><span class="line">        SimpleHash simpleHash = <span class="keyword">new</span> SimpleHash(<span class="string">"md5"</span>, source, salt, hashIterations);</span><br><span class="line">        String md5 =  simpleHash.toString();</span><br><span class="line">        System.out.println(md5);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">shiro-realm-md5.ini</span><br><span class="line">---------------------</span><br><span class="line">[main]</span><br><span class="line">定义凭证匹配器</span><br><span class="line">credentialsMatcher=org.apache.shiro.authc.credential.HashedCredentialsMatcher</span><br><span class="line">散列算法</span><br><span class="line">credentialsMatcher.hashAlgorithmName=md5</span><br><span class="line">散列次数</span><br><span class="line">credentialsMatcher.hashIterations=<span class="number">1024</span></span><br><span class="line">开启加盐（无需设置，realm中使用的SimpleAuthenticationInfo 是 SaltedAuthenticationInfo 接口的实现类，默认开启的加盐功能）</span><br><span class="line">credentialsMatcher.hashSalted=<span class="keyword">true</span></span><br><span class="line">自定义 realm</span><br><span class="line">customRealm=com.qfedu.shirodemo.realm.CustomRealmMd5</span><br><span class="line">customRealm.credentialsMatcher=$credentialsMatcher</span><br><span class="line">将realm设置到securityManager，相当 于spring中注入</span><br><span class="line">securityManager.realms=$customRealm</span><br></pre></td></tr></table></figure><h4 id="授权流程原理"><a href="#授权流程原理" class="headerlink" title="授权流程原理"></a>授权流程原理</h4><p><strong>授权</strong></p><p>授权，也叫访问控制，即在应用中控制谁能访问哪些资源（如访问页面/编辑数据/页面操作等）。在授权中需了解的几个关键对象：主体（Subject）、资源（Resource）、权限（Permission）、角色（Role）。</p><p><strong>主体（Subject）</strong></p><p>主体，即访问应用的用户，在Shiro中使用Subject代表该用户。用户只有授权后才允许访问相应的资源。</p><p><strong>资源</strong></p><p>在应用中用户可以访问的任何东西，比如JSP 页面、某些数据、某个业务方法等等都是资源。用户只要授权后才能访问。</p><p><strong>角色</strong></p><p>角色代表了操作集合，可以理解为权限的集合，一般情况下我们会赋予用户角色而不是权限，即这样用户可以拥有一组权限，赋予权限时比较方便。</p><p>典型的如：项目经理、技术总监、CTO、开发工程师等都是角色，不同的角色拥有一组不同的权限。</p><p><strong>权限</strong></p><p>权限表示在应用中用户能不能访问某个资源，</p><p>如：访问用户列表页面查看/新增/修改/删除用户数据（即很多时候都是CRUD（增查改删）式权限控制）打印文档等等。。。</p><h5 id="判断是否授权的方式"><a href="#判断是否授权的方式" class="headerlink" title="判断是否授权的方式"></a>判断是否授权的方式</h5><p>Shiro 支持三种方式的授权判断：</p><p><strong>编程式</strong></p><p>通过写if/else 授权代码块完成：</p><p>Subject subject = SecurityUtils.getSubject();</p><p>if(subject.hasRole(“admin”)) {</p><p>​      //有权限</p><p>} else {</p><p>​     //无权限</p><p>}</p><p><strong>注解式</strong></p><p>通过在执行的Java方法上放置相应的注解完成：</p><p>@RequiresRoles(“admin”)</p><p>public void hello() {</p><p>   //有权限</p><p>}</p><p>没有权限将抛出相应的异常；</p><p><strong>JSP 标签</strong></p><p>在JSP 页面通过相应的标签完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;shiro:hasRole name=&quot;admin&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!— 有权限—&gt;</span><br><span class="line"></span><br><span class="line">&lt; /shiro:hasRole &gt;</span><br></pre></td></tr></table></figure><h5 id="自定义realm授权"><a href="#自定义realm授权" class="headerlink" title="自定义realm授权"></a>自定义realm授权</h5><p><strong>从认证的realm拷贝，改变继承的抽象父类，添加新的方法</strong></p><h3 id="5-程序分析"><a href="#5-程序分析" class="headerlink" title="5.程序分析"></a>5.程序分析</h3><p><strong>程序分析：从应用程序角度的来观察如何使用Shiro完成工作</strong> </p><ol><li>应用代码通过Subject来进行认证和授权，而Subject又委托给SecurityManager； </li><li>我们需要给Shiro的SecurityManager注入Realm，从而让SecurityManager能得到合法的用户及其权限进行判断。</li><li>可以看到：应用代码直接交互的对象是Subject，也就是说Shiro的对外API核心就是Subject； </li></ol><p><img src="file:///C:/Users/Administrator/Documents/My%20Knowledge/temp/e66c475a-c763-4097-85a0-b0219938fe7f/128/index_files/4a5f51ff-ef16-4a61-a834-9a9b06da850b.jpg" alt="img"></p><p><strong>Shiro内部结构</strong></p><p><img src="file:///C:/Users/Administrator/Documents/My%20Knowledge/temp/1b7bc2c3-9f2c-4ea2-8ed7-97820c205482/128/index_files/9b959a65-799d-396e-b5f5-b4fcfe88f53c.png" alt="img"></p><p><strong>详细原理深入和运用:<a href="http://jinnianshilongnian.iteye.com/blog/2018398" target="_blank" rel="noopener">http://jinnianshilongnian.iteye.com/blog/2018398</a></strong></p><h3 id="6-Shiro认证技巧整理"><a href="#6-Shiro认证技巧整理" class="headerlink" title="6.Shiro认证技巧整理"></a>6.Shiro认证技巧整理</h3><h4 id="工具类接口的使用"><a href="#工具类接口的使用" class="headerlink" title="工具类接口的使用"></a>工具类接口的使用</h4><p>建立一个工具类接口Constants,以常量字符串的方式,专门存放Shiro中自定义的<strong>标识符</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public interface Constants &#123;</span><br><span class="line">    // md5(用户密码+PASSWORD_SALT_KEY)保存到数据库中。</span><br><span class="line">    String PASSWORD_SALT_KEY = &quot;Shiro.admin.2017&quot;;</span><br><span class="line">    //Shiro的session中存放用户的key</span><br><span class="line">    String SESSION_USER_KEY = &quot;SESSION_USER_KEY&quot;;</span><br><span class="line">    //redis中存放的用户权限菜单的key</span><br><span class="line">    String SESSION_USER_MANU = &quot;SESSION_USER_MANU&quot;;</span><br><span class="line">    //Shiro存放的角色信息</span><br><span class="line">    String SESSION_USER_ROLE = &quot;SESSION_USER_ROLE&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接口工具类的思路不仅限于Shiro,灵活的定义接口,将冗余和容易混淆的部分抽离出来统一管理,可以极大的提高开发和维护的效率</strong></p><h4 id="认证优化技巧"><a href="#认证优化技巧" class="headerlink" title="认证优化技巧"></a>认证优化技巧</h4><p>Controller层登录方法中,接收到用户名和密码后先进行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">if (!currentUser.isAuthenticated()) &#123;</span><br><span class="line">    ...认证</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接获取subject,先进性判断该用户是否认证过,如果认证过则直接跳出即可</p><p>如果没有认证过,再进入认证环节</p><p>该逻辑可以减少服务器和数据库的压力,提高服务器的并发能力</p><h4 id="shiro-xml-拦截器设置"><a href="#shiro-xml-拦截器设置" class="headerlink" title="..shiro.xml 拦截器设置"></a>..shiro.xml 拦截器设置</h4><p><strong>Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行</strong></p><ul><li>/login.html=anon 静态资源的方式屏蔽过滤器</li><li>/**=authc 该路径下需要认证才能访问</li><li>…</li></ul><p>过滤器的完整参考：</p><p><a href="http://blog.csdn.net/jadyer/article/details/12172839" target="_blank" rel="noopener">http://blog.csdn.net/jadyer/article/details/12172839</a></p><h4 id="登录认证使用原理"><a href="#登录认证使用原理" class="headerlink" title="登录认证使用原理"></a>登录认证使用原理</h4><p><strong>动态权限控制</strong></p><p><strong>RBAC（Role-Based Access Control ）基于角色的访问控制</strong></p><ol><li>配置好环境和工具类</li><li>自定义Realm和异常</li><li>service中添加通过用户名查找用户信息</li><li>在Controller层认证登录</li><li><ul><li>UsernamePasswordToken token = new UsernamePasswordToken(name, password);</li><li>Subject subject = SecurityUtils.getSubject();</li><li>ubject.login(token);</li></ul></li><li>将真正的验证交给封装的底层–&gt;AuthenticationToken实现.(自定义Realm中)</li><li>通过此时token的username去数据库查询用户信息</li><li>用户信息存在,则存入SimpleAuthenticationInfo,否则  抛出用户对应的异常</li></ol><p><strong>Shiro的分布式认证结构(shiro认证将账号密码的比较环节封装到AuthenticationToken中)</strong></p><p>​    Realm放在Controller中,在分布式中Controller使用Dubbo服务端接口,而dubbo接口通过service实现类来发布,这个角度看realm与dao隔层交互设计不太合理</p><p>​    验证成功则返回SimpleAuthenticationInfo(存放唯一标识(id或者username),密码,Realm名</p><h3 id="7-Shiro授权技巧整理"><a href="#7-Shiro授权技巧整理" class="headerlink" title="7.Shiro授权技巧整理"></a>7.Shiro授权技巧整理</h3><ol><li>通过用户登录的唯一标识principals 查找到用户有哪些菜单权限(ID)</li><li>将这些ID存到SimpleAuthorizationInfo中</li><li>在自定义ShiroFilterFactoryBean中获取所有菜单列表,并将id加入到section中</li><li>底层自动对比,哪些ID用户有,则允许访问,没有的话”authc”拦截</li><li>Controller中查询用户拥有的菜单数据返回前段即可,此时没有权限的数据已经被拦截</li></ol><h4 id="易错集合"><a href="#易错集合" class="headerlink" title="易错集合"></a>易错集合</h4><h5 id="1-授权URL"><a href="#1-授权URL" class="headerlink" title="1.授权URL"></a>1.授权URL</h5><p>​    注意使用Shiro权限设置后的url如果需要访问,逻辑路径需要放在 <strong>前端</strong> 拼接,(后台对逻辑路径没有识别,也没有必要识别,不能将逻辑路径放在后台和数据库中)</p><h5 id="2-权限顺序"><a href="#2-权限顺序" class="headerlink" title="2.权限顺序"></a>2.权限顺序</h5><p>​    运行时先执行<strong>MyRealm</strong>中的权限,然后拼接<strong>MyShiroFilterFactoryBean</strong>中的权限</p><p>​    注意:限制范围较大的往后排,特别是全部拦截的/<strong> 如果需要的话尽量放在</strong>MyShiroFilterFactoryBean**中</p><h3 id="8-Remember-me功能简述"><a href="#8-Remember-me功能简述" class="headerlink" title="8.Remember me功能简述"></a>8.Remember me功能简述</h3><p>Shiro的Remember Me可以很轻松的实现自动登录的功能,方便快捷</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UsernamePasswordToken token = new UsernamePasswordToken(username, password);</span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line">if(loginForm.getRememberMe() != null &amp;&amp; &quot;Y&quot;.equals(loginForm.getRememberMe()))&#123;</span><br><span class="line">token.setRememberMe(true);</span><br><span class="line">&#125;</span><br><span class="line">subject.login(token);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/** = user</span><br></pre></td></tr></table></figure><p>Remember Me只需要在登录时将token的RememberMe功能开启,本来的拦截级别为/ <strong> = authc 将拦截设置(降级)为</strong>user级别**即可使用</p><p>Remember Me功能开启使用后,Shiro会生成一个叫<strong>RememberMe</strong>的Cookie保存在浏览器中,当subject.loginout退出或者过期后失效,改参数是base64加密的字符串如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">名称：rememberMe</span><br><span class="line">内容：6gYvaCGZaDXt1c0xwriXj/Uvz6g8OMT3VSaAK4WL0Fvqvkcm0nf3CfTwkWWTT4EjeSS/EoQjRfCPv4WKUXezQDvoNwVgFMtsLIeYMAfTd17ey5BrZQMxW+xU1lBSDoEM1yOy/i11ENh6eXjmYeQFv0yGbhchGdJWzk5W3MxJjv2SljlW4dkGxOSsol3mucoShzmcQ4VqiDjTcbVfZ7mxSHF/0M1JnXRphi8meDaIm9IwM4Hilgjmai+yzdVHFVDDHv/vsU/fZmjb+2tJnBiZ+jrDhl2Elt4qBDKxUKT05cDtXaUZWYQmP1bet2EqTfE8eiofa1+FO3iSTJmEocRLDLPWKSJ26bUWA8wUl/QdpH07Ymq1W0ho8EIdFhOsELxM66oMcj7a/8LVzypJXAXZdMFaNe8cBSN2dXpv4PwiktCs3J9P9vP4XrmYees5x27UmXNqYFk86xQhRjFdJsw5A9ctDKXzPYvJmWFouo3qT5hugX0uxWALCfWg8MHJnG9w7QgVKM8oy3Xy4Ut8lSvYlA==</span><br></pre></td></tr></table></figure><p>Shiro的RememberMe设计时!=已经登录,因为该cookie被序列化后可以不同的浏览器之间访问,并且可能被黑客复制截取等,因此使用该功能的话尽量以非关键性资源为主,当牵扯到<strong>资金</strong>等关键资源时,选择再次登录即可</p><p>开发时如果使用Session域对象,则自动登录后Session中不会再有数据,如果需要用到,那么需要重写isAccessAllowed 方法</p><p><strong>详细参考自:<a href="https://blog.csdn.net/nsrainbow/article/details/36945267/" target="_blank" rel="noopener">https://blog.csdn.net/nsrainbow/article/details/36945267/</a></strong></p><p><strong>(本次Remember Me尚未指定配置更改,待更新)</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Shiro基础原理&quot;&gt;&lt;a href=&quot;#Shiro基础原理&quot; class=&quot;headerlink&quot; title=&quot;Shiro基础原理&quot;&gt;&lt;/a&gt;Shiro基础原理&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; cl
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-MVC基础原理</title>
    <link href="http://yoursite.com/2018/05/15/Spring-MVC%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/05/15/Spring-MVC基础原理/</id>
    <published>2018-05-14T16:00:00.000Z</published>
    <updated>2018-08-02T02:38:28.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Spring-MVC基础原理"><a href="#1-Spring-MVC基础原理" class="headerlink" title="1.Spring-MVC基础原理"></a>1.Spring-MVC基础原理</h2><p>[TOC]</p><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>优秀的Web框架,具有<strong>松散耦合</strong>,<strong>拔插组件结构</strong>,<strong>注解驱动</strong>,<strong>REST风格支持</strong>等特性,比其他web框架更具有扩展性和灵活性</p><p>在<strong>数据绑定,视图解析,本地化处理,静态资源处理</strong>上有不俗的表现,远超Struts2,WebWork等MVC框架</p><p><img src="https://i.imgur.com/0vWxf3N.png" alt="springmvc"></p><h3 id="2-MVC框架"><a href="#2-MVC框架" class="headerlink" title="2.MVC框架"></a>2.MVC框架</h3><p>MVC全称 Model veiw Controller(模型视图控制器)  <strong>软件级的解耦分离</strong></p><ul><li>M:主要包含<strong>service</strong>(核心业务逻辑)和<strong>dao</strong>(数据库访问)</li><li>V:静态资源,如<strong>HTML5,JS,CSS</strong>等</li><li>C:<strong>servlet</strong>(主要处理<strong>页面的转发和重定向</strong>,<strong>数据的接收</strong>,<strong>域对象的操作</strong>,)和<strong>jsp</strong>(本身也是servlet)</li></ul><p>MVC 分层有助于管理复杂的应用程序，因为您可以在一个时间内专门关注一个方面。例如，您可以在<strong>不依赖业务逻辑的情况下专注于视图设计</strong>。同时也<strong>让应用程序的测试更加容易</strong>。 </p><p>MVC 分层同时也简化了分组开发。不同的开发人员可同时开发<strong>视图</strong>、<strong>控制器逻辑</strong>和<strong>业务逻辑</strong>。 </p><p><strong>(扩展)</strong>Spring MVC是基于 Model 2实现的技术框架,Model 2是经典的MVC(model,view,control)模型在WEB应用中的变体.这个改变主要源于HTTP协议的无状态性,Model 2 的目的和MVC一样,也是利用处理器分离模型,视图和控制,达到不同技术层级间松散层耦合的效果,提高系统灵活性,复用性和可维护性.大多情况下,可以将Model 2 与 MVC等同起来. </p><p><strong>(扩展)三层架构基础</strong></p><ul><li><p><strong>物理三层架构:</strong>客户端(如浏览器)/Web服务器/数据库服务器</p></li><li><p><strong>逻辑三层架构:</strong>表现层/业务逻辑层/数据库访问层</p></li></ul><h3 id="3-Spring-MVC体系概述"><a href="#3-Spring-MVC体系概述" class="headerlink" title="3.Spring MVC体系概述"></a>3.Spring MVC体系概述</h3><p>Spring-MVC围绕着<strong>DispatcherServlet(前段控制器)</strong>这个核心展开,所有的前端请求都会<strong>拦截经过这里</strong>分发到Spring MVC的各个处理器中处理,<strong>(扩展)</strong>如注解驱动控制器,请求及响应的信息处理,视图解析,本地化解析,上传文件解析,异常处理及表单标签绑定内容等…</p><h3 id="4-Spring-MVC核心组件"><a href="#4-Spring-MVC核心组件" class="headerlink" title="4.Spring MVC核心组件"></a>4.Spring MVC核心组件</h3><ul><li><strong>DispatcherServlet：</strong>作为前端控制器，整个流程控制的中心，控制其它组件执行，统一调度，降低组件之间的耦合性，提高每个组件的扩展性。 </li><li><strong>HandlerMapping：</strong>通过扩展处理器映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。 </li><li><strong>HandlAdapter：</strong>通过扩展处理器适配器，支持更多类型的处理器,调用处理器传递参数等工作! </li><li><strong>ViewResolver：</strong>通过扩展视图解析器，支持更多类型的视图解析，例如：jsp、freemarker、pdf、excel等。 </li></ul><h3 id="5-Spring-MVC执行流程"><a href="#5-Spring-MVC执行流程" class="headerlink" title="5.Spring MVC执行流程"></a>5.<strong>Spring MVC执行流程</strong></h3><p><img src="https://i.imgur.com/gfPibwt.png" alt="mvc流程"></p><h4 id="5-1-Controller和Handler关系"><a href="#5-1-Controller和Handler关系" class="headerlink" title="5-1.Controller和Handler关系"></a>5-1.Controller和Handler关系</h4><p><strong>Controller指的是类</strong></p><p><strong>Handler指的是Controller中的方法</strong>,每次URL访问Handler都是访问的<strong>@RequestMapper所标注的方法</strong></p><h3 id="6-DispatcherServlet"><a href="#6-DispatcherServlet" class="headerlink" title="6.DispatcherServlet"></a>6.DispatcherServlet</h3><h4 id="1-核心"><a href="#1-核心" class="headerlink" title="1.核心"></a>1.核心</h4><ol><li>DispatcherServlet 是Spring-MVC的核心构成,负责协调所有mvc的处理器,</li><li><strong>DispatcherServlet可以和Spring-IoC无缝集成,获得Spring的所有好处</strong></li><li>使用时需要在web.xml中对DispatcherServlet进行配置</li></ol><h4 id="2-DispatcherServlet继承关系图"><a href="#2-DispatcherServlet继承关系图" class="headerlink" title="2.DispatcherServlet继承关系图"></a>2.DispatcherServlet继承关系图</h4><p><img src="https://i.imgur.com/isTWyBE.png" alt="继承关系图"></p><h4 id="3-DispatcherServlet的责任"><a href="#3-DispatcherServlet的责任" class="headerlink" title="3.DispatcherServlet的责任"></a>3.DispatcherServlet的责任</h4><p>主要负责调度Spring-mvc的工作,并控制MVC的流程</p><ol><li>文件上传解析，如果请求类型是multipart将通过MultipartResolver进行文件上传解析；</li><li>通过HandlerMapping，将请求映射到处理器（返回一个HandlerExecutionChain，它包括一个处理器、多个HandlerInterceptor拦截器）；</li><li>通过HandlerAdapter支持多种类型的处理器(HandlerExecutionChain中的处理器)；</li><li>通过ViewResolver解析逻辑视图名到具体视图实现；</li><li>本地化解析；</li><li>渲染具体的视图等；</li><li>如果执行过程中遇到异常将交给HandlerExceptionResolver来解析。</li></ol><h4 id="4-DispatcherServlet核心代码"><a href="#4-DispatcherServlet核心代码" class="headerlink" title="4.DispatcherServlet核心代码"></a>4.DispatcherServlet核心代码</h4><h4 id="5-DispatcherServlet辅助类"><a href="#5-DispatcherServlet辅助类" class="headerlink" title="5.DispatcherServlet辅助类"></a>5.DispatcherServlet辅助类</h4><h4 id="传送门-https-xuzhongcn-github-io-top"><a href="#传送门-https-xuzhongcn-github-io-top" class="headerlink" title="传送门:https://xuzhongcn.github.io/#top"></a>传送门:<a href="https://xuzhongcn.github.io/#top" target="_blank" rel="noopener">https://xuzhongcn.github.io/#top</a></h4><h3 id="7-常用注解-实用重点"><a href="#7-常用注解-实用重点" class="headerlink" title="7.常用注解(实用重点)"></a>7.常用注解(实用重点)</h3><h4 id="1-RequestMapping-请求方式"><a href="#1-RequestMapping-请求方式" class="headerlink" title="1.@RequestMapping 请求方式"></a>1.@RequestMapping 请求方式</h4><p><strong>写在类或者方法上,表示请求该类或方法的路径</strong></p><h5 id="1-value-method"><a href="#1-value-method" class="headerlink" title="1.value method"></a>1.value method</h5><p><strong>value: </strong>请求路径</p><p>指定为普通具体值(如”/dologin”)</p><p>指定为某一变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value=&quot;/user/&#123;username&#125;&quot;, method=RequestMethod.GET)</span><br><span class="line">public String findOwner(@PathVariable String username, Model model) &#123;</span><br><span class="line">  User user=userService.selectUserByUsername(username);</span><br><span class="line">  model.addAttribute(&quot;user&quot;, user);  </span><br><span class="line">  return &quot;user&quot;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定为含有正则表达式的变量(略)</p><p><strong>method:</strong> 请求类型  GET、POST、PUT、DELETE等</p><p>(待补充)</p><h5 id="2-consumes-produces"><a href="#2-consumes-produces" class="headerlink" title="2.consumes produces"></a>2.consumes produces</h5><p><strong>consumes:</strong> 指定处理请求提交的内容类型（Content-Type），例如application/json, text/html; </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(value = &quot;/pets&quot;, method = RequestMethod.POST, consumes=&quot;application/json&quot;)</span><br><span class="line">public void addPet(@RequestBody Pet pet, Model model) &#123;    </span><br><span class="line">    // implementation omitted</span><br><span class="line">    //方法仅处理request Content-Type为“application/json”类型的请求。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>produces:</strong> 指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回； </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(value = &quot;/pets/&#123;petId&#125;&quot;, method = RequestMethod.GET, produces=&quot;application/json&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public Pet getPet(@PathVariable String petId, Model model) &#123;    </span><br><span class="line">    // implementation omitted</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅处理request请求头header中包含了指定类型<strong>application/json</strong>的请求,同时暗示返回数据也是json</p><h5 id="3-params-headers"><a href="#3-params-headers" class="headerlink" title="3.params headers"></a>3.params headers</h5><p><strong>params:</strong> 指定request中必须包含某些参数才可以调用该方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/owners/&#123;ownerId&#125;&quot;)</span><br><span class="line">public class RelativePathUriTemplateController &#123;</span><br><span class="line"></span><br><span class="line">  @RequestMapping(value = &quot;/pets/&#123;petId&#125;&quot;, method = RequestMethod.GET, params=&quot;myParam=myValue&quot;)</span><br><span class="line">  public void findPet(@PathVariable String ownerId, @PathVariable String petId, Model model) &#123;    </span><br><span class="line">    // implementation omitted</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅处理请求中包含了名为“myParam”，值为“myValue”的请求； </p><p><strong>headers:</strong>指定的request中必须包含指定的header值才可以调用该方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/owners/&#123;ownerId&#125;&quot;)</span><br><span class="line">public class RelativePathUriTemplateController &#123;</span><br><span class="line"></span><br><span class="line">@RequestMapping(value = &quot;/pets&quot;, method = RequestMethod.GET, headers=&quot;Referer=http://www.ifeng.com/&quot;)</span><br><span class="line">  public void findPet(@PathVariable String ownerId, @PathVariable String petId, Model model) &#123;    </span><br><span class="line">    // implementation omitted</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅处理request的header中包含了指定“Refer”请求头和对应值为“<code>http://www.ifeng.com/</code>”的请求； </p><h4 id="2-RequestParam-处理请求参数"><a href="#2-RequestParam-处理请求参数" class="headerlink" title="2.@RequestParam 处理请求参数"></a>2.@RequestParam 处理请求参数</h4><h4 id="3-PathVariable-路径传参"><a href="#3-PathVariable-路径传参" class="headerlink" title="3.@PathVariable 路径传参"></a>3.@PathVariable 路径传参</h4><h4 id="4-RequestBody-处理Json-xml请求"><a href="#4-RequestBody-处理Json-xml请求" class="headerlink" title="4.@RequestBody 处理Json/xml请求"></a>4.@RequestBody 处理Json/xml请求</h4><p><strong>requestBody</strong> 常用来处理不是默认类型application/x-www-form-urlcoded 的请求</p><p>如application/json或者是application/xml等(一般处理json)</p><p><strong>requestBody</strong>可以将请求体中的JSON字符串绑定到相应的bean上，也可以将其分别绑定到对应的字符串上 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">　@requestMapping(&quot;/login&quot;)</span><br><span class="line">　　　　public void login(@requestBody String userName,@requestBody String pwd)&#123;</span><br><span class="line">　　　　　　System.out.println(userName+&quot; ：&quot;+pwd);</span><br><span class="line">　　　　&#125;</span><br><span class="line">---------------</span><br><span class="line">　@requestMapping(&quot;/login&quot;)</span><br><span class="line">　　　　public void login(@requestBody User user)&#123;</span><br><span class="line">　　　　　　System.out.println(user);</span><br><span class="line">　　　　&#125;</span><br></pre></td></tr></table></figure><h4 id="5-ResponseBody-处理Json-xml-响应"><a href="#5-ResponseBody-处理Json-xml-响应" class="headerlink" title="5.@ResponseBody 处理Json/xml 响应"></a>5.@ResponseBody 处理Json/xml 响应</h4><p><strong>responseBody:</strong>用于将数据放到response的body体中响应到前端</p><p><strong>注意:</strong>返回的数据不是html标签页面,而是json/xml数据</p><p>​     <strong>如果返回String,此方法原理相当于response.write(),都不走视图解析,直接响应给页面数据,如果使用对象,才会解析为json</strong></p><h4 id="6-JsonFomat格式化时间"><a href="#6-JsonFomat格式化时间" class="headerlink" title="6.@JsonFomat格式化时间"></a>6.@JsonFomat格式化时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**更新时间  用户可以点击更新，保存最新更新的时间。**/</span><br><span class="line">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line">private Date updateTime;</span><br><span class="line"></span><br><span class="line">或者getter上</span><br><span class="line">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line">public Date getUpdateTime() &#123;</span><br><span class="line">    return updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式化时间</p><h4 id="对于请求类型的适配原理"><a href="#对于请求类型的适配原理" class="headerlink" title="对于请求类型的适配原理"></a>对于请求类型的适配原理</h4><p><strong>传送门:<a href="http://www.cnblogs.com/qq78292959/p/3760651.html" target="_blank" rel="noopener">http://www.cnblogs.com/qq78292959/p/3760651.html</a></strong></p><h3 id="8-伪静态化SEO优化"><a href="#8-伪静态化SEO优化" class="headerlink" title="8.伪静态化SEO优化"></a>8.伪静态化SEO优化</h3><p>请求的后缀改为.html 可以实现伪静态化,欺骗SEO搜索(<strong>对动态不友好</strong>),此处拦截也可以改为*.html,</p><p>这样<strong>静态资源</strong>也不会被拦截(不需要配置静态资源映射了)</p><h4 id="8-1-简单优化过程"><a href="#8-1-简单优化过程" class="headerlink" title="8-1.简单优化过程"></a>8-1.简单优化过程</h4><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>e3-portal-web<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 解决post乱码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- springmvc的前端控制器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>e3-portal-web<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- contextConfigLocation不是必须的， 如果不配置contextConfigLocation， springmvc的配置文件默认在：WEB-INF/servlet的name+"-servlet.xml" --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>e3-portal-web<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 拦截指定后缀所有请求 伪静态化 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Handler</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/index.html&quot;)</span><br><span class="line">    public String showIndex()&#123;</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li>欢迎页改为index.html  当静态页面中没有index.html时,请求会被Spring-mvc拦截器拦截到(后缀为.html)</li><li>拦截到index请求后发送到Controller中的对应Handler中,完成<strong>伪静态优化</strong> </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Spring-MVC基础原理&quot;&gt;&lt;a href=&quot;#1-Spring-MVC基础原理&quot; class=&quot;headerlink&quot; title=&quot;1.Spring-MVC基础原理&quot;&gt;&lt;/a&gt;1.Spring-MVC基础原理&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 
      
    
    </summary>
    
      <category term="Spring全家桶" scheme="http://yoursite.com/categories/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>基础排序 组合</title>
    <link href="http://yoursite.com/2018/05/08/%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%20%E7%BB%84%E5%90%88/"/>
    <id>http://yoursite.com/2018/05/08/基础排序 组合/</id>
    <published>2018-05-07T16:00:00.000Z</published>
    <updated>2018-07-29T13:36:40.145Z</updated>
    
    <content type="html"><![CDATA[<p><strong>规范:()中,先写下,在写上</strong></p><p>[TOC]</p><h3 id="1-排序"><a href="#1-排序" class="headerlink" title="1.排序"></a>1.排序</h3><p>转换为计算机写法<strong>A(n,m)</strong>     n在下  m在上</p><p>​    即:n个数中取m个来排序</p><h3 id="2-组合"><a href="#2-组合" class="headerlink" title="2.组合"></a>2.组合</h3><p>转换为计算机写法<strong>C(n,m)</strong>    n在下 m在上</p><p>​    即: 分子:n的阶乘,阶乘的个数为m</p><p>​          分母:m的阶乘</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;规范:()中,先写下,在写上&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-排序&quot;&gt;&lt;a href=&quot;#1-排序&quot; class=&quot;headerlink&quot; title=&quot;1.排序&quot;&gt;&lt;/a&gt;1.排序&lt;/h3&gt;&lt;p&gt;转换为计算机写法&lt;s
      
    
    </summary>
    
      <category term="初等数学" scheme="http://yoursite.com/categories/%E5%88%9D%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>Quartz基础原理</title>
    <link href="http://yoursite.com/2018/05/07/Quartz%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/05/07/Quartz基础原理/</id>
    <published>2018-05-06T16:00:00.000Z</published>
    <updated>2018-07-16T16:12:24.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quartz基础原理"><a href="#Quartz基础原理" class="headerlink" title="Quartz基础原理"></a>Quartz基础原理</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>Quartz是开源的<strong>任务调度框架</strong>,集合可以应用于任何java程序中,小到独立的小项目,大到规模庞大的电子商务系统.</p><p>Quartz可以创建几条/几百条甚至十万条作业调度数</p><p><strong>(Quartz的作业环境可以很复杂,精确到每个月最后一个工作日的22:50)</strong></p><p><strong>场景:</strong>每月自动还款/广告自动上下架/几个小时自动备份云盘等</p><h3 id="2-核心组成"><a href="#2-核心组成" class="headerlink" title="2.核心组成"></a>2.核心组成</h3><p><strong>Scheduler</strong>：调度器。所有的调度都是由它控制。包含两个重要组件</p><p>​    JobStore:存储运行时的信息,包括Trigger,Schduler,JobDetail，业务锁等</p><p>​    ThreadPool:Quartz自己的线程池实现,所有的任务都有线程池执行</p><p><strong>Trigger</strong>:触发器.定义触发条件.常用<strong>SimpleTrigger/CronTirgger</strong>，每隔1秒中执行一次,五种类型</p><ol><li>SimpleTrigger</li><li>CronTirgger</li><li>DateIntervalTrigger</li><li>NthIncludedDayTrigger</li><li>Calendar 类（ org.quartz.Calendar） </li></ol><p>常用:</p><ul><li>SimpleTrigger：用来触发只需执行一次或者在给定时间触发并且重复N次且每次执行延迟一定时间的任务。 </li><li>CronTrigger：按照日历触发，例如“每个周五”，每个月10日中午或者10：15分。  </li></ul><p><strong>JobDetail &amp; Job</strong>：JobDetail 定义的是<strong>任务数据</strong>，而真正的<strong>执行逻辑</strong>是在Job中。</p><p>​    设计成JobDetail+Job是因为任务有可能并发执行的,如果Scheduler直接使用Job,则有可能在同一时刻多个线程同时访问一个Job实例,造成<strong>并发访问问题</strong>;</p><p>​    而JobDetail&amp;Job的模式下,Scheduler每次使用Job前,JobDetail都会构建一个新的Job,以此来<strong>规避并发访问问题</strong></p><p>JobDetail和Trigger都有<strong>name</strong>和<strong>group</strong>。</p><p>​    name是Scheduler中的唯一标识,如果想更新JobDetail或Trigger,只需要重新定义相同的name覆盖即可</p><p>​    group是组织单元,使Scheduler可以整组的调度作业</p><h3 id="3-核心关系图"><a href="#3-核心关系图" class="headerlink" title="3.核心关系图"></a>3.核心关系图</h3><p><img src="https://i.imgur.com/SOZWmeU.png" alt="核心元素关系图"></p><h3 id="4-原理-精-传送门-https-xuzhongcn-github-io"><a href="#4-原理-精-传送门-https-xuzhongcn-github-io" class="headerlink" title="4.原理(精)传送门:https://xuzhongcn.github.io/"></a>4.原理(精)传送门:<a href="https://xuzhongcn.github.io/" target="_blank" rel="noopener">https://xuzhongcn.github.io/</a></h3><h3 id="5-使用"><a href="#5-使用" class="headerlink" title="5.使用"></a>5.使用</h3><h4 id="5-1-Cron表达式的格式：秒-分-时-日-月-周-年-可选-。"><a href="#5-1-Cron表达式的格式：秒-分-时-日-月-周-年-可选-。" class="headerlink" title="5-1 Cron表达式的格式：秒 分 时 日 月 周 年(可选)。"></a>5-1 Cron表达式的格式：秒 分 时 日 月 周 年(可选)。</h4><ol><li>字段名                 允许的值                        允许的特殊字符      </li><li>秒                         0-59                               , - * /   </li><li>分                         0-59                               , - * /  </li><li>小时                     0-23                               , - * / </li><li>日                         1-31                               , - * ? / L W C </li><li>月                         1-12 or JAN-DEC          , - * / </li><li>周几                     1-7 or SUN-SAT             , - * ? / L C # </li><li>SUN ,  MON ,  TUE ,  WED ,  THU ,  FRI  and  SAT</li><li>年 (可选字段)     empty, 1970-2099            , - * / </li></ol><ul><li>“?”字符：表示不确定的值                 </li><li>“,”字符：指定数个值                 </li><li>“-”字符：指定一个值的范围                </li><li>“/”字符：指定一个值的增加幅度。</li><li>n/m表示从n开始，每次增加m                </li><li>“L”字符：用在日表示一个月中的最后一天，用在周表示该月最后一个星期X</li><li>“W”字符：指定离给定日期最近的工作日(周一到周五)                </li><li>“#”字符：表示该月第几个周X。6#3表示该月第3个周五 </li></ul><p><strong>Cron表达式示例</strong></p><ul><li>每隔5秒执行一次：<em>/5 </em> <em> </em> * ?                  </li><li>每隔1分钟执行一次：0 <em>/1 </em> <em> </em> ?                  </li><li>每天23点执行一次：0 0 23 <em> </em> ?                   </li><li>每天凌晨1点执行一次：0 0 1 <em> </em> ?                  </li><li>每月1号凌晨1点执行一次：0 0 1 1 * ?                  </li><li>每月最后一天23点执行一次：0 0 23 L * ?                   </li><li>每周星期六凌晨1点实行一次：0 0 1 ? * L                   </li><li>在26分、29分、33分执行一次：0 26,29,33 <em> </em> * ?                   </li><li>每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 <em> </em> ? </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Quartz基础原理&quot;&gt;&lt;a href=&quot;#Quartz基础原理&quot; class=&quot;headerlink&quot; title=&quot;Quartz基础原理&quot;&gt;&lt;/a&gt;Quartz基础原理&lt;/h2&gt;&lt;h3 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; class=&quot;head
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis基础原理</title>
    <link href="http://yoursite.com/2018/05/04/Redis%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/05/04/Redis基础原理/</id>
    <published>2018-05-03T16:00:00.000Z</published>
    <updated>2018-08-01T16:21:18.919Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Redis基础原理"><a href="#Redis基础原理" class="headerlink" title="Redis基础原理"></a>Redis基础原理</h3><p>[TOC]</p><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><p><strong>NoSQL</strong></p><p>非关系型数据库,Redis是非关系型数据库中的<strong>键值存储数据库</strong></p><p><strong>应用</strong></p><p>处理高并发/海量数据的访问,内容缓存/内容持久化</p><p>同样具有分布式的内存对象缓存的系统还有<strong>MemCache</strong> (不能数据持久化)</p><p><strong>简介传送门:</strong><a href="https://blog.csdn.net/sinat_33994744/article/details/56514901" target="_blank" rel="noopener">https://blog.csdn.net/sinat_33994744/article/details/56514901</a></p><p><strong>优点</strong></p><ol><li>快速查询,支持横向扩充(集群)和纵向扩充(加强设备)</li><li>丰富的数据类型String，list，set，sorted set，hash</li><li>一主多从,读写分离</li><li>哨兵机制,检测选举</li><li>集群机制,多主多从,数据高可用,分布式存储</li><li>保存在内存中,速度很快 读11W/s | 写8W/s</li></ol><p><strong>缺点</strong></p><p>​    存储缺少结构化(难以构建关系型理数据库模型)</p><h4 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h4><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><p>最简单的KV存储,value可以是String也可以是数字等</p><p><strong>场景</strong></p><p>kv字符串结构等,非常普遍</p><p><strong>指令</strong></p><p>​        <strong>SET key value</strong>                   设置key=value </p><p>​        <strong>GET key</strong>                         或者键key对应的值 </p><p>​    GETRANGE key start end          得到字符串的子字符串存放在一个键 </p><p>​    GETSET key value                设置键的字符串值，并返回旧值 </p><p>​    GETBIT key offset               返回存储在键位值的字符串值的偏移 </p><p>​    MGET key1 [key2..]              得到所有的给定键的值 </p><p>​    SETBIT key offset value         设置或清除该位在存储在键的字符串值偏移 </p><p>​    SETEX key seconds value         键到期时设置值 </p><p>​    SETNX key value                 设置键的值，只有当该键不存在 </p><p>​    SETRANGE key offset value       覆盖字符串的一部分从指定键的偏移 </p><p>​    STRLEN key                      得到存储在键的值的长度 </p><p>​    MSET key value [key value…]   设置多个键和多个值 </p><p>​    MSETNX key value [key value…] 设置多个键多个值，只有在当没有按键的存在时 </p><p>​    PSETEX key milliseconds value   设置键的毫秒值和到期时间 </p><p>​        <strong>INCR key</strong>                       增加键的整数值一次          </p><p>​        <strong>incr key 让Redis统计网站访问量,速度快,减少并发问题,生成主键</strong></p><p>​    INCRBY key increment            由给定的数量递增键的整数值 </p><p>​    INCRBYFLOAT key increment       由给定的数量递增键的浮点值</p><p>​    DECR key                        递减键一次的整数值 </p><p>​    DECRBY key decrement            由给定数目递减键的整数值 </p><p>​    APPEND key value                追加值到一个键 </p><p>​    ——–操作管理———-</p><ul><li><strong>KEYS *</strong>            查看所有的Key</li><li><strong>DEL key</strong>                         如果存在删除键 </li><li>DUMP key                        返回存储在指定键的值的序列化版本 </li><li><strong>EXISTS key</strong>                      此命令检查该键是否存在 </li><li><strong>EXPIRE key seconds</strong>              指定键的过期时间 <strong>常用</strong></li><li>EXPIREAT key timestamp          指定的键过期时间。在这里，时间是在Unix时间戳格式 </li><li><strong>PEXPIRE key milliseconds</strong>        设置键以毫秒为单位到期 </li><li>PEXPIREAT key milliseconds-timestamp        设置键在Unix时间戳指定为毫秒到期 </li><li>KEYS pattern                    查找与指定模式匹配的所有键 </li><li>MOVE key db                     移动键到另一个数据库 </li><li><strong>PERSIST key</strong>                     移除过期的键 <strong>常用,让key持久化</strong></li><li>PTTL key                        以毫秒为单位获取剩余时间的到期键。 </li><li><strong>TTL key</strong>                         获取键到期的剩余时间。  <strong>正数是有过期时间,-1是持久化,-2是不存在</strong></li><li>RANDOMKEY                       从Redis返回随机键 </li><li>RENAME key newkey               更改键的名称 </li><li>RENAMENX key newkey             重命名键，如果新的键不存在 </li><li>TYPE key                        返回存储在键的数据类型的值。 </li></ul><h5 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h5><p>字符串列表,非常重要的Redis类型,本质是双向链表,支持反向查询和遍历,更加方便,但是会额外增加内存开销(存储双向链表),redis内部的<strong>发送缓冲队列</strong>使用的就是List结构</p><p><strong>一般用来做排队处理的工作(队列)一个一个左边加,一个一个右边取</strong></p><p><strong>场景</strong></p><p>如twitter的关注列表和粉丝列表,实现轻量级的消息队列等</p><p><strong>指令</strong></p><ul><li>BLPOP<br>BLPOP key1 [key2 ] timeout 取出并获取列表中的第一个元素，或阻塞，直到有可用</li><li>BRPOP<br>BRPOP key1 [key2 ] timeout 取出并获取列表中的最后一个元素，或阻塞，直到有可用</li><li>BRPOPLPUSH<br>BRPOPLPUSH source destination timeout 从列表中弹出一个值，它推到另一个列表并返回它;或阻塞，直到有可用</li><li>LINDEX<br>LINDEX key index 从一个列表其索引获取对应的元素</li><li>LINSERT<br>LINSERT key BEFORE|AFTER pivot value 在列表中的其他元素之后或之前插入一个元素</li><li>LLEN<br>LLEN key 获取列表的长度</li><li><strong>LPOP</strong><br>LPOP key 获取并取出列表中的第一个元素,并移除</li><li><strong>LPUSH</strong><br>LPUSH key value1 value2  [value3] <strong>在value3左边加上一个或多个值的列表</strong></li><li>LPUSHX<br>LPUSHX key value 在前面加上一个值列表，仅当列表中存在</li><li><strong>LRANGE</strong><br>LRANGE key 0  -1 (其中0和-1的集合代表<strong>查看全部</strong>)从一个列表获取各种元素</li><li>LREM<br>LREM key count value 从列表中删除元素</li><li>LSET<br>LSET key index value 在列表中的索引设置一个元素的值</li><li>LTRIM<br>LTRIM key start stop 修剪列表到指定的范围内</li><li><strong>RPOP</strong><br>RPOP key 取出并获取列表中的最后一个元素,并移除</li><li>RPOPLPUSH<br>RPOPLPUSH source destination 删除最后一个元素的列表，将其附加到另一个列表并返回它</li><li><strong>RPUSH</strong><br>RPUSH key value1 value2  [value3] 在<strong>value3右边</strong>添加一个或多个值到列表</li><li>RPUSHX<br>RPUSHX key value 添加一个值列表，仅当列表中存在</li></ul><h5 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h5><p>Redis Hash对应Value内部实际就是一个HashMap，实际这里会有2种不同实现，这个Hash的成员比较少时Redis为了节省内存会采用类似一维数组的方式来紧凑存储，而不会采用真正的HashMap结构，对应的value redisObject的encoding为zipmap,当成员数量增大时会自动转成真正的HashMap,此时encoding为ht。 </p><p><strong>场景</strong></p><p>可以方便的存储用户信息,用户ID为Key,用户信息序列化为value存储</p><p><strong>注意</strong></p><p>不能设定Hash的key中指定field的过期时间(只有key的过期时间)</p><p><strong>指令</strong></p><ul><li>HDEL<br><strong>HDEL key field[field…]</strong> 删除对象的一个或几个属性域，不存在的属性将被忽略</li><li>HEXISTS<br>HEXISTS key field 查看对象是否存在该属性域</li><li>HGET<br><strong>HGET key field</strong> 获取对象中该field属性域的值</li><li>HGETALL<br><strong>HGETALL key</strong> 获取对象的所有属性域和值</li><li>HSET<br><strong>HSET key field value</strong> 设置对象指定字段的值</li><li>HMSET<br><strong>HMSET key field value [field value …]</strong> 同时设置对象中一个或多个字段的值</li><li>HSETNX<br><strong>HSETNX key field value</strong> 只在对象不存在指定的字段时才设置字段的值</li><li>HINCRBY<br>HINCRBY key field value 将该对象中指定域的值增加给定的value，原子自增操作，只能是integer的属性值可以使用</li><li>HINCRBYFLOAT<br>HINCRBYFLOAT key field increment 将该对象中指定域的值增加给定的浮点数</li><li>HKEYS<br>HKEYS key 获取对象的所有属性字段</li><li>HVALS<br>HVALS key 获取对象的所有属性值</li><li>HLEN<br>HLEN key 获取对象的所有属性字段的总数</li><li>HMGET<br>HMGET key field[field…] 获取对象的一个或多个指定字段的值</li><li>HSTRLEN<br>HSTRLEN key field 返回对象指定field的value的字符串长度，如果该对象或者field不存在，返回0.</li><li>HSCAN<br>HSCAN key cursor [MATCH pattern][COUNT count] 类似SCAN命令</li><li>HKEYS</li><li><strong>HKeys key</strong>  查看key中所有的field</li><li>HVALS</li><li><strong>Hvals key</strong>   查看key中所有field<strong>的</strong>对应的值</li><li>HGETALL</li><li><strong>HgetAll key</strong>  查看key中所有的<strong>field</strong>和<strong>value</strong></li></ul><h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><p>存储数据不重复,set 的内部实现是一个 value永远为null的HashMap，实际就是通过计算hash的方式来快速排重的，这也是set能提供判断一个成员是否在集合内的原因。 </p><p><strong>用来去重</strong></p><p><strong>场景</strong></p><p>set和list的功能类似,但是set加载的列表自动排重,当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。 </p><p>在微博应用中，每个用户关注的人存在一个集合中，就很容易实现求两个人的共同好友功能。 </p><p><strong>指令</strong></p><ul><li><strong>SADD</strong><br>SADD key member [member …] 添加一个或者多个元素到集合(set)里</li><li>SACRD<br>SCARD key 获取集合里面的元素数量</li><li>SDIFF<br>SDIFF key [key …] 获得队列不存在的元素</li><li>SDIFFSTORE<br>SDIFFSTORE destination key [key …] 获得队列不存在的元素，并存储在一个关键的结果集</li><li>SINTERSTORE<br>SINTERSTORE destination key [key …] 获得两个集合的交集，并存储在一个集合中</li><li>SISMEMBER<br>SISMEMBER key member 确定一个给定的值是一个集合的成员</li><li><strong>SMEMBERS</strong><br>SMEMBERS key 获取集合里面的所有key</li><li>SMOVE<br>SMOVE source destination member 移动集合里面的一个key到另一个集合</li><li>SPOP<br>SPOP key [count] 获取并删除一个集合里面的元素</li><li>SRANDMEMBER<br>SRANDMEMBER key [count] 从集合里面随机获取一个元素</li><li><strong>SREM</strong><br>SREM key member [member …] 从集合里删除一个或多个元素，不存在的元素会被忽略</li><li>SUNIONSTORE<br>SUNIONSTORE destination key [key …] 合并set元素，并将结果存入新的set里面</li><li>SSCAN<br>SSCAN key cursor [MATCH pattern][COUNT count] 迭代set里面的元素</li></ul><p><strong>Set中key的各种关系筛选</strong>,可以两个也可以多个</p><p>设置</p><p>Sadd seta  a b c d e</p><p>Sadd setb  c d e f g</p><ul><li><strong>SDIFF 差集</strong></li><li>Sdiff seta  setb  结果   a b</li><li>Sdiff setb  seta  结果   f  g</li><li><strong>SINTER 交集</strong><br>SINTER seta  [setb  …] 获得两个集合的交集  结果 c d e</li><li><strong>SUNION 并集</strong></li><li>Sunion  seta  setb  结果  a b c d e f g</li></ul><h5 id="Sorted-Set"><a href="#Sorted-Set" class="headerlink" title="Sorted Set"></a>Sorted Set</h5><p>set的有序版,由HaspMap和跳跃表组成,兼顾list和set 有序去重,但是处理两方面<strong>sorted性能消耗大</strong></p><p><strong>场景</strong></p><p>用户的积分排行榜需求就可以通过有序集合实现。还有上面介绍的使用List实现轻量级的消息队列，其实也可以通过Sorted Set实现有优先级或按权重的队列。 </p><p><strong>指令</strong></p><ul><li><strong>ZADD</strong><br>ZADD key score1 member1 [score2 member2] 添加一个或多个成员到有序集合，或者如果它已经存在更新其分数</li><li>ZCARD<br>ZCARD key 得到的有序集合成员的数量</li><li>ZCOUNT<br>ZCOUNT key min max 计算一个有序集合成员与给定值范围内的分数</li><li>ZINCRBY<br>ZINCRBY key increment member 在有序集合增加成员的分数</li><li>ZINTERSTORE<br>ZINTERSTORE destination numkeys key [key …] 多重交叉排序集合，并存储生成一个新的键有序集合。</li><li>ZLEXCOUNT<br>ZLEXCOUNT key min max 计算一个给定的字典范围之间的有序集合成员的数量</li><li><strong>ZRANGE</strong><br>ZRANGE key start stop [WITHSCORES] 由索引返回一个成员范围的有序集合（从低到高）<strong>0 -1 取全部</strong></li><li>ZRANGEBYLEX<br>ZRANGEBYLEX key min max [LIMIT offset count]返回一个成员范围的有序集合（由字典范围）</li><li>ZRANGEBYSCORE<br>ZRANGEBYSCORE key min max [WITHSCORES][LIMIT] 返回有序集key中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员，有序集成员按 score 值递增(从小到大)次序排列</li><li>ZRANK<br>ZRANK key member 确定成员的索引中有序集合</li><li>ZREM<br>ZREM key member [member …] 从有序集合中删除一个或多个成员，不存在的成员将被忽略</li><li>ZREMRANGEBYLEX<br>ZREMRANGEBYLEX key min max 删除所有成员在给定的字典范围之间的有序集合</li><li>ZREMRANGEBYRANK<br>ZREMRANGEBYRANK key start stop 在给定的索引之内删除所有成员的有序集合</li><li>ZREMRANGEBYSCORE<br>ZREMRANGEBYSCORE key min max 在给定的分数之内删除所有成员的有序集合</li><li>ZREVRANGE<br>ZREVRANGE key start stop [WITHSCORES] 返回一个成员范围的有序集合，通过索引，以分数排序，从高分到低分</li><li>ZREVRANGEBYSCORE<br>ZREVRANGEBYSCORE key max min [WITHSCORES] 返回一个成员范围的有序集合，以socre排序从高到低</li><li>ZREVRANK Zrevrank<br>ZREVRANK key member 确定一个有序集合成员的索引，以分数排序，从高分到低分</li><li>ZSCORE<br>ZSCORE key member 获取给定成员相关联的分数在一个有序集合</li><li>ZUNIONSTORE<br>ZUNIONSTORE destination numkeys key [key …] 添加多个集排序，所得排序集合存储在一个新的键</li><li>ZSCAN<br>ZSCAN key cursor [MATCH pattern] [COUNT count] 增量迭代排序元素集和相关的分数</li></ul><p>**Redis过期策略:<a href="https://www.jb51.net/article/103236.htm" target="_blank" rel="noopener">https://www.jb51.net/article/103236.htm</a></p><h4 id="3-Redis运用"><a href="#3-Redis运用" class="headerlink" title="3.Redis运用"></a>3.Redis运用</h4><p><strong>Redis使用策略设计模式来开发(接口+实现类,方便切换单机和集群版)</strong></p><p><strong>文件夹格式</strong></p><p>key中如果存在 :  那么该符号将被<strong>额外</strong>解析为文件夹层级</p><p>如 ITEM_INFO:TEST:BASE</p><p><strong>被解析为ITEM_INFO文件夹下–&gt;TEST子文件夹下的key  ITEM_INFO:TEST:BASE</strong></p><p>实际开发中,经常会用到集合(list读取较快)来存储缓存数据,但是Redis只支持List<string>,不能直接支持List<object>,因此需要制作工具类来转换Json类型读写</object></string></p><ol><li>导入POM</li><li>导入JsonUtils工具类(将Object/List &lt;Object &gt;转化为字符串)</li><li>导入Redis工具类接口/实现接口</li><li>导入配置文件spring-redis/redis.properties</li><li>service中注入使用即可</li></ol><p><strong>注意spring的加载机制:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder &apos;USER_LIST&apos; in string value &quot;$&#123;USER_LIST&#125;&quot;</span><br></pre></td></tr></table></figure><p>Spring容器采用反射扫描的发现机制，在探测到Spring容器中有一个org.springframework.beans.factory.config.PropertyPlaceholderConfigurer的Bean就会停止对剩余PropertyPlaceholderConfigurer的扫描（Spring 3.1已经使用PropertySourcesPlaceholderConfigurer替代PropertyPlaceholderConfigurer了）</p><p>所以根据加载的顺序，配置的第二个property-placeholder就被没有被spring加载，我想引入的config-wxapp.properties就没有被引入，所以在使用@Value注入的时候占位符就解析不了…解决方法就是把2个property-placeholder注解配置合并在一起就好了 </p><h4 id="4-redis事务"><a href="#4-redis事务" class="headerlink" title="4.redis事务"></a>4.redis事务</h4><h4 id="5-Redis持久化方案"><a href="#5-Redis持久化方案" class="headerlink" title="5.Redis持久化方案"></a>5.Redis持久化方案</h4><p><strong>Redis 的所有数据都是保存在内存中</strong></p><p>数据的完整性和速度要有取舍,如果追求完整性,用关系型数据库如MySQL.追求速度用Redis等.</p><p><strong>Rdb</strong>: 快照形式,定期把内存中<strong>当前的数据</strong>保存到磁盘中,Redis<strong>默认开启</strong>的持久化方案</p><p>在配置文件redis.config中存在,可以修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">####################SHAPSHOTTING#####################</span><br><span class="line">Save the DB on disk</span><br><span class="line">默认</span><br><span class="line">save 900 115分钟内1个key变化了,则15分钟保存一次</span><br><span class="line">save 300 10  5分钟内10个key变化了,则5分钟保存一次</span><br><span class="line">save 60 10000 1分钟10000个key变化了,则1分钟保存一次</span><br></pre></td></tr></table></figure><p><strong>aof</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendonly no  默认不开启,另一套持久化方案(频繁操作磁盘,会每秒钟保存一次,慢)</span><br><span class="line">如果觉得rdb丢数据可能性高,那么可以开启aof模式,将增删改命令保存到指定文件(恢复时运行一下就好)</span><br><span class="line">当前目录会生成一个appendonly.aof,运行它就可以恢复</span><br></pre></td></tr></table></figure><p>Rdb和aof如果有必要可以同时开启</p><h4 id="6-Redis集群"><a href="#6-Redis集群" class="headerlink" title="6.Redis集群"></a>6.Redis集群</h4><h5 id="Redis-cluster-最少三个"><a href="#Redis-cluster-最少三个" class="headerlink" title="Redis-cluster (最少三个)"></a><strong>Redis-cluster</strong> (最少三个)</h5><ol><li><strong>集群所有节点相互通信,ping-pong,只要连接集群任意一个节点即可连接到集群</strong></li><li><strong>主从节点内容相同(同步缓存,高可用),主节点之间内容不同</strong></li></ol><h5 id="增强Redis高可用–哨兵机制-投票"><a href="#增强Redis高可用–哨兵机制-投票" class="headerlink" title="增强Redis高可用–哨兵机制(投票)"></a><strong>增强Redis高可用–哨兵机制(投票)</strong></h5><p>超过半数即生效</p><h5 id="slot-槽"><a href="#slot-槽" class="headerlink" title="slot(槽)"></a>slot(槽)</h5><p>为了<strong>保证Redis负载均衡</strong>,使用slot来维护</p><p>将所有的<strong>物理节点映射到[0-16383]个槽上</strong></p><p>根据算法,分配数据到不同的槽上(<strong>槽和数据数量没关系,只和服务器分配有关系</strong>)</p><h4 id="7-缓存穿透-缓存雪崩-热点key方案"><a href="#7-缓存穿透-缓存雪崩-热点key方案" class="headerlink" title="7.缓存穿透/缓存雪崩/热点key方案"></a>7.缓存穿透/缓存雪崩/热点key方案</h4><h4 id="8-假设redis只能缓存20W数据-如何保证2000W条数据的热点被使用"><a href="#8-假设redis只能缓存20W数据-如何保证2000W条数据的热点被使用" class="headerlink" title="8.假设redis只能缓存20W数据,如何保证2000W条数据的热点被使用"></a>8.假设redis只能缓存20W数据,如何保证2000W条数据的热点被使用</h4><p>MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据 </p><p><strong>相关知识：</strong>redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 6种数据淘汰策略：  </p><ol><li><strong>voltile-lru</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选<strong>最近最少使用</strong>的数据淘汰 </li><li><strong>volatile-ttl</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选<strong>将要过期</strong>的数据淘汰  </li><li><strong>volatile-random</strong>：从已设置过期时间的数据集（server.db[i].expires）中<strong>任意选择</strong>数据淘汰  </li><li><strong>allkeys-lru</strong>：从数据集（<strong>server.db[i].dict</strong>）中挑选<strong>最近最少使用</strong>的数据淘汰  </li><li><strong>allkeys-random</strong>：从数据集（<strong>server.db[i].dict</strong>）中<strong>任意选择</strong>数据淘汰  </li><li><strong>no-enviction</strong>（驱逐）：<strong>禁止驱逐数据</strong> </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Redis基础原理&quot;&gt;&lt;a href=&quot;#Redis基础原理&quot; class=&quot;headerlink&quot; title=&quot;Redis基础原理&quot;&gt;&lt;/a&gt;Redis基础原理&lt;/h3&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h4 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; cl
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring基础原理</title>
    <link href="http://yoursite.com/2018/04/15/Spring%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/04/15/Spring基础原理/</id>
    <published>2018-04-14T16:00:00.000Z</published>
    <updated>2018-07-29T13:37:35.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring基础原理"><a href="#Spring基础原理" class="headerlink" title="Spring基础原理"></a>Spring基础原理</h2><p>[TOC]</p><h3 id="1-Spring概念"><a href="#1-Spring概念" class="headerlink" title="1.Spring概念"></a>1.Spring概念</h3><p><strong>提供一个ioc容器来管理Bean,并通过AOP方式来增加Bean的功能</strong></p><p>基于Spring-IoC和AOP来构建多层Java EE 项目,能构将项目内的组件进行解耦分离,大大提高了开发效率和维护效率</p><p><strong>通过反射+XML实现的对象管理工厂(大容器)</strong></p><p><strong>目的:</strong></p><ol><li>解耦,简化开发</li><li>AOP编程的支持</li><li>声明事务的支持</li><li>方便程序测试</li><li>继承各种优秀框架</li><li>降低Java EE API的使用难度</li></ol><h3 id="2-核心概念"><a href="#2-核心概念" class="headerlink" title="2.核心概念"></a>2.核心概念</h3><ol><li>IoC: Inversion of Control 控制反转 (通过反射机制创建对象实例)</li><li>DI: Dependency Injection  依赖注入(将bean之间的关系交给spring容器管理,我们可以在service注入dao层的实例,controller中注入service层实例)</li><li>AOP: Aspect Oriented Programming  面向切面(通过JDK动态代理和CGlib动态代理实现)</li></ol><h3 id="3-Spring组成"><a href="#3-Spring组成" class="headerlink" title="3.Spring组成"></a>3.Spring组成</h3><p>Spring框架的功能大概由20多个模块组成,这些模块按组可以分为以下几部分</p><p><strong>| 核心容器 | 数据访问/集成 | WEB | AOP | 设备 | 消息 | 测试 |</strong></p><p>​    核心模块:Beans Core Context spEL对应项目初始化时需要的四个核心包<br><img src="https://i.imgur.com/4dxxIk6.png" alt="Spring架构"></p><h3 id="4-Spring说明"><a href="#4-Spring说明" class="headerlink" title="4.Spring说明"></a>4.Spring说明</h3><ol><li><strong>bean元素:需要spring管理的对象,是Spring中最基础的单位(包括数据源/SessionFactory/事务管理等)</strong></li><li><strong>class属性: 需要spring管理对象的全类名</strong></li><li><strong>name属性:给被管理者起个引用名,根据该引用名就可以使用该对象(bean对象的标识)</strong></li><li>id属性:bean对象的唯一标识(和name的区别是整个spring中不可重复)</li><li><strong>lazy-init:是否延时加载,默认false(开启后只对单例有效)</strong></li><li>init-method:对象初始化方法</li><li>destory:对象销毁方法</li><li>scope:<strong>singleton</strong>(默认,适用实际开发的大部分情况)还是<strong>prototype</strong></li></ol><h4 id="1-Spring管理对象原理"><a href="#1-Spring管理对象原理" class="headerlink" title="1.Spring管理对象原理"></a>1.Spring管理对象原理</h4><h5 id="1-Spring容器"><a href="#1-Spring容器" class="headerlink" title="1.Spring容器"></a>1.Spring容器</h5><p>Spring要管理对象,就需要把对象加入到自己的容器中</p><p><strong>Spring容器</strong>是Spring的核心,主要的责任便是<strong>管理Spring中java的组件</strong></p><ol><li>对象加入到Spring容器的三种方法(依赖注入) <strong>|无参构造+setter注入|有参构造方法注入|动静态工厂注入|</strong></li><li>使用bean对象时,实例化容器的两种方法<strong>|ClassPathXml..xml实例化|FileSystem…绝对路径实例化|</strong></li><li>ApplicationContext容器实例化后,默认会实例化内部的所有bean,通过getBean即可获取bean对象的使用权</li></ol><h5 id="2-Spring容器与对象Bean"><a href="#2-Spring容器与对象Bean" class="headerlink" title="2.Spring容器与对象Bean"></a>2.Spring容器与对象Bean</h5><p>通常情况下,Bean是被动的接收Spring容器创建的实例,具有使用权,即Bean不对Spring进行访问</p><p>如果想让Bean对Spring进行访问,则需要手动配置,让Bean实现<strong>BeanFactoryAware </strong>接口…</p><p><strong>该操作非常不推荐,污染代码,使Bean和Spring耦合在一起,若非特别需要,否则不要用</strong></p><h5 id="3-Spring容器中Bean的继承特性与Java中继承区别"><a href="#3-Spring容器中Bean的继承特性与Java中继承区别" class="headerlink" title="3.Spring容器中Bean的继承特性与Java中继承区别"></a>3.Spring容器中Bean的继承特性与Java中继承区别</h5><p>spring中可以使用抽象bean,即abstract 属性为true,抽象bean不能被实例化,作用是<strong>Spring中的继承</strong></p><p><strong>spring中的继承:</strong></p><p>主要用于bean的数量越来越多,许多属性配置冗余,此时可以使用继承</p><p><strong>spring的继承无法继承如下属性:</strong></p><ul><li>depends-on,aotuwirwe,dependency-check,singleton,scope,lazy-iniyt这些属性总是子Bean定义，或采用默认值。 </li></ul><p><strong>Bean继承与java中继承的区别： </strong></p><ul><li>Spring中的子bean和父Bean可以是不同类型，但java中的继承则可保证子类是一种特殊的父类； </li><li>Spring中的Bean的继承是实例之间的关系，因此只要表现在参数值的延续，而java中的继承是类之间的关系，主要表现为方法、属性之间的延续； </li><li>Spring中的子Bean不可以作为父Bean使用，不具备多态性，java中的子类完全可以当成父类使用。 </li></ul><h5 id="4-Spring容器中Bean模式的生命周期"><a href="#4-Spring容器中Bean模式的生命周期" class="headerlink" title="4.Spring容器中Bean模式的生命周期"></a>4.Spring容器中Bean模式的生命周期</h5><p><strong>singleton：</strong> Spring容器能够准确的追踪其创建/使用/销毁</p><p><strong>prototype：</strong>Spring容器仅负责其创建,无法追踪其使用和销毁,每次创建后都会委托给客户端,不再对其追踪 </p><h5 id="5-强制初始化Bean-使用较少"><a href="#5-强制初始化Bean-使用较少" class="headerlink" title="5.强制初始化Bean(使用较少)"></a>5.强制初始化Bean(使用较少)</h5><p>Spring有一个默认的规则，总是先初始化主调Bean，然后在初始化依赖Bean。<br>为了指定Bean在目标Bean之前初始化，可以使用depends-on属性</p><h5 id="6-自动装配"><a href="#6-自动装配" class="headerlink" title="6.自动装配"></a>6.自动装配</h5><ul><li>Spring能自动装配Bean与Bean之间的依赖关系，即使无需使用ref显式指定依赖Bean。</li><li>自动装配可以减少配置文件的工作量，但是降低了依赖关系的透明性和依赖性。</li><li>可以根据指定属性值类型来缩小自动装配的范围(很少指定)</li><li><strong>| no | byName | byType | constructor | autodetect | </strong></li></ul><h5 id="7-依赖检察-使用较少"><a href="#7-依赖检察-使用较少" class="headerlink" title="7.依赖检察(使用较少)"></a>7.依赖检察(使用较少)</h5><p>Spring提供一种依赖检查的功能，可以防止出现配置手误，或者其他情况的错误。<br>dependency-check=”all” 该属性值可以为<strong>| none | simple | objects | all | </strong></p><h4 id="2-Spring核心机制-IoC-DI"><a href="#2-Spring核心机制-IoC-DI" class="headerlink" title="2.Spring核心机制:IoC/DI"></a>2.Spring核心机制:IoC/DI</h4><p>无论是<strong>IoC</strong>(控制反转) 还是<strong>DI</strong>(依赖注入),其含以上是互相包容的,在控制反转时便实现依赖注入</p><ul><li><strong>传统方法:</strong>当一个java实例(A)需要调用另一个java实例(B)时,需要在A中new一个B来构建</li><li><strong>Spring管理中:</strong>B对象的创建交给了Spring来管理(控制反转) | 将B对象注入给A对象的过程称为(依赖注入)</li></ul><h4 id="4-Spring-AOP"><a href="#4-Spring-AOP" class="headerlink" title="4.Spring AOP"></a>4.Spring AOP</h4><h5 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h5><p> <strong>AOP</strong>（Aspect Oriented Programming），即面向切面编程，基于<strong>面向过程</strong></p><p>是<strong>OOP</strong>（Object Oriented Programming，面向对象编程）的补充和完善。 </p><p><strong>(OOP无法关注到程序的切入点,AOP具有更强大的切面控制力)</strong></p><p>例如:</p><ul><li>面向对象的流程是用户注册信息,然后插入到数据库中<br>   面向切面的流程是用户注册信息,在插入数据库前进行控    制,在插入数据库后进行控制</li></ul><p><strong>AOP使用横切技术,把软件系统分成两部分</strong><br><strong>核心关注点</strong>,特点:纵向关系为主,建立对象层次结构<br><strong>横切关注点</strong>,特点:横向关系为主,分布在核心关注点的周围,能够切开封装对象,对内部重复的部分进行重新封装,降低耦合性,如权限认证、日志、事务,AOP可以分离系统中的关注点,达到更高效的开发和运行</p><h5 id="2-五种横切方案"><a href="#2-五种横切方案" class="headerlink" title="2.五种横切方案"></a>2.五种横切方案</h5><ol><li><p>前置通知</p></li><li><p>后置正常通知</p></li><li>后置异常通知</li><li>后置始终通知</li><li>环绕通知</li></ol><h5 id="3-八大核心概念"><a href="#3-八大核心概念" class="headerlink" title="3.八大核心概念"></a>3.八大核心概念</h5><ol><li><p>Joinpoint 连接点<br> AOP执行程序的特定位置</p></li><li><p>PointCut 切点<br> AOP通过切点来确定特定的连接点位置</p></li><li><p>Advice 增强<br> 织入目标类连接点上的一段代码,可以描述程序,也可以确定方位,</p><pre><code>只有通过切点信息和方位信息,才能确定特定连接点并执行增强逻辑</code></pre></li><li><p>Target 目标对象<br> 增强逻辑的织入目标类</p></li><li><p>Introduction 引介<br> 特殊增强,给指定类添加属性和方法,也可以动态的添加接口的实现业务逻辑</p></li><li><p>weaving 织入</p><p> 增强 添加到 目标类 的 连接点 的过程,将目标,增强和引介很好的结合在了一起,AOP常用的三种织入技术</p><pre><code>编译期织入,这要求使用特殊的Java编译器.</code></pre><p> ​        类装载期织入,这要求使用特殊的类装载器.</p><p> ​        动态代理织入,在运行期为目标类添加增强生成子类的方式.</p><pre><code>Spring采用动态代理织入,而AspectJ采用编译期织入和类装载器织入.</code></pre></li><li><p>Proxy  代理</p><p> 目标被增强织入后生成一个新的代理类,该代理类可能和原类是一个接口,也可能是原类的子类,可以采用和原类相同的方法调用</p></li><li><p>Aspect 切面</p><p> 由增强和切点组成, [既包含横切逻辑的定义,也包括连接点的定义] ,能够把这两种定义织入到指定连接点中</p></li></ol><h5 id="4-AOP底层调用的两种代理机制"><a href="#4-AOP底层调用的两种代理机制" class="headerlink" title="4.AOP底层调用的两种代理机制"></a>4.AOP底层调用的两种代理机制</h5><ul><li><strong>JDK动态代理:</strong>针对接口类产生代理</li><li><strong>CGlib动态代理:</strong>针对没有实现接口的类产生代理,应用的是底层字节码增强技术,生成当前类的子类对象</li></ul><h3 id="5-Spring父子容器"><a href="#5-Spring父子容器" class="headerlink" title="5.Spring父子容器"></a>5.Spring父子容器</h3><p>Spring父容器(ContextLoaderListener)一般配置的是Dao层和Service层，而Spring子容器(DispatcherServlet)一般配置的是Controller层父子容器的访问关系是:</p><p><strong>子容器可以访问父容器中的对象，但是父容器无法访问子容器中的对象。比如controller可以把Dao和Service注入进来，但是Dao和Service无法把Controller注进来。</strong> </p><p><img src="https://i.imgur.com/1v6FUty.png" alt=""></p><p> 我们在service配置扫描包的时候配置的扫描范围是”com.taotao.service”，如果我们配置成com.taotao，那么就会把com.taotao.controller也扫描到父容器中，这样父子容器中就都有controller层了，但是在<strong>父容器中扫进来controller是没有用的</strong>，我们在表现层访问的时候，访问的还是子容器的controller。同理，如果把子容器的扫描范围扩大，变为com.taotao，那么它便会把Dao和Service也扫描到子容器当中，这样当我们访问表现层的时候，访问的便是子容器中的Dao和Service，<strong>子容器中的Dao和Service是没有事务的</strong>，但是父容器中的Dao和Service是有事务的，这样就会导致虽然我们在父容器中配置了事务，但由于子容器扫描范围太大，而导致访问子容器中的Dao和Service没有事务的问题。 </p><h3 id="6-Spring深入拓展"><a href="#6-Spring深入拓展" class="headerlink" title="6.Spring深入拓展"></a>6.Spring深入拓展</h3><h4 id="1-利用后处理器扩展Spring容器…"><a href="#1-利用后处理器扩展Spring容器…" class="headerlink" title="1.利用后处理器扩展Spring容器…"></a>1.利用后处理器扩展Spring容器…</h4><h4 id="2-Spring的“零配置”支持-注解"><a href="#2-Spring的“零配置”支持-注解" class="headerlink" title="2.Spring的“零配置”支持(注解)"></a>2.Spring的“零配置”支持(注解)</h4><pre><code>**| Component | Controller | Service | Repository | Scope | Resource | Autowired | Qualifier | JsonIgnore |**</code></pre><h4 id="3-资源访问…"><a href="#3-资源访问…" class="headerlink" title="3.资源访问…"></a>3.资源访问…</h4><p><strong>深入拓展传送门:<a href="https://www.cnblogs.com/shijiaoyun/p/7458341.html" target="_blank" rel="noopener">https://www.cnblogs.com/shijiaoyun/p/7458341.html</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring基础原理&quot;&gt;&lt;a href=&quot;#Spring基础原理&quot; class=&quot;headerlink&quot; title=&quot;Spring基础原理&quot;&gt;&lt;/a&gt;Spring基础原理&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-Spring概念&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Spring全家桶" scheme="http://yoursite.com/categories/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>javaSE-集合</title>
    <link href="http://yoursite.com/2018/03/23/javaSE-%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2018/03/23/javaSE-集合/</id>
    <published>2018-03-22T16:00:00.000Z</published>
    <updated>2018-08-05T10:47:04.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaSE-集合基础"><a href="#JavaSE-集合基础" class="headerlink" title="JavaSE-集合基础"></a>JavaSE-集合基础</h2><p>[TOC]</p><h3 id="1-集合的并发问题"><a href="#1-集合的并发问题" class="headerlink" title="1.集合的并发问题"></a>1.集合的并发问题</h3><p> <strong>Java快速失败与安全失败迭代器 : </strong></p><p><strong>java迭代器提供了遍历集合对象的功能</strong>，集合返回的迭代器有快速失败型的也有安全失败型的，快速失败迭代器在迭代时如果集合类被修改，立即抛出ConcurrentModificationException异常，而安全失败迭代器不会抛出异常，因为它是在集合类的克隆对象上操作的。  </p><p><strong>java快速失败迭代器 : </strong>大多数集合类返回的快速失败迭代器在<strong>遍历时不允许结构性修改</strong>（结构性修改指添加，删除和更新一个元素）<strong>当遍历的同时被结构性修改，</strong>会改变modCount的值, <strong>就会抛出ConcurrentModificationException异常</strong>，而当集合是被迭代器自带的方法（如remove()）修改时，不会抛出异常。 </p><p><strong>java安全失败迭代器 :</strong> 安全失败迭代器在迭代中被修改，不会抛出任何异常，因为它是<strong>在集合的克隆对象迭代</strong>的，所以<strong>任何对原集合对象的结构性修改都会被迭代器忽略</strong>，但是这类迭代器有一些缺点，其一是它<strong>不能保证你迭代时获取的是最新数据</strong>，因为迭代器创建之后对集合的任何修改都不会在该迭代器中更新，还有一个缺点就是<strong>创建克隆对象在时间和内存上都会增加一些负担</strong>。 </p><p><strong>集合对并发问题集成了一个并发包ConcurrentModificationException</strong></p><h3 id="2-java中的同步容器"><a href="#2-java中的同步容器" class="headerlink" title="2.java中的同步容器"></a>2.java中的同步容器</h3><p>在java中,同步容器主要包括2类</p><ol><li>Vector | Stack | HashTable</li><li><strong>Collections</strong>类中提供的静态工厂方法创建的类</li></ol><p><strong>Vector</strong>实现了List接口,Vector实际上是一个数组,和ArrayList类似,但是Vector中的方法都是synchronized线程同步,即进行了同步措施.</p><p><strong>Stack</strong>继承了Vector,也是一个同步容器,它的方法也是synchronized线程同步</p><p><strong>HashTable</strong>实现Map接口,他和HashMap很相似,但是HashTable中使用synchronized线程同步,而HashMap是不安全的</p><hr><p><strong>Collections</strong>类是一个工具提供类，注意，它和Collection不同，</p><p><strong>Collection</strong>是一个顶层的接口。</p><p>在Collections类中提供了大量的方法，比如对集合或者容器进行排序、查找等操作。最重要的是，在它里面提供了几个<strong>静态工厂方法来创建同步容器类</strong></p><hr><h3 id="3-单项链表的增删"><a href="#3-单项链表的增删" class="headerlink" title="3.单项链表的增删"></a>3.单项链表的增删</h3><p>链表的增删原理需要注意,重点<strong>因为存储空间并非连续存在,不能在改变链表结构时使其断开,否则将难以再次找到到原来的标记</strong></p><p><img src="https://i.imgur.com/KCi2UAD.png" alt=""></p><p><strong>增加</strong></p><ol><li>a的next改为a1的next</li><li>a1的next改为a</li></ol><p><strong>删除</strong></p><ol><li>a1的next改为a2的next</li><li>a2的值赋给e</li><li>释放a2</li></ol><h3 id="4-ArrayList相关"><a href="#4-ArrayList相关" class="headerlink" title="4.ArrayList相关"></a>4.ArrayList相关</h3><h4 id="4-1-ArrayList线程安全问题"><a href="#4-1-ArrayList线程安全问题" class="headerlink" title="4-1.ArrayList线程安全问题"></a>4-1.ArrayList线程安全问题</h4><p>ArrayList本身是线程不安全的,如果在多线程情况下使用可以考虑一下两种方案</p><ol><li>Collections.synchronizedList(List list)方法返回一个线程安全的ArrayList类</li><li>concurrent并发包下的CopyOneWriteArrayList类</li></ol><h4 id="4-2-ArrayList实现的部分接口"><a href="#4-2-ArrayList实现的部分接口" class="headerlink" title="4-2.ArrayList实现的部分接口"></a>4-2.ArrayList实现的部分接口</h4><p>ArrayList实现了List接口,继承了AbstractList (维持集合结构的本身需求)</p><p>ArrayList实现了Serialization接口,可以序列化传输</p><p>ArrayList实现了RandomAccess接口,支持快速随机访问(实际上通过下标实现快速随机访问)</p><p> ArrayList实现了Cloneable接口,可以被克隆</p><h4 id="4-3-扩容的选择"><a href="#4-3-扩容的选择" class="headerlink" title="4-3.扩容的选择"></a>4-3.扩容的选择</h4><p>集合中的结构都支持自动扩容</p><p>如ArrayList的扩容机制是<strong>1.5</strong>倍(1.6和1.7的区别(16/15))</p><p>ArrayList可以指定初始大小也可以默认(10个单位),使用时可以根据业务需求,通过构造设置初始容量,</p><ul><li>这里考虑的因素是集合自动扩容对性能的一个损耗,如果提前知道集合内元素的大概数量,那么初始容量可以设置大一些,从而减少自动扩容的损耗</li><li>也可以通过ensureCapacity方法来指定扩容的长度(使用场景了解较少)</li></ul><h4 id="4-4-数组的底层实现"><a href="#4-4-数组的底层实现" class="headerlink" title="4-4.数组的底层实现"></a>4-4.数组的底层实现</h4><p><strong>数组的引用+下标*数组数据类型的大小—&gt;获得该元素的数据内容</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JavaSE-集合基础&quot;&gt;&lt;a href=&quot;#JavaSE-集合基础&quot; class=&quot;headerlink&quot; title=&quot;JavaSE-集合基础&quot;&gt;&lt;/a&gt;JavaSE-集合基础&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-集合的并发问题&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="SE基础" scheme="http://yoursite.com/categories/SE%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVAEE-继承</title>
    <link href="http://yoursite.com/2018/02/06/javaSE-%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2018/02/06/javaSE-继承/</id>
    <published>2018-02-05T16:00:00.000Z</published>
    <updated>2018-07-29T13:35:18.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JAVAEE-继承"><a href="#JAVAEE-继承" class="headerlink" title="JAVAEE-继承"></a>JAVAEE-继承</h2><h3 id="1-通过继承扩展POJO"><a href="#1-通过继承扩展POJO" class="headerlink" title="1.通过继承扩展POJO"></a>1.通过继承扩展POJO</h3><p>子类扩展父类时,可以使用该方式</p><p>注入父类属性并进行扩展(注意父类需要有无参构造)</p><p>当多模块时,特殊的pojo有可能出现<strong>模块间循环依赖问题</strong>,那么根据业务情况可以使用如下方法,配在对应位置(非Common)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.e3mall.pojo.TbItem;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DonY15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018\7\28 0028</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">extends</span> <span class="title">TbItem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过构造注入父类属性值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Item</span><span class="params">(TbItem item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setId( item.getId());</span><br><span class="line">        <span class="keyword">this</span>.setTitle(item.getTitle());</span><br><span class="line">        <span class="keyword">this</span>.setSellPoint(item.getSellPoint());</span><br><span class="line">        <span class="keyword">this</span>.setPrice( item.getPrice());</span><br><span class="line">        <span class="keyword">this</span>.setNum(item.getNum()) ;</span><br><span class="line">        <span class="keyword">this</span>.setBarcode(item.getBarcode());</span><br><span class="line">        <span class="keyword">this</span>.setImage( item.getImage());</span><br><span class="line">        <span class="keyword">this</span>.setCid( item.getCid());</span><br><span class="line">        <span class="keyword">this</span>.setStatus(item.getStatus()) ;</span><br><span class="line">        <span class="keyword">this</span>.setCreated( item.getCreated());</span><br><span class="line">        <span class="keyword">this</span>.setUpdated( item.getUpdated()) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对TbItem扩展,将图片字符串转为字符串数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String[] getImages() &#123;</span><br><span class="line">        String image = <span class="keyword">this</span>.getImage();</span><br><span class="line">        <span class="keyword">if</span> (image!=<span class="keyword">null</span>&amp;&amp;!<span class="string">""</span>.equals(image))&#123;</span><br><span class="line">            String[] split = image.split(<span class="string">","</span>);</span><br><span class="line">            <span class="keyword">return</span> split;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JAVAEE-继承&quot;&gt;&lt;a href=&quot;#JAVAEE-继承&quot; class=&quot;headerlink&quot; title=&quot;JAVAEE-继承&quot;&gt;&lt;/a&gt;JAVAEE-继承&lt;/h2&gt;&lt;h3 id=&quot;1-通过继承扩展POJO&quot;&gt;&lt;a href=&quot;#1-通过继承扩展POJO&quot;
      
    
    </summary>
    
      <category term="SE基础" scheme="http://yoursite.com/categories/SE%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Nginx基础原理</title>
    <link href="http://yoursite.com/2018/02/04/Nginx%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/02/04/Nginx基础原理/</id>
    <published>2018-02-03T16:00:00.000Z</published>
    <updated>2018-07-29T14:18:18.125Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Nginx基础原理"><a href="#Nginx基础原理" class="headerlink" title="Nginx基础原理"></a>Nginx基础原理</h3><p>[TOC]</p><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><p>面向性能设计的<strong>Http服务器</strong>,内存占用少,稳定性高,也是轻量级的<strong>网页服务器/反向代理服务器/电子邮件代理服务器</strong>等</p><p><strong>Nginx单独使用足以支撑5W的并发连接,可以作为负载均衡的入口,根据使用情况来分发给不同的tomcat</strong></p><p><strong>百度、京东、新浪、网易、腾讯、淘宝等都在使用Nginx</strong></p><h4 id="2-组成"><a href="#2-组成" class="headerlink" title="2.组成"></a>2.组成</h4><p>Nginx由<strong>内核</strong>和<strong>模块</strong>组成，其中，内核的设计非常微小和简洁，完成的工作也非常简单，仅仅通过查找配置文件将客户端请求映射到一个location block（<strong>location是Nginx配置中的一个指令，用于URL匹配</strong>），而在这个location中所配置的每个指令将会<strong>启动不同的模块</strong>去完成相应的工作。</p><p><strong>Nginx的模块从结构上分为核心模块、基础模块和第三方模块：</strong></p><p>​    核心模块：HTTP模块、EVENT模块和MAIL模块</p><p>​    基础模块：HTTP Access模块、HTTP FastCGI模块、HTTP Proxy模块和HTTP Rewrite模块，</p><p>​    第三方模块：HTTP Upstream Request Hash模块、Notice模块和HTTP Access Key模块。</p><p>用户根据自己的需要开发的模块都属于第三方模块。正是有了这么多模块的支撑，Nginx的功能才会如此强大。</p><p><strong>Nginx原理和优化:<a href="https://www.cnblogs.com/linguoguo/p/5511293.html(很棒的文章)" target="_blank" rel="noopener">https://www.cnblogs.com/linguoguo/p/5511293.html(很棒的文章)</a></strong></p><h4 id="3-作用"><a href="#3-作用" class="headerlink" title="3.作用"></a>3.作用</h4><ol><li>反向代理:位于原始服务器<strong>后面</strong>,客户端访问原始服务器后,原始服务器会去反向代理服务器获取需要的资源(服务器端)</li><li>正向代理:位于客户端和原始服务器<strong>之间</strong>,客户端请求该代理服务器,该代理服务器再去访问原始服务器,响应原路返回(客户端,局域网访问网络)</li></ol><p>正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。 </p><p>正向代理还可以使用缓冲特性减少网络使用率。 </p><p>反向代理的典型用途是将防火墙后面的服务器提供给Internet用户访问。 </p><p>反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。 </p><ol><li>负载均衡:Nginx最常用的功能之一,将工作分摊多个操作单元上执行,需要反向代理跳转到负载均衡</li><li>HTTP服务器:Nginx本身就是静态资源服务器,Nginx可以很方便的实现<strong>动静分离</strong></li></ol><p><strong>动静分离:</strong> nginx还可以对数据进行压缩，对一些图片、html、css、js等文件进行缓存、从而实现动静分离等等优化功能，在网站做优化的时候非常的有用。 </p><ul><li>所谓的动静分离，可以理解为我们完全可以将动态的请求都交给tomcat处理，静态的请求都交给nginx来处理，这是非常容易做到的事情。 </li></ul><p><strong>Nginx基础功能和工作原理:<a href="https://blog.csdn.net/wy757510722/article/details/75267431(很棒的文章)" target="_blank" rel="noopener">https://blog.csdn.net/wy757510722/article/details/75267431(很棒的文章)</a></strong></p><p>(待更新)</p><h4 id="4-Nginx配置详细清单"><a href="#4-Nginx配置详细清单" class="headerlink" title="4.Nginx配置详细清单"></a>4.Nginx配置详细清单</h4><ol><li>server 配置静态资源 端口或者域名区分</li><li>proxy_pass 配置反向代理</li><li>upstream 配置负载均衡及权重</li></ol><p><strong>端口版:<a href="http://www.cnblogs.com/dancesir/p/9253043.html" target="_blank" rel="noopener">http://www.cnblogs.com/dancesir/p/9253043.html</a></strong></p><p><strong>集群搭建:<a href="https://blog.csdn.net/u012453843/article/details/69664821" target="_blank" rel="noopener">https://blog.csdn.net/u012453843/article/details/69664821</a></strong></p><h4 id="5-Nginx负载均衡策略"><a href="#5-Nginx负载均衡策略" class="headerlink" title="5.Nginx负载均衡策略"></a>5.Nginx负载均衡策略</h4><p>对于单独的Nginx而言,通过Nginx服务器搭建Tomcat等服务器集群(可以设置权重)可以提高基础的并发</p><h4 id="6-Keepalived结合Nginx实现高可用"><a href="#6-Keepalived结合Nginx实现高可用" class="headerlink" title="6.Keepalived结合Nginx实现高可用"></a>6.Keepalived结合Nginx实现高可用</h4><ol><li>Keepalived绑定Nginx主从服务器的健康状态,<strong>备份服务器</strong>通过心跳机制检测主服务器是否ok(心跳包)</li><li>Keepalived可以绑定vip(Virtual IP Address)动态绑定虚拟IP,在谁身上就用谁(一般发到主服务器)</li><li>主服务器宕机的时候,备份服务器会和keepalived绑定(<strong>主服务器起来后重新获得vip</strong>)</li></ol><p><img src="https://i.imgur.com/ZHJPqzk.png" alt=""></p><p><strong>Keepalived结合高可用使用:<a href="https://blog.csdn.net/u012453843/article/details/69668663" target="_blank" rel="noopener">https://blog.csdn.net/u012453843/article/details/69668663</a></strong></p><h4 id="7-负载均衡策略"><a href="#7-负载均衡策略" class="headerlink" title="7.负载均衡策略"></a>7.负载均衡策略</h4><h5 id="当并发超过Nginx上限的处理-应用层"><a href="#当并发超过Nginx上限的处理-应用层" class="headerlink" title="当并发超过Nginx上限的处理(应用层)"></a>当并发超过Nginx上限的处理(应用层)</h5><h5 id="7-1-F5硬负载-4层分发"><a href="#7-1-F5硬负载-4层分发" class="headerlink" title="7-1.F5硬负载(4层分发)"></a>7-1.F5硬负载(4层分发)</h5><p><strong>(经费充足)如果并发超过5W,可以处理硬负载并发问题(从传输层开始处理,效果更好)</strong></p><h5 id="7-2-LVS-Linux-Virtual-Server-4层分发"><a href="#7-2-LVS-Linux-Virtual-Server-4层分发" class="headerlink" title="7-2.LVS(Linux Virtual Server)(4层分发)"></a>7-2.LVS(Linux Virtual Server)(4层分发)</h5><p><strong>(经济实惠)实现硬负载60%的性能</strong></p><h5 id="7-3-使用阿里云服务器均衡负载SLB"><a href="#7-3-使用阿里云服务器均衡负载SLB" class="headerlink" title="7-3.使用阿里云服务器均衡负载SLB"></a>7-3.使用阿里云服务器均衡负载SLB</h5><h4 id="8-Keepalived结合LVS实现高可用"><a href="#8-Keepalived结合LVS实现高可用" class="headerlink" title="8.Keepalived结合LVS实现高可用"></a>8.Keepalived结合LVS实现高可用</h4><p>(类似Keepalived和Nginx的高可用)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Nginx基础原理&quot;&gt;&lt;a href=&quot;#Nginx基础原理&quot; class=&quot;headerlink&quot; title=&quot;Nginx基础原理&quot;&gt;&lt;/a&gt;Nginx基础原理&lt;/h3&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h4 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; cl
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
</feed>
