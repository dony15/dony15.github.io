<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DonY15</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-05T16:02:14.852Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>宝全哥哥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kafka基础</title>
    <link href="http://yoursite.com/2018/09/05/kafka%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/05/kafka基础/</id>
    <published>2018-09-04T16:00:00.000Z</published>
    <updated>2018-09-05T16:02:14.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kafka基础"><a href="#Kafka基础" class="headerlink" title="Kafka基础"></a>Kafka基础</h2><p>[TOC]</p><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>基于发布/订阅的消息系统(类似JMS特性,但设计实现却不同)</p><p>分布式/可分区/可复制/日志服务</p><p>官方文档↓</p><p><a href="http://kafka.apache.org/documentation.html" target="_blank" rel="noopener">http://kafka.apache.org/documentation.html</a></p><h3 id="2-场景"><a href="#2-场景" class="headerlink" title="2.场景"></a>2.场景</h3><h4 id="1-Messaging-常规消息"><a href="#1-Messaging-常规消息" class="headerlink" title="1.Messaging 常规消息"></a><strong>1.Messaging 常规消息</strong></h4><p>对于一些常规的消息系统,kafka是个不错的选择;partitons/replication和容错,可以使kafka具有良好的扩展性和性能优势.不过到目前为止,我们应该很清楚认识到,kafka并没有提供JMS中的”事务性””消息传输担保(消息确认机制)””消息分组”等企业级特性;kafka只能使用作为”常规”的消息系统,在一定程度上,尚未确保消息的发送与接收绝对可靠(比如,消息重发,消息发送丢失等)</p><h4 id="2-Websit-activity-tracking-网站活动追踪的最佳工具"><a href="#2-Websit-activity-tracking-网站活动追踪的最佳工具" class="headerlink" title="2.Websit activity tracking  网站活动追踪的最佳工具"></a><strong>2.Websit activity tracking  网站活动追踪的最佳工具</strong></h4><p>可以将网页/用户操作等信息发送到kafka中.并实时监控,或者离线统计分析等</p><h4 id="3-Log-Aggregation-日志收集中心"><a href="#3-Log-Aggregation-日志收集中心" class="headerlink" title="3.Log Aggregation 日志收集中心"></a><strong>3.</strong>Log Aggregation 日志收集中心</h4><p> kafka的特性决定它非常适合作为”日志收集中心”;application可以将操作日志”批量””异步”的发送到kafka集群中,而不是保存在本地或者DB中;kafka可以批量提交消息/压缩消息等,这对producer端而言,几乎感觉不到性能的开支.此时consumer端可以使hadoop等其他系统化的存储和分析系统.</p><h3 id="3-结构"><a href="#3-结构" class="headerlink" title="3.结构"></a>3.结构</h3><h4 id="producer-提供者"><a href="#producer-提供者" class="headerlink" title="producer:提供者"></a><strong>producer:提供者</strong></h4><p>将消息发布到Topic中,同时将决定该消息属于哪个Partition,比如基于”round-robin”方式或者通过其他的一些算法等.</p><h4 id="consumer-消费者"><a href="#consumer-消费者" class="headerlink" title="consumer:消费者"></a><strong>consumer:消费者</strong></h4><p>每个Consumer都属于一个Consumer Group;</p><p>Consumer Group中可以存在多个Consumer;</p><p>Topic中的一个消息,只会被Group中的一个Consumer订阅;</p><p>即:</p><ol><li>如果只有一个Consumer Group且组内有多个Consumer,那么相当于queue模式,消息会在group内负载均衡</li><li>如果有多个Consumer Group且组内只有一个Consumer,那么相当于topic模式,消息将会发布给所有Consumer</li></ol><p>注意,一个partition内部<strong>不允许并发</strong>,组内如果有多于partition的consumer存在,将会有接受不到消息的consumer</p><p>建议partition数量为Consumer的<strong>倍数</strong>,这样可以提高性能和合理负载</p><h4 id="topic-主题"><a href="#topic-主题" class="headerlink" title="topic:主题"></a><strong>topic:主题</strong></h4><p>逻辑上的概念,消息类别,物理上存在的是partition</p><h4 id="partition-区"><a href="#partition-区" class="headerlink" title="partition:区"></a><strong>partition:区</strong></h4><p>一个topic可以有多个partition区,每个partition都有存储xxx.log文件,</p><p>任何发布到此partition的消息都会append到log文件中,如</p><p>00000000000.log</p><p>00000000001.log</p><p>00000000002.log</p><p>每次的<strong>Record</strong>消息都拥有<strong>offset</strong>偏移量(下标) 0 ,1, 2, 3, 4…相对于partition内的<strong>有序队列</strong></p><h4 id="offset-偏移量"><a href="#offset-偏移量" class="headerlink" title="offset: 偏移量"></a><strong>offset: 偏移量</strong></h4><p>每个partition中消息的偏移量,partition间互不影响,kafka通过offset来使用,时间复杂度为O(1),效率飞铲高</p><h4 id="Record-消息"><a href="#Record-消息" class="headerlink" title="Record:消息"></a><strong>Record:消息</strong></h4><p>每一条消息都由Key/value和时间戳构成</p><h4 id="broker-Server"><a href="#broker-Server" class="headerlink" title="broker: Server"></a>broker: Server</h4><p>kafka和JMS不同的是,即使消息被消费,也不会立马消失,会根据broker中的日志配置,如配置了两天后删除,那么无论消息是否被消费,两天后都会被清除</p><h4 id="Distribution-分布"><a href="#Distribution-分布" class="headerlink" title="Distribution:分布"></a><strong>Distribution:分布</strong></h4><p>一个Topic可以有多个partition,每个partition都可以分配到集群的<strong>broker</strong>(负责partition读写操作)中,</p><p><strong>broker</strong>中可以配置partition备份个数(<strong>Replicated</strong>),来完成<strong>负载均衡/高可用</strong></p><h4 id="Replicated-备份"><a href="#Replicated-备份" class="headerlink" title="Replicated:备份"></a><strong>Replicated:备份</strong></h4><p>基于partition的备份,可以备份在多个Server中</p><h4 id="Guarantees-担保"><a href="#Guarantees-担保" class="headerlink" title="Guarantees:担保"></a><strong>Guarantees:担保</strong></h4><p>1.发送到partition中的消息,将会按照他接受的消息追加到日志中</p><p>2.对于消费者而言,消息的接受顺序和日志的追加顺序保持一致</p><p><strong>3.如果Topic中的 replicationfactor(复制因子) 为N ,那么允许N-1个实例失效(待深入)</strong></p><hr><p><strong>精华传送门,入门+原理+配置说明</strong></p><p><strong><a href="https://www.cnblogs.com/likehua/p/3999538.html" target="_blank" rel="noopener">https://www.cnblogs.com/likehua/p/3999538.html</a></strong></p><hr><h3 id="4-Java-服务器中的使用"><a href="#4-Java-服务器中的使用" class="headerlink" title="4.Java/服务器中的使用"></a>4.Java/服务器中的使用</h3><p>详细使用代码地址</p><p><a href="https://www.2cto.com/kf/201804/739331.html" target="_blank" rel="noopener">https://www.2cto.com/kf/201804/739331.html</a></p><h4 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h4><h5 id="4-1-Maven依赖"><a href="#4-1-Maven依赖" class="headerlink" title="4-1.Maven依赖"></a>4-1.Maven依赖</h5><h5 id="4-2-Producer"><a href="#4-2-Producer" class="headerlink" title="4.2.Producer"></a>4.2.Producer</h5><ol><li>Producer发布消息</li><li>producer拦截器</li><li>Producer自定义路由规则</li></ol><h5 id="4-3-Consumer"><a href="#4-3-Consumer" class="headerlink" title="4-3.Consumer"></a>4-3.Consumer</h5><ol><li>自动提交</li><li>手动提交</li><li>自定义Consumer拦截器</li><li>定义offset,提交回调方法</li></ol><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a><strong>服务器</strong></h4><ol><li>开启zookeeper（在安装目录下使用命令）</li><li>启动kafka（安装目录下使用命令）</li><li>创建topic</li><li>删除topic</li><li>查看topic名称列表</li><li>查看topic详情</li><li>创建Consumer</li><li>创建Producer</li><li>查询topic所有分区的offset值</li><li>查询kafka集群当前topic所有分区中的消息数目</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Kafka基础&quot;&gt;&lt;a href=&quot;#Kafka基础&quot; class=&quot;headerlink&quot; title=&quot;Kafka基础&quot;&gt;&lt;/a&gt;Kafka基础&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker容器基础</title>
    <link href="http://yoursite.com/2018/09/05/Docker%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/05/Docker容器基础/</id>
    <published>2018-09-04T16:00:00.000Z</published>
    <updated>2018-09-05T15:53:42.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker容器基础"><a href="#Docker容器基础" class="headerlink" title="Docker容器基础"></a>Docker容器基础</h2><p>[TOC]</p><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>先进的软件管理容器引擎,统一文件系统</p><p><strong>基本概念</strong></p><p><strong>镜像</strong> Image</p><p><strong>容器</strong> Container </p><p><strong>仓库</strong> Repository</p><p>数据卷</p><h3 id="2-结构"><a href="#2-结构" class="headerlink" title="2.结构"></a>2.结构</h3><p>镜像:相当于java中的<strong>类</strong></p><p>容器:相当于java中的<strong>对象</strong></p><p>仓库:相当于属于镜像的<strong>maven仓库</strong></p><p>数据卷: 容器间及本地共享资源等,可以快速引用</p><ol><li>镜像可以增删,配置环境/资源/等等所有静态内容,但是不能运行</li><li>容器则相当于镜像的实例,可以创建/使用/停止/删除/暂停等,一个镜像可以实例化无数的容器,容器间相互独立隔绝 </li><li>容器最好保持无状态,存储数据要独立于容器的数据卷等方式,这样容器消亡后,数据不会丢失. </li><li>仓库:存储镜像,每个镜像的每个版本都有自己的标签,可以通过标签来使用,和maven仓库同一概念 </li></ol><h3 id="3-操作原理"><a href="#3-操作原理" class="headerlink" title="3.操作原理"></a>3.操作原理</h3><p><strong>CLI :</strong>命令窗口</p><p><strong>RestAPI :</strong>Rest指令</p><p><strong>DockerServer :</strong>Docker守护线程,核心程序</p><p>在CLI中使用Rest指令,即可轻松操纵Docker,简单方便</p><h3 id="4-基本操作"><a href="#4-基本操作" class="headerlink" title="4.基本操作"></a>4.基本操作</h3><p>[创建/运行/停止/暂停/删除] </p><ul><li>docker create <image-id> 创建Container</image-id></li><li>docker start <container-id>运行Container</container-id></li><li>docker run <image-id> 创建并运行Container</image-id></li><li>docker stop <container-id> 停止Container</container-id></li><li>docker kill <container-id> 不友好的停止Container</container-id></li><li>docker pause <container-id> 暂停Container</container-id></li><li>docker rm <container-id> 删除Container(需要停止Container)</container-id></li><li>docker rmi <image-id> 删除Image镜像</image-id></li></ul><p>[创建镜像] </p><ul><li>docker commit <container-id>容器提交为镜像</container-id></li><li>docker build 构建镜像</li></ul><p>[查看]</p><ul><li>docker ps 查看所有运行中的Container</li><li>docker ps –a 查看所有Container(包含未运行)</li><li>docker images 查看所有顶级镜像(top-leve)</li><li>docker images –a 查看所有镜像</li></ul><p>[移植复制]</p><ul><li>docker save <image-id> 只对镜像生效,每一个层都保存了元数据,可以看到镜像历史版本</image-id></li><li>docker export <container-id> 排除元数据,创建一个tar文件,多层合一,没有历史版本</container-id></li><li>docker history <image-id> 查看镜像历史版本</image-id></li></ul><p>[???骚操作]</p><ul><li>docker exec <running-container-id> 在运行中的容器执行一个新进程</running-container-id></li><li>docker inspect <container-id> or <image-id> 提取镜像或容器最顶级的元数据</image-id></container-id></li></ul><h3 id="5-使用链接"><a href="#5-使用链接" class="headerlink" title="5.使用链接"></a>5.使用链接</h3><p>详细基础指令操作连接,配图</p><p><a href="http://dockone.io/article/783" target="_blank" rel="noopener">http://dockone.io/article/783</a></p><p>详细Docker指令文档,配每个指令详情</p><p><a href="http://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-command-manual.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker容器基础&quot;&gt;&lt;a href=&quot;#Docker容器基础&quot; class=&quot;headerlink&quot; title=&quot;Docker容器基础&quot;&gt;&lt;/a&gt;Docker容器基础&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>MQ基础与运用</title>
    <link href="http://yoursite.com/2018/08/24/MQ%E5%9F%BA%E7%A1%80%E4%B8%8E%E8%BF%90%E7%94%A8/"/>
    <id>http://yoursite.com/2018/08/24/MQ基础与运用/</id>
    <published>2018-08-23T16:00:00.000Z</published>
    <updated>2018-08-24T15:36:06.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MQ基础与运用"><a href="#MQ基础与运用" class="headerlink" title="MQ基础与运用"></a>MQ基础与运用</h1><p>[TOC]</p><h2 id="一-MQ原理"><a href="#一-MQ原理" class="headerlink" title="一.MQ原理"></a>一.MQ原理</h2><p>待整理</p><h2 id="二-ActiveMQ部分"><a href="#二-ActiveMQ部分" class="headerlink" title="二.ActiveMQ部分"></a>二.ActiveMQ部分</h2><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><p>消息队列:<strong>即时消息通信</strong>和<strong>延时消息通信</strong></p><p>MQ 是一个<strong>消息中间件</strong>,常见的消息中间件有 <strong>ActiveMQ | RabbitMQ | kafka</strong></p><p>ActiveMQ底层基于java的JMS实现,在没有JMS之前的系统存在很多缺陷:</p><ol><li>前后端同步问题,如果后台没有响应,则前段会一直阻塞等待</li><li>前后端生命周期耦合性太强,一方崩了则另一方也会崩</li><li>点对点通信,前段一次只能发送给某一个单独的服务对象,无法群发</li></ol><p><strong>JMS:</strong> (Java Message Service ) 通过消息中间件(MOM：Message Oriented Middleware )</p><p>将消息发送给单独的消息服务器中,消息服务器会将消息存放在若干的队列/主题中,在合适的时候将消息发送给接收者.<strong>发送和接收是异步的,无需阻塞等待</strong> 在pub/sub的模式下,可以将消息发送给多个接收者</p><p><strong>JMS类中定义了java访问中间件的接口,除此之外都是异常定义</strong></p><ol><li>Provider/MessageProvider：生产者 </li><li>Consumer/MessageConsumer：消费者 </li><li>PTP：Point To Point，点对点通信消息模型 </li><li>Pub/Sub：Publish/Subscribe，发布订阅消息模型 </li><li><strong>Queue</strong>：队列，目标类型之一，和PTP结合 </li><li><strong>Topic</strong>：主题，目标类型之一，和Pub/Sub结合 </li><li>ConnectionFactory：连接工厂，JMS用它创建连接 </li><li>Connnection：JMS Client到JMS Provider的连接 </li><li>Destination：消息目的地，由Session创建 </li><li><strong>Session</strong>：会话，由Connection创建，实质上就是发送、接受消息的一个线程，因此生产者、消费者都是Session创建的 </li></ol><h4 id="2-应用"><a href="#2-应用" class="headerlink" title="2.应用"></a>2.应用</h4><p><strong>| 异步处理 | 应用解耦 | 流量削锋 | 消息通讯 |</strong></p><p><strong>详情参考:<a href="https://blog.csdn.net/kingcat666/article/details/78660535" target="_blank" rel="noopener">https://blog.csdn.net/kingcat666/article/details/78660535</a></strong></p><h4 id="3-消息模式"><a href="#3-消息模式" class="headerlink" title="3.消息模式"></a>3.消息模式</h4><ul><li><strong>P2P模式(点对点)</strong> Queue</li><li><strong>Pub/Sub模式(发布订阅)</strong> Topic</li><li><strong>Push模式(推拉模式,消息更新C/S中)</strong></li></ul><p><img src="https://i.imgur.com/1YQjxG6.png" alt=""></p><p><strong>Topic根据业务需求,也可以持久化</strong></p><p>客户端启动时设置一个ClientID作为编号在服务器注册</p><p>可以将消息一致保存在服务器(可以持久化)</p><p><strong>环境搭建文件中存放该操作方法</strong></p><h4 id="4-五种不同的消息正文格式"><a href="#4-五种不同的消息正文格式" class="headerlink" title="4.五种不同的消息正文格式"></a>4.五种不同的消息正文格式</h4><p>JMS定义了五种不同的消息正文格式，以及调用的消息类型，允许你发送并接收以一些不同形式的数据，提供现有消息格式的一些级别的兼容性。</p><ul><li>　　StreamMessage – Java原始值的数据流</li><li>　　MapMessage–一套名称-值对</li><li>　　TextMessage–一个字符串对象(常用)</li><li>　　ObjectMessage–一个序列化的 Java对象</li><li>　　BytesMessage–一个字节的数据流</li></ul><h4 id="5-java中与Solr结合"><a href="#5-java中与Solr结合" class="headerlink" title="5.java中与Solr结合"></a>5.java中与Solr结合</h4><p>搭建..(省略)</p><p><strong>注意：</strong>如果ActiveMQ整合spring使用不要使用activemq-all-5.12.0.jar包。</p><p>(5.12.0中许多包和spring相同,而且少方法,坑)</p><p><strong>建议使用5.11.2</strong></p><p>进入管理后台：</p><ul><li><a href="http://www.fzs.com:8161/admin/" target="_blank" rel="noopener">http://www.fzs.com:8161/admin/</a></li><li>用户名：admin</li><li>密码：admin</li></ul><p><img src="https://i.imgur.com/RgH5SGA.png" alt=""></p><h5 id="5-1-JMS规范下使用套路-基础原理"><a href="#5-1-JMS规范下使用套路-基础原理" class="headerlink" title="5-1.JMS规范下使用套路 基础原理"></a>5-1.JMS规范下使用套路 基础原理</h5><p><strong>导包</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>提供方</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建工厂对象ConnectionFactory,需要指定IP和端口</span></span><br><span class="line">      ConnectionFactory connectionFactory= <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://www.fzs.com:61616"</span>);</span><br><span class="line">      <span class="comment">//2.使用工厂对象创建Connection连接对象</span></span><br><span class="line">      Connection connection=connectionFactory.createConnection();</span><br><span class="line">      <span class="comment">//3.开启连接,调用Connection对象的start方法</span></span><br><span class="line">      connection.start();</span><br><span class="line">      <span class="comment">//4.创建Session对象</span></span><br><span class="line">      <span class="comment">//(两个参数,|1.是否开启分布式事务(少,一般不开),如果开启,第二个参数无意义 | 2.应答模式(自动/手动)一般自动)</span></span><br><span class="line">      Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">      <span class="comment">//5.使用Session创建目的模式Destination (queue(点对点)|topic(广播一对多))</span></span><br><span class="line">      Queue queue = session.createQueue(<span class="string">"DonY15_ActiveMQ_Message"</span>);</span><br><span class="line">      <span class="comment">//6.使用Session创建生产者Producer</span></span><br><span class="line">      MessageProducer producer = session.createProducer(queue);</span><br><span class="line">      <span class="comment">//7.创建Message对象(一般textMessage)</span></span><br><span class="line">      TextMessage textMessage = session.createTextMessage(<span class="string">"发出命令:全军粗鸡!✧*｡٩(ˊᗜˋ*)و✧*｡"</span>);</span><br><span class="line">      <span class="comment">//8.发送消息(Message放到Producer)</span></span><br><span class="line">      producer.send(textMessage);</span><br><span class="line">      <span class="comment">//9.关闭资源(Producer|Session|Connection)</span></span><br><span class="line">       producer.close();</span><br><span class="line">       session.close();</span><br><span class="line">       connection.close();</span><br></pre></td></tr></table></figure><p><strong>接收方</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建工厂对象ConnectionFactory连接MQ服务器</span></span><br><span class="line">ConnectionFactory connectionFactory=<span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://www.fzs.com:61616"</span>);</span><br><span class="line"><span class="comment">//2.使用工厂对象创建Connection连接对象</span></span><br><span class="line">Connection connection=connectionFactory.createConnection();</span><br><span class="line"><span class="comment">//3.开启连接</span></span><br><span class="line">connection.start();</span><br><span class="line"><span class="comment">//4.创建Session</span></span><br><span class="line">Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"><span class="comment">//5.使用Session创建目的模式Destination (queue(点对点)|topic(广播一对多))</span></span><br><span class="line">Queue queue = session.createQueue(<span class="string">"DonY15_ActiveMQ_Message"</span>);</span><br><span class="line"><span class="comment">//6.使用Session创建消费者对象</span></span><br><span class="line">MessageConsumer consumer = session.createConsumer(queue);</span><br><span class="line"><span class="comment">//7.接收消息(监听)</span></span><br><span class="line">consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line"><span class="comment">//8.打印结果</span></span><br><span class="line">        TextMessage textMessage= (TextMessage) message;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String text = textMessage.getText();</span><br><span class="line">            System.out.println(text);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//9.等待接收消息</span></span><br><span class="line">System.in.read();</span><br><span class="line"><span class="comment">//9.关闭连接</span></span><br><span class="line">consumer.close();</span><br><span class="line">session.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MQ基础与运用&quot;&gt;&lt;a href=&quot;#MQ基础与运用&quot; class=&quot;headerlink&quot; title=&quot;MQ基础与运用&quot;&gt;&lt;/a&gt;MQ基础与运用&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;一-MQ原理&quot;&gt;&lt;a href=&quot;#一-MQ原理&quot; class=
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring Boot整合篇</title>
    <link href="http://yoursite.com/2018/08/24/Spring%20boot%E6%95%B4%E5%90%88%E7%AF%87/"/>
    <id>http://yoursite.com/2018/08/24/Spring boot整合篇/</id>
    <published>2018-08-23T16:00:00.000Z</published>
    <updated>2018-08-24T15:41:25.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-boot整合篇"><a href="#Spring-boot整合篇" class="headerlink" title="Spring boot整合篇"></a>Spring boot整合篇</h2><p>[TOC]</p><h3 id="1-优秀传送门"><a href="#1-优秀传送门" class="headerlink" title="1.优秀传送门"></a>1.优秀传送门</h3><h4 id="1-1-第一章送给GitHub仓库-多种框架整合实战案例"><a href="#1-1-第一章送给GitHub仓库-多种框架整合实战案例" class="headerlink" title="1-1.第一章送给GitHub仓库,多种框架整合实战案例"></a>1-1.第一章送给GitHub仓库,多种框架整合实战案例</h4><p><a href="https://github.com/JeffLi1993/springboot-learning-example" target="_blank" rel="noopener">https://github.com/JeffLi1993/springboot-learning-example</a></p><hr><h3 id="公告"><a href="#公告" class="headerlink" title="公告"></a>公告</h3><p><strong>该套框架整合尽量以一个工程进行叠加演示,一般情况下后面的整合都包含前面的基础整合</strong></p><p>(上面 1 仓库实战是各个框架分离,可以参考学习)</p><hr><h3 id="2-基础整合搭建ZK-Dubbo"><a href="#2-基础整合搭建ZK-Dubbo" class="headerlink" title="2.基础整合搭建ZK/Dubbo"></a>2.基础整合搭建ZK/Dubbo</h3><p>Dubbo Spring Boot Starter 致力于简化 Dubbo 应用在 Spring Boot 环境中的开发，主要包括自动装配（Auto-Configure）、外部化配置（Externalized-Configuration）以及生产准备（Actuator） </p><p><strong>思路</strong></p><ol><li>在Spring boot中整合ZK/Dubbo,可以将ZK抽出来放在parent中,这样子模块只需要考虑dubbo的服务配置即可</li><li>利用强大的注解功能,运用Dubbo的@Service做服务端注解,@Reference做消费端注解,快速整合Springboot+ZK+Dubbo</li></ol><h4 id="2-1-基础搭建传送门"><a href="#2-1-基础搭建传送门" class="headerlink" title="2-1.基础搭建传送门"></a>2-1.基础搭建传送门</h4><p><a href="https://www.bysocket.com/?p=1681" target="_blank" rel="noopener">https://www.bysocket.com/?p=1681</a></p><h4 id="2-2-优秀开源项目"><a href="#2-2-优秀开源项目" class="headerlink" title="2-2.优秀开源项目"></a>2-2.优秀开源项目</h4><p><a href="https://github.com/dubbo/dubbo-spring-boot-project" target="_blank" rel="noopener">https://github.com/dubbo/dubbo-spring-boot-project</a> </p><p><em>Springboot</em> 多模块项目，整合了freemark,jsp,logback,mail,多数据源,mybatis,redis,docker,SSL等(待验证) </p><p><a href="https://github.com/dony15/springboot-dubbox" target="_blank" rel="noopener">https://github.com/dony15/springboot-dubbox</a></p><h4 id="2-3-配置详解"><a href="#2-3-配置详解" class="headerlink" title="2-3.配置详解"></a>2-3.配置详解</h4><p>application.properties  </p><p><strong>简单基础配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## Dubbo 服务提供者配置</span><br><span class="line">spring.dubbo.application.name=provider/consumer</span><br><span class="line">spring.dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br><span class="line">spring.dubbo.protocol.name=dubbo</span><br><span class="line">spring.dubbo.protocol.port=20880</span><br><span class="line">spring.dubbo.scan=org.spring.springboot.</span><br></pre></td></tr></table></figure><p>spring.dubbo.application.name 应用名称  </p><p>spring.dubbo.registry.address 注册中心地址  </p><p>spring.dubbo.protocol.name 协议名称 </p><p>spring.dubbo.protocol.port 协议端口  </p><p>spring.dubbo.scan dubbo 服务类包目录 </p><p><strong>详细配置清单</strong></p><p>#根据 starter 工程源码，可以看出 application.properties 对应的 Dubbo 配置类 DubboProperties 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(prefix = &quot;spring.dubbo&quot;)</span><br><span class="line"></span><br><span class="line">public class DubboProperties &#123;</span><br><span class="line"></span><br><span class="line">private String scan;</span><br><span class="line"></span><br><span class="line">private ApplicationConfig application;</span><br><span class="line"></span><br><span class="line">private RegistryConfig registry;</span><br><span class="line"></span><br><span class="line">private ProtocolConfig protocol;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包括了扫描路径、应用配置类、注册中心配置类和服务协议类 所以具体常用配置下扫描包路径：指的是 Dubbo 服务注解的服务包路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line">## Dubbo 配置</span><br><span class="line"></span><br><span class="line"># 扫描包路径</span><br><span class="line"></span><br><span class="line">spring.dubbo.scan=org.spring.springboot.dubbo</span><br><span class="line"></span><br><span class="line">应用配置类：关于 Dubbo 应用级别的配置</span><br><span class="line"></span><br><span class="line">## Dubbo 应用配置</span><br><span class="line"></span><br><span class="line"># 应用名称</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.name=xxx</span><br><span class="line"></span><br><span class="line"># 模块版本</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.version=xxx</span><br><span class="line"></span><br><span class="line"># 应用负责人</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.owner=xxx</span><br><span class="line"></span><br><span class="line"># 组织名(BU或部门)</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.organization=xxx</span><br><span class="line"></span><br><span class="line"># 分层</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.architecture=xxx</span><br><span class="line"></span><br><span class="line"># 环境，如：dev/test/run</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.environment=xxx</span><br><span class="line"></span><br><span class="line"># Java代码编译器</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.compiler=xxx</span><br><span class="line"></span><br><span class="line"># 日志输出方式</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.logger=xxx</span><br><span class="line"></span><br><span class="line"># 注册中心 0</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries[0].address=zookeeper:#127.0.0.1:2181=xxx</span><br><span class="line"></span><br><span class="line"># 注册中心 1</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries[1].address=zookeeper:#127.0.0.1:2181=xxx</span><br><span class="line"></span><br><span class="line"># 服务监控</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.monitor.address=xxx</span><br><span class="line"></span><br><span class="line">这里注意多个注册中心的配置方式。下面介绍单个注册中心的配置方式。 注册中心配置类：常用 ZooKeeper 作为注册中心进行服务注册。</span><br><span class="line"></span><br><span class="line">## Dubbo 注册中心配置类</span><br><span class="line"></span><br><span class="line"># 注册中心地址</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries.address=xxx</span><br><span class="line"></span><br><span class="line"># 注册中心登录用户名</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries.username=xxx</span><br><span class="line"></span><br><span class="line"># 注册中心登录密码</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries.password=xxx</span><br><span class="line"></span><br><span class="line"># 注册中心缺省端口</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries.port=xxx</span><br><span class="line"></span><br><span class="line"># 注册中心协议</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries.protocol=xxx</span><br><span class="line"></span><br><span class="line"># 客户端实现</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries.transporter=xxx</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries.server=xxx</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries.client=xxx</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries.cluster=xxx</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries.group=xxx</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries.version=xxx</span><br><span class="line"></span><br><span class="line"># 注册中心请求超时时间(毫秒)</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries.timeout=xxx</span><br><span class="line"></span><br><span class="line"># 注册中心会话超时时间(毫秒)</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries.session=xxx</span><br><span class="line"></span><br><span class="line"># 动态注册中心列表存储文件</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries.file=xxx</span><br><span class="line"></span><br><span class="line"># 停止时等候完成通知时间</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries.wait=xxx</span><br><span class="line"></span><br><span class="line"># 启动时检查注册中心是否存在</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries.check=xxx</span><br><span class="line"></span><br><span class="line"># 在该注册中心上注册是动态的还是静态的服务</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries.dynamic=xxx</span><br><span class="line"></span><br><span class="line"># 在该注册中心上服务是否暴露</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries.register=xxx</span><br><span class="line"></span><br><span class="line"># 在该注册中心上服务是否引用</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.registries.subscribe=xxx</span><br><span class="line"></span><br><span class="line">服务协议配置类：</span><br><span class="line"></span><br><span class="line">## Dubbo 服务协议配置</span><br><span class="line"></span><br><span class="line"># 服务协议</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.name=xxx</span><br><span class="line"></span><br><span class="line"># 服务IP地址(多网卡时使用)</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.host=xxx</span><br><span class="line"></span><br><span class="line"># 服务端口</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.port=xxx</span><br><span class="line"></span><br><span class="line"># 上下文路径</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.contextpath=xxx</span><br><span class="line"></span><br><span class="line"># 线程池类型</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.threadpool=xxx</span><br><span class="line"></span><br><span class="line"># 线程池大小(固定大小)</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.threads=xxx</span><br><span class="line"></span><br><span class="line"># IO线程池大小(固定大小)</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.iothreads=xxx</span><br><span class="line"></span><br><span class="line"># 线程池队列大小</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.queues=xxx</span><br><span class="line"></span><br><span class="line"># 最大接收连接数</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.accepts=xxx</span><br><span class="line"></span><br><span class="line"># 协议编码</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.codec=xxx</span><br><span class="line"></span><br><span class="line"># 序列化方式</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.serialization=xxx</span><br><span class="line"></span><br><span class="line"># 字符集</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.charset=xxx</span><br><span class="line"></span><br><span class="line"># 最大请求数据长度</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.payload=xxx</span><br><span class="line"></span><br><span class="line"># 缓存区大小</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.buffer=xxx</span><br><span class="line"></span><br><span class="line"># 心跳间隔</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.heartbeat=xxx</span><br><span class="line"></span><br><span class="line"># 访问日志</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.accesslog=xxx</span><br><span class="line"></span><br><span class="line"># 网络传输方式</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.transporter=xxx</span><br><span class="line"></span><br><span class="line"># 信息交换方式</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.exchanger=xxx</span><br><span class="line"></span><br><span class="line"># 信息线程模型派发方式</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.dispatcher=xxx</span><br><span class="line"></span><br><span class="line"># 对称网络组网方式</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.networker=xxx</span><br><span class="line"></span><br><span class="line"># 服务器端实现</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.server=xxx</span><br><span class="line"></span><br><span class="line"># 客户端实现</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.client=xxx</span><br><span class="line"></span><br><span class="line"># 支持的telnet命令，多个命令用逗号分隔</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.telnet=xxx</span><br><span class="line"></span><br><span class="line"># 命令行提示符</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.prompt=xxx</span><br><span class="line"></span><br><span class="line"># status检查</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.status=xxx</span><br><span class="line"></span><br><span class="line"># 是否注册</span><br><span class="line"></span><br><span class="line">spring.dubbo.application.protocol.status=xxx</span><br></pre></td></tr></table></figure><h4 id="2-4-Service-服务提供者常用配置"><a href="#2-4-Service-服务提供者常用配置" class="headerlink" title="2-4.@Service 服务提供者常用配置"></a>2-4.@Service 服务提供者常用配置</h4><p>常用 @Service 配置的如下</p><ul><li><p>version 版本</p></li><li><p>group 分组</p></li><li><p>provider 提供者</p></li><li><p>protocol 服务协议</p></li><li><p>monitor 服务监控</p></li><li><p>registry 服务注册</p></li><li><p>…</p></li></ul><h4 id="2-5-Reference-服务消费者常用配置"><a href="#2-5-Reference-服务消费者常用配置" class="headerlink" title="2-5.@Reference 服务消费者常用配置"></a>2-5.@Reference 服务消费者常用配置</h4><p>常用 @Reference 配置的如下</p><ul><li><p>version 版本</p></li><li><p>group 分组</p></li><li><p>timeout 消费者调用提供者的超时时间</p></li><li><p>consumer 服务消费者</p></li><li><p>monitor 服务监控</p></li><li><p>registry 服务注册</p></li></ul><h4 id="2-6-总结"><a href="#2-6-总结" class="headerlink" title="2-6.总结"></a>2-6.总结</h4><h5 id="A-依赖问题"><a href="#A-依赖问题" class="headerlink" title="A) 依赖问题"></a>A) 依赖问题</h5><p>目前测试的是Spring boot整合的dubbo依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.dubbo.springboot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-dubbo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>注意该依赖中存在了dubbo和zk所有依赖包,不需要额外的配置zk,<strong>否则会引起jar包冲突</strong>,选择时可以通过插件查看</p><p>注意提供者如果使用事务,那么需要导入AOP依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="B-配置问题"><a href="#B-配置问题" class="headerlink" title="B)配置问题"></a>B)配置问题</h5><p>注意ZK的注册地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#ZK地址</span><br><span class="line">spring.dubbo.registry.address=zookeeper://www.dony15.com:2181</span><br></pre></td></tr></table></figure><p>注意服务包目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.dubbo.scan=com.dony15.service</span><br></pre></td></tr></table></figure><p>该目录的提供者和消费者并不需要一致,扫描的是本工程内对应的注解位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#服务包目录-提供者</span><br><span class="line">spring.dubbo.scan=com.dony15.service</span><br><span class="line"></span><br><span class="line">#服务包目录-消费者</span><br><span class="line">spring.dubbo.scan=com.dony15.dubbo</span><br></pre></td></tr></table></figure><h5 id="C-注解问题"><a href="#C-注解问题" class="headerlink" title="C)注解问题"></a>C)注解问题</h5><p>@Service(version = “1.0.0”)和@Reference(version = “1.0.0”)</p><p>版本号可以写也可以不写,但是这两个注解注意是dubbo包下,并非spring包</p><h5 id="D-解耦"><a href="#D-解耦" class="headerlink" title="D)解耦"></a>D)解耦</h5><p>可以将通用的接口和实体类抽离出来打成jar进行依赖,优点</p><ol><li>提高复用性</li><li>避免springboot的<strong>按需依赖原则</strong>造成的过多引用问题</li><li>如果不这样做,注解方式的引用需要在提供者和消费者都建立服务接口,降低dubbo的实用性(每次调用服务都需要将服务内容复制一遍)</li></ol><h5 id="E-注解篇代码奉上Spring-boot-Dubbo-ZK-JDBC-AOP-Mybatis-Restful"><a href="#E-注解篇代码奉上Spring-boot-Dubbo-ZK-JDBC-AOP-Mybatis-Restful" class="headerlink" title="E)注解篇代码奉上Spring boot+Dubbo+ZK+JDBC+AOP+Mybatis+Restful"></a>E)注解篇代码奉上Spring boot+Dubbo+ZK+JDBC+AOP+Mybatis+Restful</h5><p><a href="https://github.com/dony15/my_springboot_code" target="_blank" rel="noopener">https://github.com/dony15/my_springboot_code</a></p><p>### </p><hr><h3 id="3-整合Thymeleaf-Freemarker"><a href="#3-整合Thymeleaf-Freemarker" class="headerlink" title="3.整合Thymeleaf/Freemarker"></a>3.整合Thymeleaf/Freemarker</h3><h4 id="3-1-代码"><a href="#3-1-代码" class="headerlink" title="3-1.代码"></a>3-1.代码</h4><h5 id="注解篇代码奉上Thymeleaf-Freemarker-Spring-boot-Dubbo-ZK-JDBC-AOP-Mybatis-Restful"><a href="#注解篇代码奉上Thymeleaf-Freemarker-Spring-boot-Dubbo-ZK-JDBC-AOP-Mybatis-Restful" class="headerlink" title="注解篇代码奉上Thymeleaf+Freemarker+Spring boot+Dubbo+ZK+JDBC+AOP+Mybatis+Restful"></a>注解篇代码奉上Thymeleaf+Freemarker+Spring boot+Dubbo+ZK+JDBC+AOP+Mybatis+Restful</h5><p><a href="https://github.com/dony15/my_springboot_code/tree/master/springboot-dubbo-mybatis-freemarker-thymeleaf" target="_blank" rel="noopener">https://github.com/dony15/my_springboot_code/tree/master/springboot-dubbo-mybatis-freemarker-thymeleaf</a></p><h4 id="3-2-配置文件"><a href="#3-2-配置文件" class="headerlink" title="3-2.配置文件"></a>3-2.配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">#Themleaf配置</span><br><span class="line">spring.thymeleaf.content-type=text/html  </span><br><span class="line">spring.thymeleaf.mode =LEGACYHTML5</span><br><span class="line">#开发时关闭缓存,不然没法看到实时页面</span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line"></span><br><span class="line">#配置静态资源路径</span><br><span class="line">spring.mvc.static-path-pattern=/static/**</span><br><span class="line"></span><br><span class="line">#DispatcherServlet 映射后缀(效果暂时没发现,并非伪静态技术)</span><br><span class="line">server.sevlet-path=*.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#freemarker模板</span><br><span class="line">spring.freemarker.allow-request-override=false</span><br><span class="line">spring.freemarker.cache=false</span><br><span class="line">spring.freemarker.check-template-location=true</span><br><span class="line">spring.freemarker.charset=UTF-8</span><br><span class="line">spring.freemarker.content-type=text/html</span><br><span class="line">spring.freemarker.expose-request-attributes=false</span><br><span class="line">spring.freemarker.expose-session-attributes=false</span><br><span class="line">spring.freemarker.expose-spring-macro-helpers=false</span><br></pre></td></tr></table></figure><h4 id="3-3-总结"><a href="#3-3-总结" class="headerlink" title="3-3.总结"></a>3-3.总结</h4><p>Thymeleaf和Freemarker可以共存,当然语法有区别,根据实际业务选择吧,整合基本没有难点,有时间可以了解一下他们的配置文件都是啥意思,百度很多,不留了</p><h5 id="A-严谨问题"><a href="#A-严谨问题" class="headerlink" title="A)严谨问题"></a>A)严谨问题</h5><p>Thymeleaf对标签格式要求比较严谨,如果需要可以通过依赖jar进行自动补充(前段不一定写的很完整哦)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--ThymeLeaf代码补全--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;net.sourceforge.nekohtml&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;nekohtml&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.9.22&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="B-伪静态思路"><a href="#B-伪静态思路" class="headerlink" title="B)伪静态思路"></a>B)伪静态思路</h5><p>通过过滤器实现伪静态化,优化SEO,项目在不值得做大量静态页面时,可以使用</p><p>一时半会没整合好,就注释掉了,大概这个思路( • ̀ω•́ )✧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--伪静态化优化方案,未实现--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.tuckey&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;urlrewritefilter&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;4.0.4&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="C-依赖问题"><a href="#C-依赖问题" class="headerlink" title="C)依赖问题"></a>C)依赖问题</h5><p>Thymeleaf的依赖中已经存在spring-boot-starter-web的依赖</p><p>因此spring-boot-starter-web可以无情的去掉了</p><h5 id="D-FreemarkerUtil使用问题"><a href="#D-FreemarkerUtil使用问题" class="headerlink" title="D)FreemarkerUtil使用问题"></a>D)FreemarkerUtil使用问题</h5><p>注意目录,如果写错了很尴尬哦.中间环节取不到值会提示异常,表达式值为null</p><h5 id="E-前后端分离"><a href="#E-前后端分离" class="headerlink" title="E)前后端分离"></a>E)前后端分离</h5><p>如果你能参与项目的设计,那么通过/{page}进行较大程度的前后端分离,是个不错的点子哦,项目中有示例</p><hr><h3 id="4-整合-FastDFS-Nginx"><a href="#4-整合-FastDFS-Nginx" class="headerlink" title="4.整合 FastDFS+Nginx"></a>4.整合 FastDFS+Nginx</h3><p>本次整合会增加数据库字段,当然包括代码层的更新咯.url存图片来演示FastDFS功能</p><p>新增字段city_image存储url,演示是1张图,实际上在实体类中已经为多图扩展做了准备(数组切割)</p><h4 id="4-1-代码"><a href="#4-1-代码" class="headerlink" title="4-1.代码"></a>4-1.代码</h4><p><strong>Thymeleaf+Freemarker+Spring boot+Dubbo+ZK+JDBC+AOP+Mybatis+Restful+FastDFS+Nginx</strong></p><p><a href="https://github.com/dony15/my_springboot_code/tree/master/3springboot-fastDFS-Nginx" target="_blank" rel="noopener">https://github.com/dony15/my_springboot_code/tree/master/3springboot-fastDFS-Nginx</a></p><h4 id="4-2-配置文件"><a href="#4-2-配置文件" class="headerlink" title="4-2.配置文件"></a>4-2.配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tracker_server=www.dony15.com:22122</span><br></pre></td></tr></table></figure><p><strong>不足</strong></p><p>Nginx地址没有提出来,开发时应该提出来通用的,方案有很多,放在配置文件或者指定类或接口都可以</p><p>都没有做太多限制,比如图片类型,大小等等.可以进行各种判断过滤,这里只演示基础的功能实现</p><p>FastDFS只演示了增加,还缺少删和改哦,可以自行百度</p><h4 id="4-3-总结"><a href="#4-3-总结" class="headerlink" title="4-3.总结"></a>4-3.总结</h4><h5 id="A-前段问题"><a href="#A-前段问题" class="headerlink" title="A)前段问题"></a>A)前段问题</h5><p>这次演示没有使用富文本,可以更直接的去尝试细节(脑壳疼),</p><p>注意文件上传的类型,使用ajax的时候很容易前后不兼容,400或者406等</p><p>该方案是不依赖于form表单的ajax 详细见源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;input  type=<span class="string">"file"</span> alt=<span class="string">"插入图片"</span> id=<span class="string">"uploadFile"</span>name=<span class="string">"uploadFile"</span> /&gt;</span><br><span class="line">-----------------------------------------------------</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 图片上传</span></span><br><span class="line"><span class="comment">* 注意如果不加processData:false和contentType:false会报错</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="string">"#uploadFile"</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> imageForm = <span class="keyword">new</span> FormData();</span><br><span class="line">        imageForm.append(<span class="string">"uploadFile"</span>, $(<span class="string">"#uploadFile"</span>).get(<span class="number">0</span>).files[<span class="number">0</span>]);</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">'POST'</span>,</span><br><span class="line">            url: <span class="string">"/insertImage"</span>,</span><br><span class="line">            data: imageForm,</span><br><span class="line">            processData: <span class="literal">false</span>,  <span class="comment">// 告诉jQuery不要去处理发送的数据</span></span><br><span class="line">            contentType: <span class="literal">false</span>,   <span class="comment">// 告诉jQuery不要去设置Content-Type请求头</span></span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> result = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">                <span class="keyword">if</span> (result.error==<span class="number">1</span>) &#123;</span><br><span class="line">                    alert(result.message)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    $(<span class="string">"#image_echo"</span>).attr(<span class="string">"src"</span>, result.url);</span><br><span class="line">                    $(<span class="string">"#cityImage"</span>).attr(<span class="string">"value"</span>, result.url);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="string">"上传失败"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="B-基础逻辑"><a href="#B-基础逻辑" class="headerlink" title="B)基础逻辑"></a>B)基础逻辑</h5><p>基础的逻辑,文件上传到FastDFS,通过回调获取URI</p><p>再和Nginx的地址拼接成完整的URL响应给前段</p><p>前段拿到响应的URL和其他数据一起存进数据库</p><h3 id="5-整合Redis"><a href="#5-整合Redis" class="headerlink" title="5.整合Redis"></a>5.整合Redis</h3><h4 id="5-1-代码"><a href="#5-1-代码" class="headerlink" title="5-1.代码"></a>5-1.代码</h4><p><strong>Thymeleaf+Freemarker+Spring boot+Dubbo+ZK+JDBC+AOP+Mybatis+Restful+FastDFS+Nginx+Redis</strong></p><p><a href="https://github.com/dony15/my_springboot_code/tree/master/springboot4-redis" target="_blank" rel="noopener">https://github.com/dony15/my_springboot_code/tree/master/springboot4-redis</a></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="A-依赖问题-1"><a href="#A-依赖问题-1" class="headerlink" title="A)依赖问题"></a>A)依赖问题</h5><p>注意redis需要和jackson一起,否则异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;functionDomainRedisTemplate&apos; defined in class path resource [com/dony15/config/RedisConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.redis.core.RedisTemplate]: Factory method &apos;functionDomainRedisTemplate&apos; threw exception; nested exception is java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/ObjectMapper</span><br></pre></td></tr></table></figure><p>我们可以看到这里的提示,缺少jacksion中的ObjectMapper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nested exception is java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/ObjectMapper</span><br></pre></td></tr></table></figure><p>因此依赖应该这样配套使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 整合redis --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- jackson --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>当然,FastJSON也是需要的,主要用在处理业务的时候,选择怎么存的策略转换,比如List,Map,数组等的处理选择上</p><h5 id="B-配置-单机版"><a href="#B-配置-单机版" class="headerlink" title="B)配置-单机版"></a>B)配置-单机版</h5><p>Springboot整合redis,需要注意RedisTemplate的注入,通过配置类来实现</p><p>将RedisUtil注入封装RedisTemplate</p><p>调用RedisUtil通过自动装配或者@Resource注入即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#Redis</span><br><span class="line">#Matser的ip地址</span><br><span class="line">redis.host=www.dony15.com</span><br><span class="line">#端口号</span><br><span class="line">redis.port=6379</span><br><span class="line">#如果有密码</span><br><span class="line">redis.password=</span><br><span class="line">#客户端超时时间单位是毫秒 默认是2000</span><br><span class="line">redis.timeout=20000  </span><br><span class="line"></span><br><span class="line">#最大空闲数</span><br><span class="line">redis.maxIdle=300  </span><br><span class="line">#连接池的最大数据库连接数。设为0表示无限制,如果是jedis 2.4以后用redis.maxTotal</span><br><span class="line">#redis.maxActive=600</span><br><span class="line">#控制一个pool可分配多少个jedis实例,用来替换上面的redis.maxActive,如果是jedis 2.4以后用该属性</span><br><span class="line">redis.maxTotal=1000  </span><br><span class="line">#最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。</span><br><span class="line">redis.maxWaitMillis=10000  </span><br><span class="line">#连接的最小空闲时间 默认1800000毫秒(30分钟)</span><br><span class="line">redis.minEvictableIdleTimeMillis=300000  </span><br><span class="line">#每次释放连接的最大数目,默认3</span><br><span class="line">redis.numTestsPerEvictionRun=1024  </span><br><span class="line">#逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1</span><br><span class="line">redis.timeBetweenEvictionRunsMillis=30000  </span><br><span class="line">#是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个</span><br><span class="line">redis.testOnBorrow=true  </span><br><span class="line">#在空闲时检查有效性, 默认false</span><br><span class="line">redis.testWhileIdle=true</span><br></pre></td></tr></table></figure><hr><h3 id="6-整合Logback全局异常处理"><a href="#6-整合Logback全局异常处理" class="headerlink" title="6.整合Logback全局异常处理"></a>6.整合Logback全局异常处理</h3><p>个人理解目前Logback仍为主流的异常处理工具,但是配置<strong>细粒度</strong>较为麻烦,并且难以分析,对于中小项目比较实用;</p><p>对于长期的中大型soa项目,建议添加Cat检测,更加细粒度控制大部分细节,使用也相对简单方便,如:</p><ol><li>分布式细粒度实时监控</li><li>故障快速发现 </li><li>系统问题分析 </li><li>Cat报表展示消息类型  </li><li>Transaction  </li><li>Event  </li><li>Heartbeat  </li><li>Metric  </li><li>Trace  </li><li>各种埋点</li><li>丰富的模块警告通知/多种通知方式</li><li>…</li></ol><p>Cat待更新,在新篇章介绍</p><h4 id="6-1-代码"><a href="#6-1-代码" class="headerlink" title="6-1.代码"></a>6-1.代码</h4><p><strong>Thymeleaf+Freemarker+Spring boot+Dubbo+ZK+JDBC+AOP+Mybatis+Restful+FastDFS+Nginx+Redis+Logback</strong></p><p><a href="https://github.com/dony15/my_springboot_code/tree/master/springboot5-logback" target="_blank" rel="noopener">https://github.com/dony15/my_springboot_code/tree/master/springboot5-logback</a></p><h4 id="6-2-配置"><a href="#6-2-配置" class="headerlink" title="6-2.配置"></a>6-2.配置</h4><p><strong>A)、Logger、appender及layout</strong></p><p>Logger作为日志的记录器，把它关联到应用的对应的context上后，主要用于存放日志对象，也可以定义日志类型、级别。</p><p>Appender主要用于指定日志输出的目的地，目的地可以是控制台、文件、远程套接字服务器、 MySQL、 PostreSQL、 Oracle和其他数据库、 JMS和远程UNIX Syslog守护进程等。</p><p>Layout 负责把事件转换成字符串，格式化的日志信息的输出。</p><p><strong>B)、logger context</strong></p><p>各个logger 都被关联到一个 LoggerContext，LoggerContext负责制造logger，也负责以树结构排列各 logger。其他所有logger也通过org.slf4j.LoggerFactory 类的静态方法getLogger取得。 getLogger方法以 logger 名称为参数。用同一名字调用LoggerFactory.getLogger 方法所得到的永远都是同一个logger对象的引用。</p><p><strong>C)、有效级别及级别的继承</strong></p><p>Logger 可以被分配级别。级别包括：TRACE、DEBUG、INFO、WARN 和 ERROR，定义于 ch.qos.logback.classic.Level类。如果 logger没有被分配级别，那么它将从有被分配级别的最近的祖先那里继承级别。root logger 默认级别是 DEBUG。</p><p><strong>D)、打印方法与基本的选择规则</strong></p><p>打印方法决定记录请求的级别。例如，如果 L 是一个 logger 实例，那么，语句 L.info(“..”)是一条级别为 INFO 的记录语句。记录请求的级别在高于或等于其 logger 的有效级别时被称为被启用，否则，称为被禁用。记录请求级别为 p，其logger的有效级别为 q，只有则当 p&gt;=q时，该请求才会被执行。</p><p>该规则是 logback 的核心。级别排序为： <strong>TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR</strong>。</p><p><strong>Logback默认配置的步骤</strong></p><p>(1). 尝试在 classpath 下查找文件 logback-test.xml；</p><p>(2). 如果文件不存在，则查找文件 logback.xml；</p><p>(3). 如果两个文件都不存在，logback 用 Bas icConfigurator 自动对自己进行配置，这会导致记录输出到控制台。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"D:/temp/log"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按照每天生成日志文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span>  <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/TestWeb.log.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件最大的大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- show parameters for hibernate sql 专为 Hibernate 定制 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.type.descriptor.sql.BasicBinder"</span>  <span class="attr">level</span>=<span class="string">"TRACE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.type.descriptor.sql.BasicExtractor"</span>  <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.SQL"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.engine.QueryParameters"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.engine.query.HQLQueryPlan"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--myibatis log configure--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.apache.ibatis"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Connection"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Statement"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.PreparedStatement"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志异步到数据库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"DB"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.db.DBAppender"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志异步到数据库 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- DriverManagerConnectionSource不支持DataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connectionSource</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.db.DriverManagerConnectionSource"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- DataSourceConnectionSource支持DataSource,但是没整合上,这里有区别,使用时需要注意 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;connectionSource class="ch.qos.logback.core.db.DataSourceConnectionSource"&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接池 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dataSource class="com.alibaba.druid.pool.DruidDataSource"&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">driverClass</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driverClass</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>jdbc:mysql://localhost:3306/test01?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;useSSL=false<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span>&gt;</span>root<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>68835230<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/dataSource&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">connectionSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库日志输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;appender-ref ref="STDOUT" /&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DB"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-3-建表语句"><a href="#6-3-建表语句" class="headerlink" title="6-3.建表语句"></a>6-3.建表语句</h4><p>如果输出到数据库,那么需要先建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> logging_event_property;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> logging_event_exception;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> logging_event;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> logging_event </span><br><span class="line">  (</span><br><span class="line">    timestmp         <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    formatted_message  <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    logger_name       <span class="built_in">VARCHAR</span>(<span class="number">254</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    level_string      <span class="built_in">VARCHAR</span>(<span class="number">254</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    thread_name       <span class="built_in">VARCHAR</span>(<span class="number">254</span>),</span><br><span class="line">    reference_flag    <span class="built_in">SMALLINT</span>,</span><br><span class="line">    arg0              <span class="built_in">VARCHAR</span>(<span class="number">254</span>),</span><br><span class="line">    arg1              <span class="built_in">VARCHAR</span>(<span class="number">254</span>),</span><br><span class="line">    arg2              <span class="built_in">VARCHAR</span>(<span class="number">254</span>),</span><br><span class="line">    arg3              <span class="built_in">VARCHAR</span>(<span class="number">254</span>),</span><br><span class="line">    caller_filename   <span class="built_in">VARCHAR</span>(<span class="number">254</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    caller_class      <span class="built_in">VARCHAR</span>(<span class="number">254</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    caller_method     <span class="built_in">VARCHAR</span>(<span class="number">254</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    caller_line       <span class="built_in">CHAR</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    event_id          <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span></span><br><span class="line">  );</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> logging_event_property</span><br><span class="line">  (</span><br><span class="line">    event_id       <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    mapped_key        <span class="built_in">VARCHAR</span>(<span class="number">254</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    mapped_value      <span class="built_in">TEXT</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(event_id, mapped_key),</span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> (event_id) <span class="keyword">REFERENCES</span> logging_event(event_id)</span><br><span class="line">  );</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> logging_event_exception</span><br><span class="line">  (</span><br><span class="line">    event_id         <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    i                <span class="built_in">SMALLINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    trace_line       <span class="built_in">VARCHAR</span>(<span class="number">254</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(event_id, i),</span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> (event_id) <span class="keyword">REFERENCES</span> logging_event(event_id)</span><br><span class="line">  );</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><h4 id="6-5-加入全局异常处理器即可使用"><a href="#6-5-加入全局异常处理器即可使用" class="headerlink" title="6-5.加入全局异常处理器即可使用"></a>6-5.加入全局异常处理器即可使用</h4><p>这里整合了ajax请求(需要ajax请求工具类)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dony15.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.dony15.utils.AjaxResponse;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一的错误处理页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandler</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                         HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        logger.error(ex.getMessage(),ex);</span><br><span class="line">        <span class="comment">//ajax 请求</span></span><br><span class="line">        <span class="keyword">if</span> (request.getHeader(<span class="string">"x-requested-with"</span>) != <span class="keyword">null</span> &amp;&amp; request.getHeader(<span class="string">"x-requested-with"</span>).equalsIgnoreCase(<span class="string">"XMLHttpRequest"</span>)) &#123; <span class="comment">//如果是ajax请求响应头会有x-requested-with</span></span><br><span class="line">            AjaxResponse ajaxResponse = <span class="keyword">new</span> AjaxResponse();</span><br><span class="line">            ajaxResponse.setThrowable(ex);</span><br><span class="line">            response.reset();</span><br><span class="line">            response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">            PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                out = response.getWriter();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                logger.error(e.getMessage(),e);</span><br><span class="line">            &#125;</span><br><span class="line">            out.print(JSON.toJSONString(ajaxResponse));</span><br><span class="line">            out.flush();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//非ajax请求跳转登陆页</span></span><br><span class="line"></span><br><span class="line">            ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">            Cookie[] cookies = request.getCookies();</span><br><span class="line">            <span class="keyword">if</span> (cookies != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"debug"</span>.equals(cookies[i].getName())) &#123;</span><br><span class="line">                        StackTraceElement[] stackTraces = ex.getStackTrace();</span><br><span class="line"></span><br><span class="line">                        StringBuilder stackTraceStr = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                        stackTraceStr.append(ex.toString())</span><br><span class="line">                                .append(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; stackTraces.length; j++) &#123;</span><br><span class="line">                            stackTraceStr.append(stackTraces[j].toString())</span><br><span class="line">                                    .append(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        mv.getModel().put(<span class="string">"stackTraces"</span>, stackTraceStr);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mv.setViewName(<span class="string">"error.html"</span>);</span><br><span class="line">            <span class="keyword">return</span> mv;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-6-总结"><a href="#6-6-总结" class="headerlink" title="6-6.总结"></a>6-6.总结</h4><h5 id="A-依赖"><a href="#A-依赖" class="headerlink" title="A)依赖"></a>A)依赖</h5><p>依赖没有问题,spring-boot默认首先支持logback,不需要引入,详细关系可以查看关系图</p><h5 id="B-配置"><a href="#B-配置" class="headerlink" title="B)配置"></a>B)配置</h5><p>配置中需要注意的是,如果输出到数据库,那么除了配置文件外,需要在数据库中建好表哦</p><p>测试logback-test.xml </p><p>生产logback.xml</p><hr><h3 id="7-整合Quartz"><a href="#7-整合Quartz" class="headerlink" title="7.整合Quartz"></a>7.整合Quartz</h3><h4 id="7-1-配置组成"><a href="#7-1-配置组成" class="headerlink" title="7-1.配置组成"></a>7-1.配置组成</h4><p>以下为<strong>Spring boot</strong> 方式的配置,不依赖于任何配置文件</p><ol><li>JobFactory   配置类:Job注入到Spring中管理,否则无法与Spring中的Bean交互</li><li>QuartzConfig 配置类:Schedulder注入到Spring中管理</li><li>QuartzManager 工具管理类:封装调用Quartz的方法,如添加/修改/删除/查看</li><li>SelectCityJob Job类:任务类,处理业务逻辑的地方</li></ol><p>注意此处配置的注入,实际上是将<strong>Job和Schedulder的工厂</strong>交给<strong>Spring管理</strong>,<br>因为<strong>Quartz本身具有自己的容器</strong>,而自身的容器和Spring的容器互相没有关联,导致Bean无法沟通</p><p><strong>可参考该文章:</strong></p><p><a href="https://blog.csdn.net/xiaobuding007/article/details/80455187" target="_blank" rel="noopener">https://blog.csdn.net/xiaobuding007/article/details/80455187</a></p><p><strong>①个人仓库中代码集成演示:</strong><br><a href="https://github.com/dony15/my_springboot_code/tree/master/springboot6-quartz%20X" target="_blank" rel="noopener">https://github.com/dony15/my_springboot_code/tree/master/springboot6-quartz%20X</a><br>该演示是单独Quartz的集成,特意打穿MVC架构使用,问题和理解↓↓↓</p><h4 id="7-2-原理"><a href="#7-2-原理" class="headerlink" title="7-2.原理"></a>7-2.原理</h4><p><strong>假设: 我们需要通过CMS界面来定时执行某个任务</strong></p><p><strong>①</strong>中的集成实际上存在问题,首先我们知道Quartz底层调用<code>Object.wait()</code>方法来阻塞实现</p><p>那么使用Quartz就必须异步实现,否则将会影响程序的正常运行</p><p>该演示中的集成恰好没有实现异步,我们一起来看后果是什么:</p><p>首先:如果我们在Controller调用Job的方法,那么会抛出TimeOut超时,其实很容易理解,</p><p>Object.wait()阻塞下是拿不到返回值的,该方法执行一段时间后,因为Controller中的请求本身有设定超时时间,</p><p>时间到了自然<strong>超时</strong>(防止死锁和同步的问题,spring本身的优化方案)</p><p>超时情况下,我们的Quartz实际上是生效了的,而且会生效两次,这是SpringMVC本身的机制,超时时仍然会刷新该方法</p><p>这个时候的Quartz会被再次执行,导致一个无关紧要的异常提示:<strong>该job已经存在</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误示范</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCityByName</span><span class="params">(String cityName)</span> </span>&#123;</span><br><span class="line">            Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            params.put(<span class="string">"cityName"</span>, cityName);</span><br><span class="line">            <span class="comment">//try..catch省略</span></span><br><span class="line">            quartzManager.addJob(<span class="string">"getCityN"</span>, <span class="string">"cityJ"</span>,</span><br><span class="line">                    <span class="string">"getCityT"</span>, <span class="string">"cityT"</span>,</span><br><span class="line">                    SelectCityJob.class, <span class="string">"0/3 * * * * ?"</span>, params);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"SUCCESS"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>解决这两个问题我进行了如下尝试</p><ol><li>不调用需要返回值</li><li>提前进行任务判断</li><li>(Job中设置@DisallowConcurrentExecution 禁止并发)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初次解决方案</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCityByName</span><span class="params">(String cityName)</span> </span>&#123;</span><br><span class="line">       Boolean exists = quartzManager.notExists(<span class="string">"getCityT"</span>, <span class="string">"cityT"</span>);</span><br><span class="line">           Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">           params.put(<span class="string">"cityName"</span>, cityName);</span><br><span class="line">       <span class="keyword">if</span> (!exists)&#123;</span><br><span class="line">           <span class="comment">//如果存在该任务,那么不操作</span></span><br><span class="line">           System.out.println(<span class="string">"存在该任务哦,可以尝试移除"</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="comment">//如果不存在,那么创建该任务</span></span><br><span class="line">           quartzManager.addJob(<span class="string">"getCityN"</span>, <span class="string">"cityJ"</span>,</span><br><span class="line">                   <span class="string">"getCityT"</span>, <span class="string">"cityT"</span>,</span><br><span class="line">                   SelectCityJob.class, <span class="string">"0/3 * * * * ?"</span>, params);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>实际上该方案只能解决第二个异常提示:<strong>该job已存在</strong></p><p>对于<strong>SpringMVC</strong>超时问题仍然无法解决,那么问题的根源又回到了一开始,为什么Quartz要使用异步来处理</p><p>我们知道SpringMVC本身有一套完善的请求流程(13步),但是我们在handler中的业务操作同步阻塞,</p><p>导致后续的流程需要超时后才能执行</p><p>虽然以上两个异常提示都不会终止程序,也不会终止业务的实现,但是等待超时的时间和毫无意义的异常仍然不利于我们的开发</p><p>同理,在此代码中,<strong>Quartz和dubbo</strong>也会发生同步超时的状态</p><p>因此,我们可以<strong>重新屡一下</strong></p><p>我们需要定时做些事情–&gt;选择定时框架Quartz(扔进大后方)–&gt;Controller难以做到异步通知(X)–&gt;选择MQ消息队列通知(√)–&gt;完美ヾ(ﾟ∀ﾟゞ)</p><h4 id="7-3-正确代码使用"><a href="#7-3-正确代码使用" class="headerlink" title="7-3.正确代码使用"></a>7-3.正确代码使用</h4><p><strong>修改后的完整代码</strong></p><p><strong>Thymeleaf+Freemarker+Spring boot+Dubbo+ZK+JDBC+AOP+Mybatis+Restful+FastDFS+Nginx+Redis+Logback+Quartz+ActiveMQ</strong></p><p><a href="https://github.com/dony15/my_springboot_code/tree/master/springboot7-quartz%20%E2%88%9A-ActiveMQ" target="_blank" rel="noopener">https://github.com/dony15/my_springboot_code/tree/master/springboot7-quartz%20%E2%88%9A-ActiveMQ</a> </p><p><strong>加入MQ</strong></p><p>ActiveMQ</p><p>注意:序列化的对象不可以直接用来做ActiveMQ的消息,需要添加配置允许</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.activemq.packages.trust-all=true   //允许所有</span><br><span class="line">    </span><br><span class="line">此处百度  //允许指定序列化类</span><br><span class="line">    详细可参考ActiveMQ文章</span><br></pre></td></tr></table></figure><p><strong>核心:</strong></p><ol><li>ActiveMQ配置文件</li><li>ActiveProvider</li><li>ActiveConsumer</li></ol><h4 id="7-4-结合数据库"><a href="#7-4-结合数据库" class="headerlink" title="7-4.结合数据库"></a>7-4.结合数据库</h4><p>本次数据库结合并非持久化MQ消息,只是持久化Quartz的任务</p><p>假装结合一下,剩下的就是普通的业务逻辑了,说明书代替就好</p><p><img src="https://i.imgur.com/7Ta6HZq.jpg" alt=""></p><h4 id="7-5-ActiveMQ消息持久化到数据库"><a href="#7-5-ActiveMQ消息持久化到数据库" class="headerlink" title="7-5.ActiveMQ消息持久化到数据库"></a>7-5.ActiveMQ消息持久化到数据库</h4><p><a href="http://topmanopensource.iteye.com/blog/1066383" target="_blank" rel="noopener">http://topmanopensource.iteye.com/blog/1066383</a></p><h4 id="7-6-RocketMQ"><a href="#7-6-RocketMQ" class="headerlink" title="7-6.RocketMQ"></a>7-6.RocketMQ</h4><p>资源传送门</p><p><a href="https://blog.csdn.net/zhangll_2008/article/details/78657177" target="_blank" rel="noopener">https://blog.csdn.net/zhangll_2008/article/details/78657177</a></p><p>在MQ文章中记录个人总结</p><p><a href="https://dony15.github.io/2018/08/24/MQ%E5%9F%BA%E7%A1%80%E4%B8%8E%E8%BF%90%E7%94%A8/" target="_blank" rel="noopener">https://dony15.github.io/2018/08/24/MQ%E5%9F%BA%E7%A1%80%E4%B8%8E%E8%BF%90%E7%94%A8/</a></p><h4 id="7-7-整合Quartz总结"><a href="#7-7-整合Quartz总结" class="headerlink" title="7-7.整合Quartz总结"></a>7-7.整合Quartz总结</h4><h5 id="A-结构问题"><a href="#A-结构问题" class="headerlink" title="A)结构问题"></a>A)结构问题</h5><p>注意其本身需要异步实现,否则基本上会出现超时问题</p><p>本身具有自己的容器,该容器与Spring容器无关,需要配置注入到Spring管理,才能使用Spring中的bean</p><h5 id="B-位置"><a href="#B-位置" class="headerlink" title="B)位置"></a>B)位置</h5><p>建议放在大后方,还是异步处理的问题,最好不要与其他框架同步</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-boot整合篇&quot;&gt;&lt;a href=&quot;#Spring-boot整合篇&quot; class=&quot;headerlink&quot; title=&quot;Spring boot整合篇&quot;&gt;&lt;/a&gt;Spring boot整合篇&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-优秀
      
    
    </summary>
    
      <category term="Spring全家桶" scheme="http://yoursite.com/categories/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Cat监控基础使用</title>
    <link href="http://yoursite.com/2018/08/23/Cat%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/08/23/Cat基础使用/</id>
    <published>2018-08-22T16:00:00.000Z</published>
    <updated>2018-08-23T13:59:08.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cat监控基础使用"><a href="#Cat监控基础使用" class="headerlink" title="Cat监控基础使用"></a>Cat监控基础使用</h2><p>[TOC]</p><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>基于Java开发的实时应用监控平台，提供了全面的监控服务和业务决策支持。 </p><h4 id="1-1-作用"><a href="#1-1-作用" class="headerlink" title="1-1.作用"></a>1-1.作用</h4><p>故障快速发现:主要面向运维，让运维直观到生产环境出现的问题；<br>系统问题分析：面向开发，让开发能了解自己系统实时运行状态、发现问题。<br>分布式追踪</p><h4 id="1-2-CAT报表展示消息类型"><a href="#1-2-CAT报表展示消息类型" class="headerlink" title="1-2.CAT报表展示消息类型"></a>1-2.CAT报表展示消息类型</h4><p><strong>Transaction</strong> 适合记录跨越系统边界的程序访问行为,比如远程调用，数据库调用，也适合执行时间较长的业务逻辑监控，Transaction用来记录一段代码的<strong>执行时间</strong>和<strong>次数</strong>。</p><p><strong>Event</strong> 用来记录一件事发生的次数，比如<strong>记录系统异常</strong>，它和transaction相比<strong>缺少了时间的统计</strong>，开销比transaction要<strong>小</strong>。 </p><p><strong>Heartbeat</strong> 表示程序内定期产生的统计信息, 如CPU%, MEM%, 连接池状态, 系统负载等。 </p><p><strong>Metric</strong> 用于记录业务指标、指标可能包含对一个指标记录次数、记录平均值、记录总和，业务指标<strong>最低统计粒度为1分钟</strong>。 </p><p><strong>Trace</strong> 用于记录基本的trace信息，类似于log4j的info信息，这些信息仅用于查看一些相关信息。</p><h4 id="1-3-CAT架构图"><a href="#1-3-CAT架构图" class="headerlink" title="1-3.CAT架构图"></a>1-3.CAT架构图</h4><p><img src="https://i.imgur.com/xO0meHh.png" alt=""></p><p>追求简单、去中心化、分工协作，两层结构，除了依赖外部存储如HDFS和MySQL外，不依赖其他系统，CAT内部全面采用组件化设计和实现。CAT每天消息量巨大，一台机器是不能处理全部流量，必须分片处理，均衡负载。<br>业务应用目前使用CAT API进行埋点，后台异步线程采用TCP长连接方式，将消息源源不断地传输到后台服务器；CAT具有fail-over(故障切换)机制，在后台服务器不可用时会自动切换到另一台可用服务器。CAT目前使用native协议做序列化和反序列化，将来会考虑支持更多协议，比如thrift。</p><h4 id="1-4-消息处理"><a href="#1-4-消息处理" class="headerlink" title="1-4.消息处理"></a>1-4.消息处理</h4><p>消息处理分五个阶段：收集、传输、分析、存储和展示。</p><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p>GitHub–&gt;Cat master 安装代码/mvnrepo 依赖jar包(Copy到maven库中)<br><a href="https://github.com/dianping/cat" target="_blank" rel="noopener">https://github.com/dianping/cat</a><br>搭建教程有很多,如<br><a href="https://my.oschina.net/fuxingCoder/blog/750639" target="_blank" rel="noopener">https://my.oschina.net/fuxingCoder/blog/750639</a><br><strong>注意下载master中也有搭建教程,较为详细</strong></p><h3 id="3-AOP埋点"><a href="#3-AOP埋点" class="headerlink" title="3.AOP埋点"></a>3.AOP埋点</h3><p>master中整合了框架埋点方案<br>如dubbo/logback/mybatis/aop/url等等,说明书相当完善,自行参考</p><p>CAT以上完整分析<br><a href="https://blog.csdn.net/tankun940507994/article/details/56672385/" target="_blank" rel="noopener">https://blog.csdn.net/tankun940507994/article/details/56672385/</a></p><h3 id="4-使用"><a href="#4-使用" class="headerlink" title="4.使用"></a>4.使用</h3><h4 id="4-1-设置Cat配置文件"><a href="#4-1-设置Cat配置文件" class="headerlink" title="4-1.设置Cat配置文件"></a>4-1.设置Cat配置文件</h4><p>主要是对client.xml/server.xml/datasources.xml进行配置,如果使用公司现成的则该步已经搭建完成,无需配置 </p><h4 id="4-2-引入master打包生成的jar包"><a href="#4-2-引入master打包生成的jar包" class="headerlink" title="4-2.引入master打包生成的jar包"></a>4-2.引入master打包生成的jar包</h4><p>客户端和核心jar</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--cat实时监控--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.dianping.cat&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cat-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.0&lt;/version&gt;&lt;!--根据自己打包的版本号进行修改--&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.dianping.cat&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cat-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="4-3-配置Cat过滤器"><a href="#4-3-配置Cat过滤器" class="headerlink" title="4-3.配置Cat过滤器"></a>4-3.配置Cat过滤器</h4><p>这是整合Springboot的配置方案,如果是普通整合,只需要web.xml中添加servlet过滤器即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package com.dony15.controller;</span><br><span class="line"></span><br><span class="line">import com.dianping.cat.servlet.CatFilter;</span><br><span class="line">import com.dony15.exception.ExceptionHandler;</span><br><span class="line">import org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.core.Ordered;</span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.web.servlet.HandlerExceptionResolver;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line">import javax.servlet.DispatcherType;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by ying on 2017/1/16.</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfigurer extends WebMvcConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; exceptionResolvers) &#123;</span><br><span class="line">        exceptionResolvers.add(new ExceptionHandler());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * cat 过滤器</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean catFilterRegistrationBeanConfig()&#123;</span><br><span class="line">        FilterRegistrationBean registrationBean = new FilterRegistrationBean();</span><br><span class="line">        registrationBean.setFilter(new CatFilter());</span><br><span class="line">        registrationBean.addUrlPatterns(&quot;/*&quot;);</span><br><span class="line">        registrationBean.setDispatcherTypes(DispatcherType.FORWARD, DispatcherType.REQUEST);</span><br><span class="line">        registrationBean.setName(&quot;catFilter&quot;);</span><br><span class="line"></span><br><span class="line">        return  registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 一种增加心跳的方式 也可以用controller来做</span><br><span class="line">     * @param registry</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void addViewControllers( ViewControllerRegistry registry ) &#123;</span><br><span class="line">        registry.addViewController( &quot;/heartBeat&quot; ).setStatusCode(HttpStatus.OK);</span><br><span class="line">        registry.setOrder( Ordered.HIGHEST_PRECEDENCE );</span><br><span class="line">        super.addViewControllers( registry );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-resources中添加配置"><a href="#4-5-resources中添加配置" class="headerlink" title="4-5.resources中添加配置"></a>4-5.resources中添加配置</h4><p>新建META-INF/app.properties文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.name=demo01</span><br></pre></td></tr></table></figure><p>配好的cat,使用相当简单,<strong>引入jar包</strong>,<strong>添加过滤</strong>,<strong>添加一行app.name配置</strong>即可完成基础操作  </p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>需要将script配置文件放入/data/appdatas/cat中  也可以使用脚本中的一键安装script中(未测) </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Cat监控基础使用&quot;&gt;&lt;a href=&quot;#Cat监控基础使用&quot; class=&quot;headerlink&quot; title=&quot;Cat监控基础使用&quot;&gt;&lt;/a&gt;Cat监控基础使用&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; cl
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>IDE基础-Eclipse</title>
    <link href="http://yoursite.com/2018/08/08/IDE%E5%9F%BA%E7%A1%80-Eclipse/"/>
    <id>http://yoursite.com/2018/08/08/IDE基础-Eclipse/</id>
    <published>2018-08-07T16:00:00.000Z</published>
    <updated>2018-08-08T13:31:01.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDE基础"><a href="#IDE基础" class="headerlink" title="IDE基础"></a>IDE基础</h2><p>[TOC]</p><h3 id="1-一楼送给自己"><a href="#1-一楼送给自己" class="headerlink" title="1.一楼送给自己"></a>1.一楼送给自己</h3><p>用习惯IDEA,很长时间没有使用Eclipse了,马上换工作可能又要用回Eclipse,写一篇回归文档,重新巩固一下Eclipse的基础使用,简单粗暴,新手不宜观看        ಠ_ಠ我有一个特异功能！！(Maven+基础快捷键篇)</p><h3 id="2-Maven搭建"><a href="#2-Maven搭建" class="headerlink" title="2.Maven搭建"></a>2.Maven搭建</h3><p><strong>注意开始选择简单maven,否则建出来的项目包可能不完整,主要是jre可能不会自动识别,导致message问题不显示</strong></p><p>本次maven搭建是简单的粗粒度模块切分,主要是熟悉<strong>parent继承</strong>和<strong>聚合项目</strong>在Eclipse中的搭建方式和<strong>BUG坑</strong></p><h4 id="2-1-从首选项导入Maven"><a href="#2-1-从首选项导入Maven" class="headerlink" title="2-1.从首选项导入Maven"></a>2-1.从首选项导入Maven</h4><p><img src="https://i.imgur.com/tRcpLJ5.png" alt=""></p><h4 id="2-2-Maven配置"><a href="#2-2-Maven配置" class="headerlink" title="2-2.Maven配置"></a>2-2.Maven配置</h4><p><img src="https://i.imgur.com/HWKL3sw.png" alt=""></p><h4 id="2-3-搭建Server服务器软件"><a href="#2-3-搭建Server服务器软件" class="headerlink" title="2-3.搭建Server服务器软件"></a>2-3.搭建Server服务器软件</h4><p><img src="https://i.imgur.com/Uad0d58.png" alt=""></p><p>服务器软件可以这样搭<strong>↑↑↑</strong>,但是实际中我们建议使用maven的<strong>tomcat插件↓↓↓</strong>来使用(模块较多时效果更好)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在聚合pom工程配置tomcat插件统一启动即可(减少其他模块频繁打包) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-4-新建Maven工程-parent"><a href="#2-4-新建Maven工程-parent" class="headerlink" title="2-4.新建Maven工程(parent)"></a>2-4.新建Maven工程(parent)</h4><p>(pom)</p><p><img src="https://i.imgur.com/BrsYk8C.png" alt=""></p><h4 id="2-4-parent配置"><a href="#2-4-parent配置" class="headerlink" title="2-4.parent配置"></a>2-4.parent配置</h4><p> (pom)</p><p><img src="https://i.imgur.com/hg3GCVr.png" alt=""><br><img src="https://i.imgur.com/zw9BVzW.png" alt=""></p><h4 id="2-5-common配置"><a href="#2-5-common配置" class="headerlink" title="2-5.common配置"></a>2-5.common配置</h4><p> (jar)</p><p><img src="https://i.imgur.com/U4vDRHB.png" alt=""></p><h4 id="2-6-mvc聚合配置"><a href="#2-6-mvc聚合配置" class="headerlink" title="2-6.mvc聚合配置"></a>2-6.mvc聚合配置</h4><p> (pom) 此处三层架构没有拆解,统一扔到聚合里了,正常可以将模块拆分</p><p><img src="https://i.imgur.com/e5LwXCn.png" alt=""></p><p>注意聚合中的模块大多数会用到common中的工具类或者实体类,这里的pom文件需要依赖common,后面不在提示依赖关系(根据业务逻辑进行依赖jar和模块即可)<br><img src="https://i.imgur.com/oqIeNNn.png" alt=""></p><h4 id="2-7-聚合模块pojo"><a href="#2-7-聚合模块pojo" class="headerlink" title="2-7.聚合模块pojo"></a>2-7.聚合模块pojo</h4><p>(jar)</p><p><img src="https://i.imgur.com/xlEmr3c.png" alt=""><br><img src="https://i.imgur.com/KrG76Qj.png" alt=""><br><img src="https://i.imgur.com/aAuNUhA.png" alt=""></p><h4 id="2-8-聚合模块dao-省略-service"><a href="#2-8-聚合模块dao-省略-service" class="headerlink" title="2-8.聚合模块dao(省略)/service"></a>2-8.聚合模块dao(省略)/service</h4><p>(jar)</p><p><img src="https://i.imgur.com/jsLF0jT.png" alt=""></p><h4 id="2-9-聚合模块controller"><a href="#2-9-聚合模块controller" class="headerlink" title="2-9.聚合模块controller"></a>2-9.聚合模块controller</h4><p>(war)</p><p><img src="https://i.imgur.com/03pqII2.png" alt=""></p><p>注意问题:此时webapp为空(因为选择的基本maven)</p><p><img src="https://i.imgur.com/4VZXkAC.png" alt=""></p><p>右键war模块,选择JavaEE工具重新部署(点一下就行了),webapp将会注入内容(web-inf等)</p><p><img src="https://i.imgur.com/lX1VfJa.png" alt=""></p><h4 id="2-10-聚合结构完成"><a href="#2-10-聚合结构完成" class="headerlink" title="2-10.聚合结构完成"></a>2-10.聚合结构完成</h4><p><img src="https://i.imgur.com/1yxPu4f.png" alt=""></p><h4 id="2-end-总结"><a href="#2-end-总结" class="headerlink" title="2-end.总结"></a>2-end.总结</h4><p>Eclipse的maven搭建并不是很复杂,主要是用习惯了IDEA后,经常会忘记Eclipse搭建的坑,比如</p><ol><li>建立的模块少包(没有选简单maven模板,jre没有注入)</li><li>建立的模块少webapp资源(还是bug,解决方案很多)</li><li>合理的选择打包方式(打pom,src中存在的是site(别紧张,没啥用))</li></ol><p>建议全部项目都以简单Maven模板的方式搭建,区别在于打包方式的不同pom/jar/war</p><h3 id="3-基础快捷键"><a href="#3-基础快捷键" class="headerlink" title="3.基础快捷键"></a>3.基础快捷键</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[核心快捷键]</span><br><span class="line">Alt+/  代码助手/单词补全</span><br><span class="line">Ctrl+1 快速修正</span><br><span class="line">Shift+F2 打开外部Java文档</span><br><span class="line">Ctrl+Shift+O 快速导包/清理无效包</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------(**查看**)----------------</span><br><span class="line">Ctrl+H 搜索对话框</span><br><span class="line">Ctrl+O 快速Outline结构显示</span><br><span class="line">全局 查找并替换 Ctrl+F </span><br><span class="line">Ctrl+e 快速切换编辑页面</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------(**Alt修改代码**)----------------</span><br><span class="line">Ctrl+D 删除行</span><br><span class="line">Alt+Up/Down 上下移动选中行</span><br><span class="line">Ctrl+Alt+↑/↓ 复制当前行到上/下一行(复制增加)</span><br><span class="line">Alt+← 前一个编辑的页面</span><br><span class="line">Alt+→ 下一个编辑的页面(当然是针对上面那条来说了)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------</span><br><span class="line">Ctrl+Shift+F 格式化当前代码</span><br><span class="line">Alt+Shift+M 抽取方法 (这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------</span><br><span class="line">Ctrl+Shift+S 保存所有</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------------[辅助使用]-----------------------------------</span><br><span class="line">Ctrl+Shift+X/Y 改变大小写</span><br><span class="line">Alt+Shift+T 显示重构菜单</span><br><span class="line">Ctrl+P 全局打印</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------------[Debug辅助]-----------------------------------</span><br><span class="line">F5：Step Into（debug）</span><br><span class="line">F6：Step over（debug）</span><br><span class="line">F7：Step return（debug）</span><br><span class="line">F8：Resume（debug）</span><br><span class="line">F11：debug上一个应用（debug）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;IDE基础&quot;&gt;&lt;a href=&quot;#IDE基础&quot; class=&quot;headerlink&quot; title=&quot;IDE基础&quot;&gt;&lt;/a&gt;IDE基础&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-一楼送给自己&quot;&gt;&lt;a href=&quot;#1-一楼送给自己&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="IDE" scheme="http://yoursite.com/categories/IDE/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux基础操作文档</title>
    <link href="http://yoursite.com/2018/08/08/Linux%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/08/08/Linux基础操作/</id>
    <published>2018-08-07T16:00:00.000Z</published>
    <updated>2018-08-08T11:05:09.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux基础操作文档"><a href="#Linux基础操作文档" class="headerlink" title="Linux基础操作文档"></a>Linux基础操作文档</h2><p>[TOC]</p><h3 id="1-User操作"><a href="#1-User操作" class="headerlink" title="1.User操作"></a>1.User操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo(Superuser do) 超级用户操作</span><br><span class="line">passwd 修改密码</span><br><span class="line">chgrp(Change group) 改变用户组</span><br><span class="line">ps(Process Status)进程状态</span><br></pre></td></tr></table></figure><h3 id="2-文件-端口系统的增删改查"><a href="#2-文件-端口系统的增删改查" class="headerlink" title="2.文件/端口系统的增删改查"></a>2.文件/端口系统的增删改查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//增</span><br><span class="line">mkdir/mkdirs 创建文件夹/指定路径文件夹</span><br><span class="line">vim 创建/打开指定文件</span><br><span class="line">tar(解压) -zxvf(每个字母都有意义) 压缩包名字.tar.gz结尾</span><br><span class="line"></span><br><span class="line">//删</span><br><span class="line">rm </span><br><span class="line">umount(Unmount) 卸载</span><br><span class="line">rm -f file1 删除一个叫做 &apos;file1&apos; 的文件&apos; </span><br><span class="line">rmdir dir1 删除一个叫做 &apos;dir1&apos; 的目录&apos; </span><br><span class="line">rm -rf dir1 删除一个叫做 &apos;dir1&apos; 的目录并同时删除其内容 </span><br><span class="line">rm -rf dir1 dir2 同时删除两个目录及它们的内容 </span><br><span class="line"></span><br><span class="line">//改</span><br><span class="line">cp 拷贝粘贴</span><br><span class="line">mv xxx  xxx 移动/重命名</span><br><span class="line"></span><br><span class="line">//****查****</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">[普通查看]</span><br><span class="line">cd 查看各种目录</span><br><span class="line">ls(list) 查看当前文件夹</span><br><span class="line">cat 查看文件内容</span><br><span class="line">pwd 当前文件夹全路径</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line">[动态查看文本]</span><br><span class="line">tail -2 file1 查看一个文件的最后两行 </span><br><span class="line">tail -f /var/log/messages 实时查看被添加到一个文件中的内容 </span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line">[查看内存]</span><br><span class="line">cat /proc/meminfo 查看详细内存使用情况</span><br><span class="line"> free -h    快速查询内存使用(单位自动换算)</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line">[核心组成]</span><br><span class="line">/etc 存放配置文件的地方.配置文件目录</span><br><span class="line">/dev(DEVices)  设备</span><br><span class="line">/usr = Unix Shared Resources 共享资源</span><br></pre></td></tr></table></figure><h3 id="3-文本操作"><a href="#3-文本操作" class="headerlink" title="3.文本操作"></a>3.文本操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">i 进入insert状态</span><br><span class="line">esc 进入文本操作</span><br><span class="line">:0 光标回到第一行</span><br><span class="line">:$光标回到最后一行</span><br><span class="line">/dsf 搜索dsf这个字符串</span><br><span class="line">:u 撤销,相当于ctrl+Z</span><br><span class="line">:q 退出</span><br><span class="line">:wq 保存并退出</span><br><span class="line">注意:断电时需要删除临时文件.xxx.swp</span><br></pre></td></tr></table></figure><h3 id="4-网络操作"><a href="#4-网络操作" class="headerlink" title="4.网络操作"></a>4.网络操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping 测试ping值</span><br><span class="line">ifconfig 查看网关地址等</span><br></pre></td></tr></table></figure><h3 id="5-端口及PID查询"><a href="#5-端口及PID查询" class="headerlink" title="5.端口及PID查询"></a>5.端口及PID查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------------------------</span><br><span class="line">[查看进程]</span><br><span class="line"># ps -aux|grep java      //显示所有进程名中包含java字符串的进程</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">[查看端口]</span><br><span class="line">netstat -t 显示TCP协议的连接情况。</span><br><span class="line">netstat -u 显示UDP协议的连接情况。</span><br><span class="line">netstat -tln 查看linux的端口使用情况</span><br><span class="line">netstat -aln|grep 8080 查看8080端口占用情况</span><br></pre></td></tr></table></figure><h3 id="6-软件管理"><a href="#6-软件管理" class="headerlink" title="6.软件管理"></a>6.软件管理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1.源码安装：</span><br><span class="line">tar -zxvf filename.tar.gz 解压</span><br><span class="line">make 编译</span><br><span class="line">make install  安装</span><br><span class="line">make clean  清除1</span><br><span class="line">make distclean 清除2</span><br><span class="line"></span><br><span class="line">2.rpm(二进制包)安装：</span><br><span class="line">(安装本地自己下载的rpm软件包，自己解决软件之间的依赖。)</span><br><span class="line"> rpm -ivh xxx.rpm 安装</span><br><span class="line"> rpm -Uvh xxx.rpm 升级</span><br><span class="line">/**</span><br><span class="line"> 一般用不到</span><br><span class="line"> rpm -e xxx.rpm 反安装</span><br><span class="line"> rpm -qpi xxx.rpm 查询软件包的详细信息</span><br><span class="line"> rpm -qf xxx.rpm 查询某个文件是属于那个rpm包</span><br><span class="line">  rpm -qpl xxx.rpm 查该软件包会向系统里面写入哪些文件</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">3.yum安装：</span><br><span class="line">(在线安装，可以解决依赖问题。)</span><br><span class="line"> 通过yum安装的php，是不需要手动配置环境变量的。配置文件目录在/etc/php.ini</span><br><span class="line"> 通过yum安装的apache2，配置文件目录在/etc/httpd/conf/</span><br><span class="line"> rm -f /etc/httpd/conf.d/welcome.conf /var/www/error/noindex.html #删除默认测试页</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">[关闭]</span><br><span class="line"></span><br><span class="line">kill 进程号 正常关闭 (正常建议使用此命令)</span><br><span class="line">kill -9 进程号  强制关闭  (暴力关闭)</span><br></pre></td></tr></table></figure><h3 id="7-开发软件操作"><a href="#7-开发软件操作" class="headerlink" title="7.开发软件操作"></a>7.开发软件操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/sshd start 启动sshd服务器</span><br><span class="line">ps -ef|grep (服务名)如redis  服务查询(通用)</span><br><span class="line">tomcat</span><br><span class="line">    service tomcat stop 停止</span><br><span class="line">service tomcat start 启动</span><br><span class="line">    tail -f logs/catalina.out 卡特琳娜日志查询 在tomcat根目录下查看</span><br><span class="line"></span><br><span class="line">http://www.dony15.com:8080/dubbo-admin-2.8.4/governance/services  查看dubbo服务管理</span><br><span class="line"></span><br><span class="line">mysql</span><br><span class="line">    service mysql stop 停止</span><br><span class="line">service mysql start 启动</span><br><span class="line"></span><br><span class="line">zookeeper(目录)</span><br><span class="line">./zkServer.sh start 启动</span><br><span class="line">./zkServer.sh status 查看状态</span><br><span class="line">./zkServer.sh stop 停止</span><br><span class="line"></span><br><span class="line">redis(目录)</span><br><span class="line">    ./redis-server redis.conf 启动</span><br><span class="line">    ./redis-cli  -p 6379  连接</span><br><span class="line">    ./bin/redis-cli -p 7001 shutdown 停止</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">redis集群(目录)</span><br><span class="line">    ./start-cluster.sh 启动</span><br><span class="line">    ./stop-cluster.sh  停止</span><br><span class="line">    ./redis-cli -h 127.0.0.1 -p 7001 -c -a 123456    远程连接(密码可删)</span><br><span class="line">    ./redis-trib.rb add-node 127.0.0.1:7007 127.0.0.1:7001    追加节点(需要注意步骤较多)</span><br><span class="line">    ./redis-trib.rb del-node 127.0.0.1:7001 a06a54ab354327cd9920fa8b14a7b8b71a4d445a    删除</span><br><span class="line">redis哨兵</span><br><span class="line">     ???</span><br><span class="line"></span><br><span class="line">tracker</span><br><span class="line">    /usr/local/software/fastdfs-master/init.d/fdfs_trackerd start 启动</span><br><span class="line">    ps -ef | grep fdfs_trackerd 查看状态</span><br><span class="line">storage</span><br><span class="line">     /usr/local/software/fastdfs-master/init.d/fdfs_storaged start 启动</span><br><span class="line">    ps -ef | grep fdfs_storaged 查看状态</span><br><span class="line"></span><br><span class="line">nginx</span><br><span class="line">    nginx    启动</span><br><span class="line">    nginx -s stop 停止</span><br><span class="line">    nginx -s reload 重新启动</span><br><span class="line"></span><br><span class="line">activeMQ</span><br><span class="line">    ./activemq start  启动(bin目录下)</span><br><span class="line">    ./activemq stop   停止</span><br><span class="line">    ./activemq status 查看状态</span><br><span class="line">    访问服务器的8161端口</span><br><span class="line">    http://www.vm.com:8161/admin/</span><br><span class="line">    用户名密码都是admin</span><br></pre></td></tr></table></figure><h3 id="8-redis集群内部指令"><a href="#8-redis集群内部指令" class="headerlink" title="8.redis集群内部指令"></a>8.redis集群内部指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看</span><br><span class="line">info replication 查看节点信息</span><br><span class="line">quit  退出</span><br></pre></td></tr></table></figure><h3 id="9-防火墙设置-端口"><a href="#9-防火墙设置-端口" class="headerlink" title="9.防火墙设置(端口)"></a>9.防火墙设置(端口)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用iptables开放如下端口</span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">保存</span><br><span class="line">/etc/rc.d/init.d/iptables save</span><br><span class="line">重启服务</span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><h3 id="10-服务器备用url"><a href="#10-服务器备用url" class="headerlink" title="10.服务器备用url"></a>10.服务器备用url</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[solor]</span><br><span class="line">http://www.fzs.com:8080/solr/admin.html</span><br><span class="line"></span><br><span class="line">[dubbo]</span><br><span class="line">http://www.fzs.com:8080/dubbo-admin/    u:root    p:root</span><br><span class="line"></span><br><span class="line">[activeMQ]</span><br><span class="line">http://www.fzs.com:8161/admin/index.jsp    u:admin    p:admin</span><br></pre></td></tr></table></figure><h3 id="11-Linux连接问题解决"><a href="#11-Linux连接问题解决" class="headerlink" title="11.Linux连接问题解决"></a>11.Linux连接问题解决</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Xshell问题*</span><br><span class="line">/etc/init.d/sshd start 启动sshd服务器</span><br><span class="line">/etc/init.d/iptables stop 关闭防火墙</span><br><span class="line"></span><br><span class="line">配置hosts</span><br><span class="line">vim /etc/hosts</span><br><span class="line"></span><br><span class="line">mysql远程连接失败问题*</span><br><span class="line">use mysql; </span><br><span class="line">UPDATE user SET Password=PASSWORD(&apos;123456&apos;) where USER=&apos;root&apos;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="End-各种软件-框架连接问题"><a href="#End-各种软件-框架连接问题" class="headerlink" title="End.各种软件/框架连接问题"></a>End.各种软件/框架连接问题</h3><h4 id="1-MySQL连接问题"><a href="#1-MySQL连接问题" class="headerlink" title="1.MySQL连接问题"></a>1.MySQL连接问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">MySQL远程访问问题(搭配上面):授权法。</span><br><span class="line"></span><br><span class="line">例如，你想myuser使用mypassword从任何主机连接到mysql服务器的话。</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;myuser&apos;@&apos;%&apos; IDENTIFIED BY &apos;mypassword&apos; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">FLUSH   PRIVILEGES;</span><br><span class="line"></span><br><span class="line">如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器，并使用mypassword作为密码</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;myuser&apos;@&apos;192.168.1.3&apos; IDENTIFIED BY &apos;mypassword&apos; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">FLUSH   PRIVILEGES;</span><br><span class="line"></span><br><span class="line">如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器的dk数据库，并使用mypassword作为密码</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON dk.* TO &apos;myuser&apos;@&apos;192.168.1.3&apos; IDENTIFIED BY &apos;mypassword&apos; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">FLUSH   PRIVILEGES;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">我用的第一个方法,最后执行一个语句 mysql&gt;FLUSH RIVILEGES 使修改生效.就可以了</span><br><span class="line"></span><br><span class="line">另外一种方法,不过我没有亲自试过的,在csdn.net上找的,可以看一下.</span><br><span class="line"></span><br><span class="line">在安装mysql的机器上运行：</span><br><span class="line"></span><br><span class="line">1、d:/mysql/bin/&gt;mysql   -h   localhost   -u   root  //这样应该可以进入MySQL服务器</span><br><span class="line"></span><br><span class="line">2、mysql&gt;GRANT   ALL   PRIVILEGES   ON   *.*   TO   &apos;root&apos;@&apos;%&apos;   WITH   GRANT   OPTION  //赋予任何主机访问数据的权限</span><br><span class="line"></span><br><span class="line">3、mysql&gt;FLUSH   PRIVILEGES  //修改生效</span><br><span class="line"></span><br><span class="line">4、mysql&gt;EXIT  //退出MySQL服务器</span><br><span class="line"></span><br><span class="line">这样就可以在其它任何的主机上以root身份登录啦！</span><br><span class="line"></span><br><span class="line">来源： https://blog.csdn.net/zyj405569395/article/details/53614356</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Linux基础操作文档&quot;&gt;&lt;a href=&quot;#Linux基础操作文档&quot; class=&quot;headerlink&quot; title=&quot;Linux基础操作文档&quot;&gt;&lt;/a&gt;Linux基础操作文档&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-User操作&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Linux基础" scheme="http://yoursite.com/categories/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>volatile基础</title>
    <link href="http://yoursite.com/2018/08/05/volatile%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/08/05/volatile基础/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-08T11:14:26.861Z</updated>
    
    <content type="html"><![CDATA[<h2 id="volatile基础"><a href="#volatile基础" class="headerlink" title="volatile基础"></a>volatile基础</h2><p>[TOC]</p><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p><strong>A.</strong>轻量级同步机制,与synchronized重量级锁不同,不会引起线程的上下文切换,但是需要注意两个问题:</p><ol><li>复合类操作无法同步 如 <strong>count++</strong></li><li>在其他变量的不变式中包含则无法同步 如<strong>常量和条件</strong>(后续再深入理解不变式)</li></ol><p><strong>B.</strong>阻止指令重排</p><h3 id="2-内存可见性"><a href="#2-内存可见性" class="headerlink" title="2.内存可见性"></a>2.内存可见性</h3><p>volatile是轻量级的同步机制,相比于synchronized重量级锁来说 ,能够节省更大的消耗,虽然在总体能力上不如synchronized安全,但是在一定场合也具有自己的优势,合理的利用volatile能够让程序更高效的运行</p><p>volatile修饰的属性对整个内存来说是可见的,即:每个线程获取到的该数据都是最新的(此处内存分配属逻辑模拟)</p><ul><li>A线程(工作内存)→<pre><code>} 主内存空间 </code></pre></li><li>B线程(工作内存)→</li></ul><p>对线程来说,正常的共享资源会从主内存中copy到自己的工作内存中,这里如同内存和硬盘的区别,可以更加快速的使用copy的资源,但是此时的工作内存对于其他线程是不可见的,因此很容易因为并发产生数据异常</p><p>当使用volatile时,该共享资源每次更新都会被同步到主内存空间中,对于其他线程来说,该数据始终是最新的,因此可以一定程度的解决并发的问题,但是有一些情况volatile无法直接实现,如<strong>非复合类操作</strong></p><h3 id="3-解决count-原子性问题"><a href="#3-解决count-原子性问题" class="headerlink" title="3.解决count++原子性问题"></a>3.解决count++原子性问题</h3><p>count++之类的非符合类操作,volatile无法保证他的原子性问题,使共享资源无法实时同步,进而引发并发问题</p><p>复合类操作过程:</p><ol><li>读取</li><li>运算</li><li>赋值</li></ol><p>因为volatile本身只是轻量级的同步机制,并非锁机制,当复合类操作的过程中可能有其他线程继续操作该资源,从而导致并发问题</p><p><strong>解决:循环CAS 方案(待研究)</strong></p><h3 id="4-阻止指令重排"><a href="#4-阻止指令重排" class="headerlink" title="4.阻止指令重排"></a>4.阻止指令重排</h3><p>指令重排是java优化程序性能的一种手段(提供并行度),但是重排也有一定的规则:</p><p>指令重排不会对<strong>存在依赖关系</strong>的数据进行操作</p><p>​    如a=1;b=a</p><p>指令重排不会对单线程下的结果进行操作</p><p>​    如a=1;b=2;c=a+b;</p><p>被volatile修饰的变量,在编译时,会插入内存屏障来阻止处理器等对数据的指令重排,阻止指令重排规则:</p><ol><li>第一个是volatile读操作时,无论第二个是什么操作,都会阻止指令重排</li><li>第二个是volatile写操作时,无论第一个是什么操作,都会阻止指令重排</li><li>第一个是volatile写操作,得个是volatile读操作时,都会阻止指令重排</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;volatile基础&quot;&gt;&lt;a href=&quot;#volatile基础&quot; class=&quot;headerlink&quot; title=&quot;volatile基础&quot;&gt;&lt;/a&gt;volatile基础&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念
      
    
    </summary>
    
      <category term="SE基础" scheme="http://yoursite.com/categories/SE%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring Cloud基础使用</title>
    <link href="http://yoursite.com/2018/07/20/Spring%20Cloud%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/07/20/Spring Cloud基础使用/</id>
    <published>2018-07-19T16:00:00.000Z</published>
    <updated>2018-07-24T10:34:11.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Cloud基础使用"><a href="#Spring-Cloud基础使用" class="headerlink" title="Spring Cloud基础使用"></a>Spring Cloud基础使用</h2><p>[TOC]</p><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><h4 id="1-1-什么是微服务"><a href="#1-1-什么是微服务" class="headerlink" title="1-1.什么是微服务?"></a>1-1.什么是微服务?</h4><p>微服务英文名称Micro service，<strong>Micro service架构模式</strong>就是将整个Web应用组织为<strong>一系列小的Web服务</strong>。</p><p>这些小的Web服务可以<strong>独立地编译及部署，并通过各自暴露的API接口相互通讯</strong>。</p><p>它们彼此相互协作，作为一个整体为用户提供功能，却可以<strong>独立地进行扩展</strong>。 </p><h4 id="1-2-微服务架构需要的功能或使用场景"><a href="#1-2-微服务架构需要的功能或使用场景" class="headerlink" title="1-2.微服务架构需要的功能或使用场景"></a>1-2.微服务架构需要的功能或使用场景</h4><ul><li>将整个系统根据业务逻辑拆分为多个子系统</li><li>每个子服务器可以部署多个应用,应用之间使用负载均衡</li></ul><ol><li>需要一个服务注册中心,所有的应用都在注册中心注册,负载均衡也在注册中心通过策略实现</li><li>所有的客户端都通过同一个网关地址访问后台的服务，通过路由配置，网关来判断一个URL请求由哪个服务处理。请求转发到服务上的时候也使用负载均衡。 </li><li>服务之间有时候也需要相互访问。例如有一个用户模块，其他服务在处理一些业务的时候，要获取用户服务的用户数据。 </li><li>需要一个断路器，及时处理服务调用时的超时和错误，防止由于其中一个服务的问题而导致整体系统的瘫痪。 </li><li>还需要一个监控功能，监控每个服务调用花费的时间等。 </li></ol><p>  目前主流的微服务框架：Dubbo、 SpringCloud、thrift、Hessian等，目前国内的中小企业用的大多数都是Dubbo，SpringCloud </p><h4 id="1-3-Spring-Colud概念"><a href="#1-3-Spring-Colud概念" class="headerlink" title="1-3.Spring Colud概念"></a>1-3.Spring Colud概念</h4><p>　springCloud是<strong>基于SpringBoot</strong>的一整套实现微服务的框架。</p><p>他提供了微服务开发所需的</p><p><strong>配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理</strong>等组件。</p><p>最重要的是，</p><p>  跟spring boot框架一起使用的话，会让你开发微服务架构的云服务非常好的方便。</p><h3 id="2-组成"><a href="#2-组成" class="headerlink" title="2.组成"></a>2.组成</h3><p><img src="https://i.imgur.com/SSZ7cM9.jpg" alt=""></p><h4 id="2-1-Spring-cloud子项目包括"><a href="#2-1-Spring-cloud子项目包括" class="headerlink" title="2-1.Spring cloud子项目包括"></a><strong>2-1.Spring cloud子项目包括</strong></h4><p> <strong>Spring Cloud Config</strong>：配置管理开发工具包，可以让你把配置放到远程服务器，目前支持本地存储、Git以及Subversion。 </p><p><strong>Spring Cloud Bus</strong>：事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与Spring Cloud Config联合实现热部署。 </p><p><strong>Spring Cloud Netflix</strong>：针对多种Netflix组件提供的开发工具包，其中包括Eureka、Hystrix、Zuul、Archaius等。 </p><p><strong>Netflix Eureka</strong>：云端负载均衡，一个基于 REST 的服务，用于定位服务，以实现云端的负载均衡和中间层服务器的故障转移。 </p><p><strong>Netflix Hystrix</strong>：容错管理工具，旨在通过控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力。 </p><p><strong>Netflix Zuul</strong>：边缘服务工具，是提供动态路由，监控，弹性，安全等的边缘服务。 </p><p><strong>Netflix Archaius</strong>：配置管理API，包含一系列配置管理API，提供动态类型化属性、线程安全配置操作、轮询框架、回调机制等功能。 </p><p><strong>Spring Cloud for Cloud Foundry</strong>：通过Oauth2协议绑定服务到CloudFoundry，CloudFoundry是VMware推出的开源PaaS云平台。 </p><p><strong>Spring Cloud Sleuth</strong>：日志收集工具包，封装了Dapper,Zipkin和HTrace操作。 </p><p><strong>Spring Cloud Data Flow</strong>：大数据操作工具，通过命令行方式操作数据流。 </p><p><strong>Spring Cloud Security</strong>：安全工具包，为你的应用程序添加安全控制，主要是指OAuth2。 </p><p><strong>Spring Cloud Consul</strong>：封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。 </p><p><strong>Spring Cloud Zookeeper</strong>：操作Zookeeper的工具包，用于使用zookeeper方式的服务注册和发现。 </p><p><strong>Spring Cloud Stream</strong>：数据流操作开发包，封装了与Redis,Rabbit、Kafka等发送接收消息。 </p><p><strong>Spring Cloud CLI</strong>：基于 Spring Boot CLI，可以让你以命令行方式快速建立云组件。 </p><h3 id="3-特点"><a href="#3-特点" class="headerlink" title="3.特点"></a>3.特点</h3><ol><li>约定优于配置 </li><li>开箱即用、快速启动 </li><li>适用于各种环境 </li><li>轻量级的组件 </li><li>组件支持丰富，功能齐全 </li></ol><h3 id="4-Dubbo和Spring-Cloud对比"><a href="#4-Dubbo和Spring-Cloud对比" class="headerlink" title="4.Dubbo和Spring Cloud对比"></a>4.Dubbo和Spring Cloud对比</h3><p>**传送门:<a href="https://www.hellojava.com/a/1040.html" target="_blank" rel="noopener">https://www.hellojava.com/a/1040.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-Cloud基础使用&quot;&gt;&lt;a href=&quot;#Spring-Cloud基础使用&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud基础使用&quot;&gt;&lt;/a&gt;Spring Cloud基础使用&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 
      
    
    </summary>
    
      <category term="Spring全家桶" scheme="http://yoursite.com/categories/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>SQL银行模拟语句整合</title>
    <link href="http://yoursite.com/2018/07/15/SQL%E9%93%B6%E8%A1%8C%E6%A8%A1%E6%8B%9F%E8%AF%AD%E5%8F%A5%E6%95%B4%E5%90%88/"/>
    <id>http://yoursite.com/2018/07/15/SQL银行模拟语句整合/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2018-07-21T08:59:27.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL银行模拟语句整合"><a href="#SQL银行模拟语句整合" class="headerlink" title="SQL银行模拟语句整合"></a>SQL银行模拟语句整合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br></pre></td><td class="code"><pre><span class="line">--创建表空间</span><br><span class="line">create tablespace bankspace datafile &apos;E:\bank\bank.dbf&apos; size 10m autoextend on;</span><br><span class="line">--创建用户bankuser</span><br><span class="line">create user bankuser identified by bankuser default tablespace bankspace;</span><br><span class="line">--</span><br><span class="line">drop table tradeinfo;</span><br><span class="line">drop table userInfo;</span><br><span class="line">drop table cardInfo;</span><br><span class="line">drop table Deposit;</span><br><span class="line">--为用户授权</span><br><span class="line">grant connect,resource to bankuser;</span><br><span class="line">--创建用户信息表</span><br><span class="line">create table userInfo --用户信息表</span><br><span class="line">(</span><br><span class="line">customerID number not null,</span><br><span class="line">customerName varchar2(8),</span><br><span class="line">PID varchar2(18) not null,</span><br><span class="line">telephone varchar2(20) not null,</span><br><span class="line">address varchar(50)</span><br><span class="line">);</span><br><span class="line">--创建银行卡信息表</span><br><span class="line">create table cardinfo(</span><br><span class="line">cardid char(19) NOT NULL,</span><br><span class="line">curid varchar(10)NOT NULL,--币种</span><br><span class="line">savingid number NOT NULL,</span><br><span class="line">openDate date NOT NULL,</span><br><span class="line">openMoney number NOT NULL,</span><br><span class="line">balance number NOT NULL,</span><br><span class="line">pass char(6)NOT NULL,</span><br><span class="line">isreportloss number(1)NOT NULL,--判断卡是否挂失</span><br><span class="line">customerID number NOT NULL</span><br><span class="line">);</span><br><span class="line">select * from userInfo;</span><br><span class="line">--创建交易信息表</span><br><span class="line">create table tradeInfo </span><br><span class="line">(</span><br><span class="line">tradeDate DATE NOT NULL,</span><br><span class="line">tradeType Char(4) NOT NULL,</span><br><span class="line">cardID  CHAR(19) NOT NULL,</span><br><span class="line">tradeMoney NUMBER NOT NULL,</span><br><span class="line">remark LONG</span><br><span class="line">);</span><br><span class="line">select * from tradeInfo;</span><br><span class="line">--创建存款类型表</span><br><span class="line">create table deposit (</span><br><span class="line">savingID NUMBER NOT NULL,</span><br><span class="line">savingName varchar(20)NOT NULL,</span><br><span class="line">descrip varchar(50)</span><br><span class="line">);</span><br><span class="line">/*为deposit表添加约束*/</span><br><span class="line">alter table deposit add constraint pa_savingID</span><br><span class="line">primary key(savingid);</span><br><span class="line">/*为userInfo添加约束*/</span><br><span class="line">--主键</span><br><span class="line">alter table userinfo add constraint pk_customerID</span><br><span class="line">primary key(customerID);</span><br><span class="line">--check约束，身份证号长度</span><br><span class="line">alter table userinfo add constraint ck_pid</span><br><span class="line">check(length(pid)=18 or length(pid)=15);</span><br><span class="line">--unique唯一约束，身份证号唯一</span><br><span class="line">alter table userinfo add constraint uq_pid unique(pid);</span><br><span class="line">--check约束，电话号码</span><br><span class="line">alter table userinfo add constraint ck_telephone</span><br><span class="line">check(regexp_like(telephone,&apos;(^\d&#123;3,4&#125;-\d&#123;7,8&#125;$)|(^\d&#123;11&#125;$)&apos;));</span><br><span class="line">--查看创建的约束</span><br><span class="line">select * from user_constraints where table_name=&apos;DEPOSIT&apos;;</span><br><span class="line">select * from user_constraints where table_name=&apos;USERINFO&apos;;</span><br><span class="line">/*为cardInfo添加约束*/</span><br><span class="line">--主键</span><br><span class="line">alter table cardinfo add constraint pk_cardid</span><br><span class="line">primary key(cardid);</span><br><span class="line">--check约束，卡号</span><br><span class="line">alter table cardinfo add constraint ck_cardID</span><br><span class="line">check(regexp_like(cardid,&apos;1010 3576 \d&#123;4&#125; \d&#123;4&#125;&apos;));</span><br><span class="line">--修改表中字段</span><br><span class="line">alter table cardInfo modify (curid varchar(10) default &apos;RMB&apos;);</span><br><span class="line">alter table cardInfo modify (opendate varchar(10) default sysdate);</span><br><span class="line">--预存金额大于等于1</span><br><span class="line">alter table cardinfo add constraint ck_openmoney</span><br><span class="line">check(openmoney&gt;=1);</span><br><span class="line">--check 约束 ，预存金额大于等于1</span><br><span class="line">alter table cardinfo add constraint ck_balance</span><br><span class="line">check(balance&gt;=1);</span><br><span class="line">--密码检查约束，密码必须是六位数字</span><br><span class="line">alter table cardinfo add constraint ck_pass</span><br><span class="line">check(regexp_like(pass,&apos;^[0-9]&#123;6&#125;$&apos;));</span><br><span class="line">--密码默认6个8</span><br><span class="line">alter table cardinfo modify (pass char(6) default &apos;888888&apos;);</span><br><span class="line">--是否挂失默认值0</span><br><span class="line">alter table cardinfo modify (isreportloss number(1) default 0);</span><br><span class="line">--外键约束</span><br><span class="line">alter table cardinfo add constraint fk_customerid</span><br><span class="line">foreign key(customerid)references userInfo(customerid);</span><br><span class="line">--外键约束</span><br><span class="line">alter table cardinfo add constraint fk_savingid</span><br><span class="line">foreign key(savingid)references deposit(savingid);</span><br><span class="line">/*为tradeinfo 表添加约束*/</span><br><span class="line">--交易类型(存入、支取)</span><br><span class="line">alter table tradeinfo add constraint ck_tradetype</span><br><span class="line">check(tradetype in (&apos;存入&apos;,&apos;支取&apos;));</span><br><span class="line">--外键</span><br><span class="line">alter table tradeinfo add constraint fk_cardID</span><br><span class="line">foreign key(cardid)references cardInfo(cardId);</span><br><span class="line">--交易金额大于0</span><br><span class="line">alter table tradeinfo add constraint ck_tradeMoney</span><br><span class="line">check(tradeMoney&gt;0);</span><br><span class="line">--交易时间</span><br><span class="line">alter table tradeinfo modify (tradeDate date default sysdate);</span><br><span class="line">/***************************************************************************************************/</span><br><span class="line">/*                                        插入测试数据                                              */</span><br><span class="line">/***************************************************************************************************/</span><br><span class="line">/*</span><br><span class="line"> ==========================</span><br><span class="line"> 测试数据</span><br><span class="line"> ==========================</span><br><span class="line"> */</span><br><span class="line">--存款类型</span><br><span class="line">INSERT INTO deposit (savingID,savingName,descrip) VALUES (1,&apos;活期&apos;,&apos;按存款日结算利息&apos;);</span><br><span class="line">INSERT INTO deposit (savingID,savingName,descrip) VALUES (2,&apos;定期一年&apos;,&apos;存款期是1年&apos;);</span><br><span class="line">INSERT INTO deposit (savingID,savingName,descrip) VALUES (3,&apos;定期二年&apos;,&apos;存款期是2年&apos;);</span><br><span class="line">INSERT INTO deposit (savingID,savingName,descrip) VALUES (4,&apos;定期三年&apos;,&apos;存款期是3年&apos;);</span><br><span class="line">INSERT INTO deposit (savingID,savingName) VALUES (5,&apos;定活两便&apos;);</span><br><span class="line">INSERT INTO deposit (savingID,savingName) VALUES (6,&apos;通知&apos;);</span><br><span class="line">INSERT INTO deposit (savingID,savingName,descrip) VALUES (7,&apos;零存整取一年&apos;,&apos;存款期是1年&apos;);</span><br><span class="line">INSERT INTO deposit (savingID,savingName,descrip) VALUES (8,&apos;零存整取二年&apos;,&apos;存款期是2年&apos;);</span><br><span class="line">INSERT INTO deposit (savingID,savingName,descrip) VALUES (9,&apos;零存整取三年&apos;,&apos;存款期是3年&apos;);</span><br><span class="line">INSERT INTO deposit (savingID,savingName,descrip) VALUES (10,&apos;存本取息五年&apos;,&apos;按月支取利息&apos;);</span><br><span class="line">SELECT * FROM DEPOSIT;</span><br><span class="line">SELECT * FROM userinfo;</span><br><span class="line">SELECT * FROM cardinfo;</span><br><span class="line">SELECT * FROM tradeinfo;</span><br><span class="line">INSERT INTO userInfo(customerID,customerName,PID,telephone,address )</span><br><span class="line">     VALUES(1,&apos;张三&apos;,&apos;123456789012345&apos;,&apos;010-67898978&apos;,&apos;北京海淀&apos;);</span><br><span class="line">INSERT INTO cardInfo(cardID,savingID,openMoney,balance,customerID)</span><br><span class="line">     VALUES(&apos;1010 3576 1234 5678&apos;,1,1000,1000,1);</span><br><span class="line">INSERT INTO userInfo(customerID,customerName,PID,telephone)</span><br><span class="line">     VALUES(2,&apos;李四&apos;,&apos;321245678912345678&apos;,&apos;0478-44443333&apos;);</span><br><span class="line">INSERT INTO cardInfo(cardID,savingID,openMoney,balance,customerID)</span><br><span class="line">     VALUES(&apos;1010 3576 1212 1134&apos;,2,1,1,2);</span><br><span class="line">INSERT INTO userInfo(customerID,customerName,PID,telephone)</span><br><span class="line">     VALUES(3,&apos;王五&apos;,&apos;567891234532124670&apos;,&apos;010-44443333&apos;);</span><br><span class="line">INSERT INTO cardInfo(cardID,savingID,openMoney,balance,customerID)</span><br><span class="line">     VALUES(&apos;1010 3576 1212 1130&apos;,2,1601,1601,3);</span><br><span class="line">INSERT INTO userInfo(customerID,customerName,PID,telephone)</span><br><span class="line">     VALUES(4,&apos;丁六&apos;,&apos;567891321242345618&apos;,&apos;0752-43345543&apos;);</span><br><span class="line">INSERT INTO cardInfo(cardID,savingID,openMoney,balance,customerID)</span><br><span class="line">     VALUES(&apos;1010 3576 1212 1004&apos;,2,1,1,4);</span><br><span class="line">/*</span><br><span class="line">张三的卡号（1010 3576 1234 5678）取款900元，李四的卡号（1010 3576 1212 1134）存款5000元，要求保存交易记录，以便客户查询和银行业务统计。</span><br><span class="line">说明：当存钱或取钱（如300元）时候，会往交易信息表（tradeInfo）中添加一条交易记录，</span><br><span class="line">      同时应更新银行卡信息表（cardInfo）中的现有余额（如增加或减少500元）</span><br><span class="line">*/</span><br><span class="line">/*--------------交易信息表插入交易记录--------------------------*/</span><br><span class="line">INSERT INTO tradeInfo(tradeType,cardID,tradeMoney) </span><br><span class="line">      VALUES(&apos;支取&apos;,&apos;1010 3576 1234 5678&apos;,900)  ;</span><br><span class="line">/*-------------更新银行卡信息表中的现有余额-------------------*/</span><br><span class="line">UPDATE cardInfo SET balance=balance-900 WHERE cardID=&apos;1010 3576 1234 5678&apos;;</span><br><span class="line">/*--------------交易信息表插入交易记录--------------------------*/</span><br><span class="line">INSERT INTO tradeInfo(tradeType,cardID,tradeMoney) </span><br><span class="line">      VALUES(&apos;存入&apos;,&apos;1010 3576 1212 1130&apos;,300)  ;</span><br><span class="line">/*-------------更新银行卡信息表中的现有余额-------------------*/</span><br><span class="line">UPDATE cardInfo SET balance=balance+300 WHERE cardID=&apos;1010 3576 1212 1130&apos;;</span><br><span class="line">/*--------------交易信息表插入交易记录--------------------------*/</span><br><span class="line">INSERT INTO tradeInfo(tradeType,cardID,tradeMoney) </span><br><span class="line">      VALUES(&apos;存入&apos;,&apos;1010 3576 1212 1004&apos;,1000)  ;</span><br><span class="line">/*-------------更新银行卡信息表中的现有余额-------------------*/</span><br><span class="line">UPDATE cardInfo SET balance=balance+1000 WHERE cardID=&apos;1010 3576 1212 1004&apos;;</span><br><span class="line">/*--------------交易信息表插入交易记录--------------------------*/</span><br><span class="line">INSERT INTO tradeInfo(tradeType,cardID,tradeMoney) </span><br><span class="line">      VALUES(&apos;支取&apos;,&apos;1010 3576 1212 1130&apos;,1900)  ;</span><br><span class="line">/*-------------更新银行卡信息表中的现有余额--报错-----------------*/</span><br><span class="line">UPDATE cardInfo SET balance=balance-1900 WHERE cardID=&apos;1010 3576 1212 1130&apos;;</span><br><span class="line">/*--------------交易信息表插入交易记录--------------------------*/</span><br><span class="line">INSERT INTO tradeInfo(tradeType,cardID,tradeMoney) </span><br><span class="line">      VALUES(&apos;存入&apos;,&apos;1010 3576 1212 1134&apos;,5000)   ;</span><br><span class="line">      </span><br><span class="line">      --INSERT INTO tradeInfo(tradeType,cardID,tradeMoney,Tradedate) </span><br><span class="line">      --VALUES(&apos;存入&apos;,&apos;1010 3576 1212 1134&apos;,5000,to_date(&apos;2014-06-01&apos;,&apos;yyyy-mm-dd&apos;))   ;</span><br><span class="line">/*-------------更新银行卡信息表中的现有余额-------------------*/</span><br><span class="line">UPDATE cardInfo SET balance=balance+5000 WHERE cardID=&apos;1010 3576 1212 1134&apos;;</span><br><span class="line">commit;</span><br><span class="line">/*--------检查测试数据是否正确---------*/</span><br><span class="line">SELECT * FROM cardInfo;</span><br><span class="line">SELECT * FROM tradeInfo;</span><br><span class="line">SELECT * FROM userInfo;</span><br><span class="line">--删除数据</span><br><span class="line">delete from tradeInfo;</span><br><span class="line">delete from cardInfo;</span><br><span class="line">delete from userInfo;</span><br><span class="line">delete from DEPOSIT;</span><br><span class="line">/*</span><br><span class="line">取本周第一天</span><br><span class="line">select trunc (sysdate,&apos;DAY&apos;) from dual;</span><br><span class="line">*/</span><br><span class="line">/*---------修改密码-----*/</span><br><span class="line">--1.张三（卡号为1010 3576 1234 5678）修改银行卡密码为123456</span><br><span class="line">--2.李四（卡号为1010 3576 1212 1134）修改银行卡密码为123123</span><br><span class="line">update cardInfo set pass=&apos;123456&apos; WHERE cardID=&apos;1010 3576 1234 5678&apos; ;</span><br><span class="line">update cardInfo set pass=&apos;123123&apos; WHERE cardID=&apos;1010 3576 1212 1134&apos; ;</span><br><span class="line">--查询账户信息</span><br><span class="line">SELECT * FROM cardInfo;</span><br><span class="line">/*---------挂失帐号---------*/</span><br><span class="line">--李四（卡号为1010 3576 1212 1134）因银行卡丢失，申请挂失</span><br><span class="line">update cardInfo set IsReportLoss=1 WHERE cardID=&apos;1010 3576 1212 1134&apos; ;</span><br><span class="line">SELECT * FROM cardInfo;</span><br><span class="line">--查看修改密码和挂失结果</span><br><span class="line">SELECT cardid 卡号,curID 货币,savingName 储蓄种类,opendate 开户日期,openmoney 开户金额,balance 余额,pass 密码,</span><br><span class="line">    case IsReportLoss WHEN 1 THEN &apos;挂失&apos;  WHEN 0 THEN &apos;未挂失&apos; ELSE NULL end 是否挂失, </span><br><span class="line">    customerName 客户姓名</span><br><span class="line">FROM CardInfo, Deposit, UserInfo</span><br><span class="line">WHERE CardInfo.savingID=Deposit.savingID and CardInfo.customerID = UserInfo.customerID;</span><br><span class="line">/*--------统计银行的资金流通余额和盈利结算------------------------------*/</span><br><span class="line">--统计说明:存款代表资金流入,取款代表资金.假定存款利率为千分之3,贷款利率为千分之8</span><br><span class="line">/*--单一货币RMB--*/</span><br><span class="line">DECLARE </span><br><span class="line">    v_inMoney number;</span><br><span class="line">    v_outMoney number;</span><br><span class="line">    v_profit number;</span><br><span class="line">begin</span><br><span class="line">    --SELECT * FROM tradeInfo </span><br><span class="line">    SELECT sum(tradeMoney) into v_inMoney FROM tradeInfo WHERE (tradeType=&apos;存入&apos;);</span><br><span class="line">    SELECT sum(tradeMoney) into v_outMoney FROM tradeInfo WHERE (tradeType=&apos;支取&apos;);</span><br><span class="line">    dbms_output.put_line(&apos;银行流通余额总计为:&apos;||to_char(v_inMoney-v_outMoney)||&apos;RMB&apos;);</span><br><span class="line">    v_profit:=v_outMoney*0.008-v_inMoney*0.003;</span><br><span class="line">    dbms_output.put_line(&apos;盈利结算为:&apos;||to_char(v_profit)||&apos;RMB&apos;);</span><br><span class="line">end;</span><br><span class="line">/*--------查询本周开户的卡号,显示该卡相关信息-----------------*/</span><br><span class="line">SELECT c.cardID 卡号,u.customerName 姓名,c.curID 货币,d.savingName 存款类型,c.openDate 开户日期,c.openMoney 开户金额,c.balance 存款余额,</span><br><span class="line">       CASE c.IsReportLoss WHEN 0 THEN &apos;正常账户&apos;</span><br><span class="line">                           WHEN 1 THEN &apos;挂失账户&apos;</span><br><span class="line">                           ELSE NULL</span><br><span class="line">       END 账户状态</span><br><span class="line">FROM cardInfo c INNER JOIN userInfo u ON (c.customerID = u.customerID)</span><br><span class="line">INNER JOIN Deposit d ON (c.savingID = d.savingID )</span><br><span class="line">WHERE  openDate between trunc(sysdate,&apos;DAY&apos;) and trunc(sysdate,&apos;DAY&apos;)+6</span><br><span class="line">/*---------查询本月交易金额最高的卡号----------------------*/</span><br><span class="line">SELECT * FROM tradeInfo;</span><br><span class="line">SELECT DISTINCT cardID </span><br><span class="line">FROM tradeInfo </span><br><span class="line">WHERE  tradeMoney=</span><br><span class="line">    (SELECT Max(tradeMoney) FROM tradeInfo</span><br><span class="line">     WHERE to_char(tradeDate,&apos;yyyy-mm&apos;)=to_char(sysdate,&apos;yyyy-mm&apos;));</span><br><span class="line">   </span><br><span class="line">/*---------查询挂失帐号的客户信息---------------------*/</span><br><span class="line">SELECT customerName as 客户姓名,telephone as 联系电话 FROM userInfo </span><br><span class="line">    WHERE customerID IN (SELECT customerID FROM cardInfo WHERE IsReportLoss=1);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">/*------催款提醒：例如某种业务的需要，每个月末，如果发现用户帐上余额少于200元，将致电催款。---*/</span><br><span class="line">SELECT customerName as 客户姓名,telephone as 联系电话,balance as 存款余额 </span><br><span class="line">FROM userInfo INNER JOIN cardInfo ON  userInfo.customerID=cardInfo.customerID </span><br><span class="line">WHERE balance&lt;200;</span><br><span class="line">/*视图查询*/</span><br><span class="line">--1.创建视图：为了向客户显示信息友好,查询各表要求字段全为中文字段名。</span><br><span class="line">create or replace VIEW vw_userInfo  --客户信息表视图</span><br><span class="line">  AS </span><br><span class="line">    select customerID as 客户编号,customerName as 开户名, PID as 身份证号,</span><br><span class="line">        telephone as 电话号码,address as 居住地址  from userInfo;</span><br><span class="line">--使用视图</span><br><span class="line">SELECT * FROM vw_userInfo;</span><br><span class="line">--2.创建视图：查询银行卡信息</span><br><span class="line">create or replace VIEW vw_cardInfo  --银行卡信息表视图</span><br><span class="line">  AS </span><br><span class="line">    select c.cardID as 卡号,u.customerName as 客户,c.curID as 货币种类, d.savingName as 存款类型,c.openDate as 开户日期,</span><br><span class="line">       c.balance as 余额,c.pass 密码,</span><br><span class="line">       case c.IsReportLoss when 0 then &apos;正常&apos;</span><br><span class="line">                           when 1 then &apos;挂失&apos;</span><br><span class="line">       end as 是否挂失</span><br><span class="line">    from cardInfo c, deposit d,userinfo u</span><br><span class="line">    where c.savingID=d.savingID and c.customerID=u.customerID;</span><br><span class="line">--使用视图</span><br><span class="line">SELECT * FROM vw_cardInfo;</span><br><span class="line">SELECT 客户,余额 FROM vw_cardInfo where 客户=&apos;张三&apos;;</span><br><span class="line">--3.创建视图：查看交易信息</span><br><span class="line">create VIEW vw_tradeInfo  --交易信息表视图</span><br><span class="line">  AS </span><br><span class="line">    select tradeDate as 交易日期,tradeType as 交易类型, cardID as 卡号,tradeMoney as 交易金额,</span><br><span class="line">      remark as 备注  from tradeInfo ;</span><br><span class="line">--使用视图</span><br><span class="line">SELECT * FROM vw_tradeInfo;</span><br><span class="line">--4.根据客户登录名（采用实名制访问银行系统）查询该客户帐户信息的视图</span><br><span class="line">/*trim去掉前后空格*/</span><br><span class="line">create or replace VIEW vw_oneUserInfo  </span><br><span class="line">  AS </span><br><span class="line">     select customerID as 客户编号,customerName as 开户名, PID as 身份证号,</span><br><span class="line">        telephone as 电话号码,address as 居住地址  </span><br><span class="line">     from userInfo</span><br><span class="line">     where UPPER(TRIM(customerName)) in (select UPPER(TRIM(username)) from user_users);</span><br><span class="line">select * from user_users;</span><br><span class="line">--使用视图</span><br><span class="line">select * from vw_oneUserInfo;</span><br><span class="line">/*</span><br><span class="line">存储过程</span><br><span class="line">*/</span><br><span class="line">select * from tradeinfo;</span><br><span class="line">select * from cardinfo;</span><br><span class="line">/*--1.取钱或存钱的存储过程*/</span><br><span class="line">create or replace procedure usp_takeMoney </span><br><span class="line">  (v_card char, --卡号</span><br><span class="line">  v_m number,  --存取金额</span><br><span class="line">  v_type char,  --存取类型</span><br><span class="line">  v_inputPass char default NULL) --密码</span><br><span class="line">as</span><br><span class="line">    v1 number(1);  --临时变量</span><br><span class="line">    v_mybalance  number; --余额</span><br><span class="line">begin</span><br><span class="line">    dbms_output.put_line(&apos;交易正进行,请稍后......&apos;);</span><br><span class="line">    if (v_type=&apos;支取&apos;) then</span><br><span class="line">       SELECT 1 into v1 FROM cardInfo WHERE cardID=v_card and pass=v_inputPass;</span><br><span class="line">    end if;</span><br><span class="line">    SELECT balance into v_mybalance </span><br><span class="line">    FROM cardInfo </span><br><span class="line">    WHERE cardID=v_card;</span><br><span class="line">    if (v_type=&apos;支取&apos;) then</span><br><span class="line">       if (v_mybalance&gt;=v_m+1) then</span><br><span class="line">           update cardInfo set balance=balance-v_m WHERE cardID=v_Card;</span><br><span class="line">       else</span><br><span class="line">            dbms_output.put_line(&apos;卡号&apos;||v_card||&apos;  余额：&apos;||to_char(v_mybalance));</span><br><span class="line">            raise_application_error(-20000,&apos;交易失败！余额不足！&apos;);</span><br><span class="line">        end if;</span><br><span class="line">    else</span><br><span class="line">         update cardInfo set balance=balance+v_m WHERE cardID=v_card;</span><br><span class="line">    end if;</span><br><span class="line">    dbms_output.put_line(&apos;交易成功！交易金额：&apos;||to_char(v_m));</span><br><span class="line">    SELECT balance into v_mybalance FROM cardInfo WHERE cardID=v_card;</span><br><span class="line">    dbms_output.put_line(&apos;卡号&apos;||v_card||&apos;  余额：&apos;||to_char(v_mybalance)); </span><br><span class="line">    INSERT INTO tradeInfo(tradeType,cardID,tradeMoney) VALUES(v_type,v_card,v_m);</span><br><span class="line">    commit;</span><br><span class="line">exception</span><br><span class="line">   when no_data_found then</span><br><span class="line">      raise_application_error(-20001,&apos;卡号或密码错误!&apos;);</span><br><span class="line">end;</span><br><span class="line">--调用存储过程取钱或存钱 张三取300，</span><br><span class="line"> --现实中的取款机依靠读卡器读出张三的卡号,这里根据张三的名字查出考号来模拟</span><br><span class="line"> </span><br><span class="line"> DECLARE</span><br><span class="line">   emp_20000 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(emp_20000, -20000);</span><br><span class="line">   emp_20001 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(emp_20001, -20001);</span><br><span class="line">   v_card char(19);</span><br><span class="line">BEGIN</span><br><span class="line">    select cardID into v_card </span><br><span class="line">    from cardInfo Inner Join userInfo ON cardInfo.customerID=userInfo.customerID </span><br><span class="line">    where customerName=&apos;张三&apos;;</span><br><span class="line">    usp_takeMoney(v_card,300 ,&apos;支取&apos;,&apos;123456&apos;);</span><br><span class="line">EXCEPTION</span><br><span class="line">   WHEN emp_20000 THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;交易失败！余额不足！&apos;);</span><br><span class="line">      rollback;</span><br><span class="line">   WHEN emp_20001 THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;密码错误!&apos;);</span><br><span class="line">      rollback;</span><br><span class="line">   WHEN no_data_found THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;用户名不存在!&apos;);      </span><br><span class="line">      rollback;</span><br><span class="line">   WHEN OTHERS THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;出现了其他异常错误&apos;);</span><br><span class="line">      rollback;</span><br><span class="line">END;</span><br><span class="line">--调用存储过程，李四存500</span><br><span class="line"> </span><br><span class="line">DECLARE</span><br><span class="line">   emp_20000 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(emp_20000, -20000);</span><br><span class="line">   emp_20001 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(emp_20001, -20001);</span><br><span class="line">   v_card char(19);</span><br><span class="line">BEGIN</span><br><span class="line">    select cardID into v_card </span><br><span class="line">    from cardInfo Inner Join userInfo ON cardInfo.customerID=userInfo.customerID </span><br><span class="line">    where customerName=&apos;李四&apos;;</span><br><span class="line">    usp_takeMoney(v_card,500 ,&apos;存入&apos;);</span><br><span class="line">EXCEPTION</span><br><span class="line">   WHEN emp_20000 THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;交易失败！余额不足！&apos;);</span><br><span class="line">      rollback;</span><br><span class="line">   WHEN emp_20001 THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;密码错误!&apos;);</span><br><span class="line">      rollback;</span><br><span class="line">   WHEN OTHERS THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;出现了其他异常错误&apos;);</span><br><span class="line">      rollback;</span><br><span class="line">END;</span><br><span class="line">select * from vw_cardInfo;</span><br><span class="line">select * from vw_tradeInfo;</span><br><span class="line">/*--2.产生随机卡号的存储过程(dbms_random包来实现) --*/</span><br><span class="line">create or replace procedure usp_randCardID(v_randCardID OUT char)</span><br><span class="line">AS</span><br><span class="line">    v_r number(8);</span><br><span class="line">BEGIN</span><br><span class="line">  v_r:=round(dbms_random.value(10000000,99999999));--产生这个范围(10000000,99999999)的随机数</span><br><span class="line">  v_randCardID:=&apos;1010 3576 &apos;||substr(v_r,1,4)||&apos; &apos;||substr(v_r,5,8);--四位一空格</span><br><span class="line">end;</span><br><span class="line">--测试产生随机卡号</span><br><span class="line">DECLARE </span><br><span class="line">    v_mycardID char(19) ;</span><br><span class="line">BEGIN</span><br><span class="line">    usp_randCardID(v_mycardID);</span><br><span class="line">    dbms_output.put_line(&apos;产生的随机卡号为：&apos;||v_mycardID);</span><br><span class="line">END;</span><br><span class="line">/*--3.开户的存储过程--*/</span><br><span class="line">select * from userInfo;</span><br><span class="line">CREATE SEQUENCE seq_customerID</span><br><span class="line">        START WITH 10 </span><br><span class="line">        INCREMENT BY 1</span><br><span class="line">        NOMAXVALUE </span><br><span class="line">        NOCYCLE</span><br><span class="line">        CACHE 30;</span><br><span class="line">create or replace procedure usp_openAccount</span><br><span class="line">( v_customerName char,</span><br><span class="line">  v_PID char,</span><br><span class="line">  v_telephone char,</span><br><span class="line">  v_openMoney number,</span><br><span class="line">  v_savingName char,</span><br><span class="line">  v_address varchar default &apos;&apos; )</span><br><span class="line">AS</span><br><span class="line">   v_mycardID char(19);</span><br><span class="line">   v_cur_customerID int;</span><br><span class="line">   v_savingID int ;</span><br><span class="line">   v1 int;</span><br><span class="line"> begin</span><br><span class="line">   --调用产生随机卡号的存储过程获得随机卡号</span><br><span class="line">   usp_randCardID (v_mycardID);</span><br><span class="line">   SELECT count(*) into v1 FROM cardInfo WHERE cardID=v_mycardID;</span><br><span class="line">   while (v1&lt;&gt;0) loop</span><br><span class="line">      usp_randCardID (v_mycardID);</span><br><span class="line">      SELECT count(*) into v1 FROM cardInfo WHERE cardID=v_mycardID;            </span><br><span class="line">   end loop;</span><br><span class="line">   dbms_output.put_line(&apos;尊敬的客户,开户成功!系统为您产生的随机卡号为:&apos;||v_mycardID);</span><br><span class="line">   dbms_output.put_line(&apos;开户日期&apos;||to_char(sysdate,&apos;yyyy-mm-dd&apos;)||&apos;  开户金额:&apos;||to_char(v_openMoney));</span><br><span class="line">   select count(*) into v1 from userInfo where PID=v_PID;</span><br><span class="line">   if v1=0 then</span><br><span class="line">         INSERT INTO userInfo(customerID,customerName,PID,telephone,address )</span><br><span class="line">          VALUES(seq_customerID.nextval,v_customerName,v_PID,v_telephone,v_address) ;   </span><br><span class="line">   end if;  </span><br><span class="line">   SELECT savingID into v_savingID FROM deposit WHERE savingName =v_savingName;</span><br><span class="line">   select customerID into v_cur_customerID from userInfo where PID=v_PID;</span><br><span class="line">   INSERT INTO cardInfo(cardID,savingID,openMoney,balance,customerID)</span><br><span class="line">         VALUES(v_mycardID,v_savingID,v_openMoney,v_openMoney,v_cur_customerID);</span><br><span class="line">exception</span><br><span class="line">    when no_data_found then</span><br><span class="line">        raise_application_error(-20000,&apos;存款类型不正确,请重新输入!&apos;);</span><br><span class="line">    when others then</span><br><span class="line">        raise_application_error(-20001,&apos;其他错误,请重新输入!&apos;);</span><br><span class="line">end;</span><br><span class="line">--调用存储过程重新开户</span><br><span class="line">begin</span><br><span class="line">    usp_openAccount (&apos;王老五&apos;,&apos;334456889012678&apos;,&apos;2222-63598978&apos;,1000,&apos;活期&apos;,&apos;河南新乡&apos;);</span><br><span class="line">    commit;</span><br><span class="line">end;</span><br><span class="line">--EXEC usp_openAccount(&apos;赵小二&apos;,&apos;213445678912342222&apos;,&apos;0760-44446666&apos;,1,&apos;定期&apos;);</span><br><span class="line">select * from vw_userInfo;</span><br><span class="line">select * from vw_cardInfo;</span><br><span class="line">select * from vw_tradeInfo;</span><br><span class="line">GO</span><br><span class="line">/*--4.输入页数和每页显示的记录数，实现分页显示*/</span><br><span class="line">--DROP PROCEDURE usp_pagingDisplay</span><br><span class="line">SELECT tradeDate 交易日期,tradeType 交易类型,cardID 卡号,trademoney 交易金额 </span><br><span class="line">FROM (SELECT t.*,rownum rn FROM (SELECT * FROM tradeInfo ) t)</span><br><span class="line">WHERE rn&gt;=4 and rn&lt;=6;</span><br><span class="line">CREATE OR REPLACE PROCEDURE usp_pagingDisplay</span><br><span class="line">( v_page number:= 1, </span><br><span class="line">  v_records number:= 10)</span><br><span class="line">AS</span><br><span class="line">  v_rec1 number;</span><br><span class="line">  v_rec2 number;</span><br><span class="line">  v_statement varchar2(200);</span><br><span class="line">  TYPE cursor_type IS REF CURSOR;</span><br><span class="line">  --声明一个游标变量</span><br><span class="line">  c1 CURSOR_TYPE;</span><br><span class="line">  v_trade tradeinfo%rowtype;</span><br><span class="line">begin</span><br><span class="line">  v_rec1:= (v_page-1)*v_records+1;</span><br><span class="line">  v_rec2:= v_page*v_records;</span><br><span class="line">  v_statement:=&apos;SELECT  tradeDate,tradeType,cardID,trademoney,REMARK &apos;;</span><br><span class="line">  --SQL语句拼接</span><br><span class="line">  v_statement:=v_statement||&apos;FROM (SELECT t.*,rownum rn FROM (SELECT * FROM tradeInfo ) t) &apos;;</span><br><span class="line">  v_statement:=v_statement||&apos;WHERE rn&gt;=&apos;||v_rec1||&apos; and rn&lt;=&apos;||v_rec2;</span><br><span class="line">  --dbms_output.put_line(v_statement);</span><br><span class="line">  dbms_output.put_line(&apos;交易日期   交易类型             卡号           交易金额 &apos;);</span><br><span class="line">  dbms_output.put_line(&apos;---------------------------------------------------------&apos;);</span><br><span class="line">  open c1 for v_statement;</span><br><span class="line">  LOOP</span><br><span class="line">      FETCH c1 INTO v_trade ;</span><br><span class="line">      EXIT WHEN c1%NOTFOUND;</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(to_char(v_trade.tradeDate,&apos;yyyy-mm-dd&apos;)||&apos;     &apos;||v_trade.tradeType||&apos;     &apos;||v_trade.cardID||&apos;     &apos;||v_trade.trademoney);</span><br><span class="line">  END LOOP;</span><br><span class="line">  CLOSE c1;</span><br><span class="line">END;</span><br><span class="line">BEGIN</span><br><span class="line"> usp_pagingDisplay(2,2);</span><br><span class="line">END;</span><br><span class="line">/*---- 5.打印对账单 ----*/</span><br><span class="line">--drop proc usp_CheckSheet</span><br><span class="line">CREATE OR REPLACE PROCEDURE usp_CheckSheet(</span><br><span class="line">  v_cardID varchar2,</span><br><span class="line">  v_date1 date:=NULL,</span><br><span class="line">  v_date2 date:=NULL)</span><br><span class="line">AS</span><br><span class="line">    v_custName varchar2(20);</span><br><span class="line">    v_curName varchar2(20);</span><br><span class="line">    v_savingName varchar2(20);</span><br><span class="line">    v_openDate date;</span><br><span class="line">  TYPE cursor_type IS REF CURSOR;</span><br><span class="line">  --声明一个游标变量</span><br><span class="line">   c1 CURSOR_TYPE;</span><br><span class="line">   v_trade tradeinfo%rowtype;</span><br><span class="line">   v_sqlStr varchar2(2000);</span><br><span class="line">BEGIN</span><br><span class="line">    SELECT c.curID, u.customerName,d.savingName ,c.openDate</span><br><span class="line">  INTO v_curName,v_custName,v_savingName, v_openDate</span><br><span class="line">    FROM cardInfo c inner join  userInfo u on c.customerID=u.customerID</span><br><span class="line">                  inner join deposit d on c.savingID = d.savingID</span><br><span class="line">    WHERE  cardID = v_cardID; --and u.customerName = user_name()</span><br><span class="line">    dbms_output.put_line(&apos;卡号：&apos; || v_cardID);</span><br><span class="line">    dbms_output.put_line(&apos;姓名:&apos;  || v_custName);</span><br><span class="line">    dbms_output.put_line(&apos;货币:&apos;  || v_curName);</span><br><span class="line">    dbms_output.put_line(&apos;存款类型：&apos;  || v_savingName);</span><br><span class="line">    dbms_output.put_line(&apos;开户日期：&apos;  || to_char(v_openDate,&apos;yyyy&quot;年&quot;mm&quot;月&quot;dd&quot;日&quot;&apos;));</span><br><span class="line">    dbms_output.put_line(&apos; &apos;);</span><br><span class="line">    dbms_output.put_line(&apos;--------------------------------------------------------------------&apos;);</span><br><span class="line">  dbms_output.put_line(&apos;交易日   &apos;||&apos;   类型  &apos;||&apos;   交易金额  &apos;||&apos;   备注&apos;);</span><br><span class="line">  v_sqlStr:=&apos;SELECT *</span><br><span class="line">        FROM tradeInfo</span><br><span class="line">        WHERE cardID=&apos;&apos;&apos;||v_cardID||&apos;&apos;&apos;&apos;;</span><br><span class="line">  IF v_date2 IS NOT NULL THEN</span><br><span class="line">      v_sqlStr:=v_sqlStr||&apos; AND tradeDate &lt;=to_date(&apos;&apos;&apos;||to_char(v_date2,&apos;yyyy-mm-dd&apos;)||&apos; 23:59:59&apos;||&apos;&apos;&apos;,&apos;&apos;yyyy-mm-dd hh24:mi:ss&apos;&apos;)&apos;;</span><br><span class="line">  END IF;</span><br><span class="line">  IF v_date1 IS NOT NULL THEN</span><br><span class="line">      v_sqlStr:=v_sqlStr||&apos; AND tradeDate &gt;=to_date(&apos;&apos;&apos;||to_char(v_date1,&apos;yyyy-mm-dd&apos;)||&apos; 00:00:00&apos;||&apos;&apos;&apos;,&apos;&apos;yyyy-mm-dd hh24:mi:ss&apos;&apos;)&apos;;       </span><br><span class="line">  END IF;</span><br><span class="line">  v_sqlStr:=v_sqlStr||&apos; ORDER BY tradeDate&apos;;</span><br><span class="line">  --dbms_output.put_line(v_sqlStr);</span><br><span class="line">  open c1 for v_sqlStr;</span><br><span class="line">  LOOP</span><br><span class="line">      FETCH c1 INTO v_trade ;</span><br><span class="line">      EXIT WHEN c1%NOTFOUND;  </span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(to_char(v_trade.tradeDate,&apos;yyyy-mm-dd&apos;)||&apos;     &apos;||v_trade.tradeType||&apos;     &apos;||v_trade.tradeMoney||&apos;     &apos;||v_trade.remark);</span><br><span class="line">  END LOOP;</span><br><span class="line">  CLOSE c1;</span><br><span class="line">END;</span><br><span class="line">--调用</span><br><span class="line">begin</span><br><span class="line">  -- Test statements here</span><br><span class="line">  usp_CheckSheet(&apos;1010 3576 1212 1130&apos;,to_date(&apos;2012-12-01&apos;,&apos;yyyy-mm-dd&apos;),to_date(&apos;2013-11-01&apos;,&apos;yyyy-mm-dd&apos;));</span><br><span class="line">end;</span><br><span class="line">/*--6.查询、统计在指定时间段内没有发生交易的账户信息*/</span><br><span class="line">--drop proc usp_getWithoutTrade</span><br><span class="line">create or replace procedure usp_getWithoutTrade(</span><br><span class="line">  v_Num out number ,</span><br><span class="line">  v_Amount out number ,</span><br><span class="line">  v_date1 date := NULL,</span><br><span class="line">  v_date2 date := NULL)</span><br><span class="line">AS</span><br><span class="line"> v_sd date;</span><br><span class="line"> v_ed date;</span><br><span class="line">TYPE cursor_type IS REF CURSOR;</span><br><span class="line">c1 CURSOR_TYPE;</span><br><span class="line">v_cur userInfo%rowtype;</span><br><span class="line">BEGIN</span><br><span class="line">  IF v_date1 IS NULL THEN</span><br><span class="line">   v_sd:=trunc(sysdate,&apos;month&apos;);</span><br><span class="line">  END IF;</span><br><span class="line">  IF v_date2 IS NULL THEN</span><br><span class="line">     v_ed := sysdate;</span><br><span class="line">  END IF;</span><br><span class="line">  dbms_output.put_line(&apos;客户号   &apos;||&apos;  客户姓名&apos;||&apos;    身份证号&apos;||&apos;   电话&apos;||&apos;   地址&apos;);</span><br><span class="line">  dbms_output.put_line(&apos;---------------------------------------------------------------&apos;);</span><br><span class="line">  open c1 for SELECT distinct u.customerID,u.customerName,u.PID,u.telephone,address</span><br><span class="line">  FROM userInfo u</span><br><span class="line">  JOIN cardInfo c ON u.customerID = c.customerID</span><br><span class="line">  WHERE c.cardID NOT IN (SELECT cardID FROM tradeInfo WHERE tradeDate Between  v_sd and v_ed);</span><br><span class="line">  LOOP</span><br><span class="line">      FETCH c1 INTO v_cur ;</span><br><span class="line">      EXIT WHEN c1%NOTFOUND;</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(v_cur.customerID||&apos;     &apos;||v_cur.customerName||&apos;     &apos;||v_cur.PID||&apos;     &apos;||v_cur.telephone||&apos;   &apos;||v_cur.address);</span><br><span class="line">  END LOOP;</span><br><span class="line">  CLOSE c1;</span><br><span class="line">  SELECT COUNT(customerID),SUM(balance) into  v_Num,v_Amount</span><br><span class="line">  FROM cardInfo</span><br><span class="line">  WHERE cardID NOT IN (SELECT cardID FROM tradeInfo WHERE tradeDate Between v_sd and v_ed);</span><br><span class="line">end;</span><br><span class="line">--调用存储过程</span><br><span class="line">DECLARE </span><br><span class="line">  v_NUM number;</span><br><span class="line">  v_Amount number(18,2);</span><br><span class="line">  v_date1 date;</span><br><span class="line">  v_date2 date;</span><br><span class="line">begin</span><br><span class="line">  v_date1:= to_date(&apos;2009-1-1&apos;,&apos;yyyy-mm-dd&apos;);</span><br><span class="line">  v_date2:= sysdate;</span><br><span class="line">  usp_getWithoutTrade(v_NUM, v_Amount);--, @date1, @date2</span><br><span class="line">  dbms_output.put_line(&apos;统计未发生交易的客户&apos;);</span><br><span class="line">  dbms_output.put_line( &apos;---------------------------------------&apos;);</span><br><span class="line">  dbms_output.put_line( &apos;客户人数：&apos; || v_NUM || &apos;  客户总余额：&apos; || v_Amount);</span><br><span class="line">end;</span><br><span class="line">/*--7.统计银行卡交易量和交易额*/</span><br><span class="line">--drop proc usp_getTradeInfo</span><br><span class="line">create or replace procedure usp_getTradeInfo(</span><br><span class="line">  v_Num1 out number,</span><br><span class="line">  v_Amount1 out number,</span><br><span class="line">  v_Num2 out number,</span><br><span class="line">  v_Amount2  out number,</span><br><span class="line">  v_date1 date:=trunc(sysdate,&apos;year&apos;),</span><br><span class="line">  v_date2 date:=sysdate,</span><br><span class="line">  v_address varchar:= NULL)</span><br><span class="line">AS</span><br><span class="line">BEGIN</span><br><span class="line"> </span><br><span class="line">  IF v_address IS NULL THEN</span><br><span class="line">    SELECT COUNT(tradeMoney), SUM(tradeMoney) into v_num1,v_Amount1</span><br><span class="line">    FROM tradeInfo</span><br><span class="line">    WHERE tradeDate BETWEEN v_date1 AND v_date2 AND tradeType=&apos;存入&apos;;</span><br><span class="line">    SELECT COUNT(tradeMoney), SUM(tradeMoney) into v_num2,v_Amount2</span><br><span class="line">    FROM tradeInfo</span><br><span class="line">    WHERE tradeDate BETWEEN v_date1 AND v_date2 AND tradeType=&apos;支取&apos;;</span><br><span class="line">  ELSE</span><br><span class="line">    SELECT  COUNT(tradeMoney), SUM(tradeMoney) into v_num1,v_Amount1</span><br><span class="line">    FROM tradeInfo JOIN cardInfo ON tradeInfo.cardID = cardInfo.cardID</span><br><span class="line">           JOIN userInfo ON cardInfo.customerID = userInfo.customerID</span><br><span class="line">    WHERE tradeDate BETWEEN v_date1 AND v_date2 AND tradeType=&apos;存入&apos;</span><br><span class="line">        AND address Like &apos;%&apos;||v_address||&apos;%&apos;;</span><br><span class="line">    SELECT COUNT(tradeMoney), SUM(tradeMoney) into v_num2,v_Amount2</span><br><span class="line">    FROM tradeInfo JOIN cardInfo ON tradeInfo.cardID = cardInfo.cardID</span><br><span class="line">           JOIN userInfo ON cardInfo.customerID = userInfo.customerID</span><br><span class="line">    WHERE tradeDate BETWEEN v_date1 AND v_date2 AND tradeType=&apos;支取&apos;</span><br><span class="line">        AND address Like &apos;%&apos;||v_address||&apos;%&apos;;</span><br><span class="line">  END IF;</span><br><span class="line">  v_num1:=nvl(v_num1,0);</span><br><span class="line">  v_num2:=nvl(v_num2,0);</span><br><span class="line">  v_Amount1:=nvl(v_Amount1,0);</span><br><span class="line">  v_Amount2:=nvl(v_Amount2,0);</span><br><span class="line">end;</span><br><span class="line">--调用</span><br><span class="line">declare </span><br><span class="line">    v_CNT1 number;</span><br><span class="line">    v_Total1 number(18,2);</span><br><span class="line">    v_CNT2 number;</span><br><span class="line">    v_Total2 number(18,2);</span><br><span class="line">    v_date1 date;</span><br><span class="line">    v_date2 date;</span><br><span class="line">begin</span><br><span class="line">    v_date1 := to_date(&apos;2009-1-1&apos;,&apos;yyyy-mm-dd&apos;);</span><br><span class="line">    v_date2 := sysdate;</span><br><span class="line">    usp_getTradeInfo (v_CNT1, v_Total1, v_CNT2, v_Total2, v_date1,v_date2,&apos;北京海淀&apos;);--, &apos;北京&apos;;</span><br><span class="line">    dbms_output.put_line(&apos;统计银行卡交易量和交易额&apos;);</span><br><span class="line">    dbms_output.put_line(&apos;&apos;);</span><br><span class="line">    dbms_output.put_line(&apos;起始日期：&apos; || to_char(v_date1,&apos;yyyy-mm-dd&apos;) ||  &apos;  截止日期：&apos; || to_char(v_date2,&apos;yyyy-mm-dd&apos;));</span><br><span class="line">    dbms_output.put_line(&apos;-----------------------------------------------------------&apos;);</span><br><span class="line">    dbms_output.put_line(&apos;存入笔数：&apos; || v_CNT1 || &apos;  存入金额：&apos; ||v_Total1);</span><br><span class="line">    dbms_output.put_line( &apos;支取笔数：&apos; || v_CNT2|| &apos;  支取金额：&apos; ||v_Total2);</span><br><span class="line">    dbms_output.put_line(&apos;-----------------------------------------------------------&apos;);</span><br><span class="line">    dbms_output.put_line(&apos;发生笔数：&apos; || (v_CNT1+v_CNT2)|| &apos;  结余金额：&apos; || (v_Total1-v_Total2));</span><br><span class="line">end;</span><br><span class="line">/*复杂的业务逻辑*/</span><br><span class="line">--转帐的事务存储过程</span><br><span class="line">--  drop proc usp_tradefer</span><br><span class="line">create or replace procedure usp_tradefer (</span><br><span class="line">    v_card1 varchar2,</span><br><span class="line">    v_pwd varchar2,</span><br><span class="line">    v_card2 varchar2,</span><br><span class="line">    v_outmoney number)</span><br><span class="line">AS</span><br><span class="line">   v_date1 date:= sysdate;</span><br><span class="line">   v_date2 date:= sysdate;</span><br><span class="line">   </span><br><span class="line">   emp_20000 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(emp_20000, -20000);</span><br><span class="line">   emp_20001 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(emp_20001, -20001);</span><br><span class="line">BEGIN</span><br><span class="line">    commit;</span><br><span class="line">    dbms_output.put_line(&apos;开始转账，请稍后......&apos;);</span><br><span class="line">    usp_takeMoney(v_card1,v_outmoney ,&apos;支取&apos;,v_pwd);</span><br><span class="line">    usp_takeMoney(v_card2,v_outmoney ,&apos;存入&apos;);</span><br><span class="line">    commit;</span><br><span class="line">    dbms_output.put_line(&apos;转账成功！&apos;);</span><br><span class="line">    v_date2 := sysdate;</span><br><span class="line">    dbms_output.put_line(&apos;打印转出账户对账单&apos;);</span><br><span class="line">    dbms_output.put_line(&apos;-------------------&apos;);</span><br><span class="line">    usp_CheckSheet(v_card1,v_date1,v_date2);</span><br><span class="line">    dbms_output.put_line(&apos;打印转入账户对账单&apos;);</span><br><span class="line">    dbms_output.put_line( &apos;-------------------&apos;);</span><br><span class="line">    usp_CheckSheet(v_card2,v_date1,v_date2);</span><br><span class="line">EXCEPTION</span><br><span class="line">   WHEN emp_20000 THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;交易失败！余额不足！转账失败！&apos;);</span><br><span class="line">      rollback;</span><br><span class="line">   WHEN emp_20001 THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;卡号或密码错误! 转账失败！&apos;);</span><br><span class="line">      rollback;</span><br><span class="line">   WHEN OTHERS THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;出现了其他异常错误,转账失败！&apos;);</span><br><span class="line">      rollback;</span><br><span class="line">END;</span><br><span class="line">--测试上述事务存储过程</span><br><span class="line">--从李四的帐户转帐2000到张三的帐户</span><br><span class="line">--同上一样,现实中的取款机依靠读卡器读出张三/李四的卡号,这里根据张三/李四的名字查出考号来模拟</span><br><span class="line">DECLARE</span><br><span class="line">   emp_20000 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(emp_20000, -20000);</span><br><span class="line">   emp_20001 EXCEPTION;</span><br><span class="line">   PRAGMA EXCEPTION_INIT(emp_20001, -20001);</span><br><span class="line">   v_card1 char(19);</span><br><span class="line">   v_card2 char(19);</span><br><span class="line">BEGIN</span><br><span class="line">    select cardID into v_card1 </span><br><span class="line">    from cardInfo Inner Join userInfo ON cardInfo.customerID=userInfo.customerID </span><br><span class="line">    where customerName=&apos;李四&apos;;</span><br><span class="line">    select cardID into v_card2 </span><br><span class="line">    from cardInfo Inner Join userInfo ON cardInfo.customerID=userInfo.customerID </span><br><span class="line">    where customerName=&apos;张三&apos;;</span><br><span class="line">    usp_tradefer(v_card1,&apos;123123&apos;,v_card2,2000);</span><br><span class="line">EXCEPTION</span><br><span class="line">   WHEN emp_20000 THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;交易失败！余额不足！转账失败！&apos;);</span><br><span class="line">   WHEN emp_20001 THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;密码错误!转账失败！&apos;);</span><br><span class="line">   WHEN no_data_found THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;用户名不存在!转账失败！&apos;);      </span><br><span class="line">   WHEN OTHERS THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&apos;出现了其他异常错误！&apos;);</span><br><span class="line">END;</span><br><span class="line">select * from vw_userInfo;</span><br><span class="line">select * from vw_cardInfo;</span><br><span class="line">select * from vw_tradeInfo;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SQL银行模拟语句整合&quot;&gt;&lt;a href=&quot;#SQL银行模拟语句整合&quot; class=&quot;headerlink&quot; title=&quot;SQL银行模拟语句整合&quot;&gt;&lt;/a&gt;SQL银行模拟语句整合&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="SQL" scheme="http://yoursite.com/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring Boot基础使用</title>
    <link href="http://yoursite.com/2018/07/13/Spring%20Boot%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/07/13/Spring Boot基础/</id>
    <published>2018-07-12T16:00:00.000Z</published>
    <updated>2018-08-19T02:30:01.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-boot基础"><a href="#Spring-boot基础" class="headerlink" title="Spring boot基础"></a>Spring boot基础</h2><p>[TOC]</p><h3 id="1-Starter"><a href="#1-Starter" class="headerlink" title="1.Starter"></a>1.Starter</h3><h4 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1-1.概念"></a>1-1.概念</h4><p>Spring boot的依赖项，所有spring boot整合的依赖都有此约定</p><ul><li>核心依赖org.springframework.boot中的整合都以 spring-boot-starter-xxx的形式引入</li><li>第三方的依赖可能是以xxx-spring-boot-starter的形式引入</li></ul><p>如spring-boot-starter 核心启动器，整合自动配置的支持以及日志记录和YAML<br>Spring-boot-starter-aop 支持spring 面向切面编程<br>……更多参考官网列表<br><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-starter" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-starter</a></p><h4 id="1-2-spring-boot根据starter生成主观配置"><a href="#1-2-spring-boot根据starter生成主观配置" class="headerlink" title="1-2.spring boot根据starter生成主观配置"></a>1-2.spring boot根据starter生成主观配置</h4><p>Spring boot会根据配置的starter生成自己的主观配置，如导入spring-boot-starter-web时生成的观点</p><ul><li>使用Tomcat作为嵌入web服务容器</li><li>使用Hibernation 对象关系映射(ORM)</li><li>使用Apache Jackson绑定Json</li><li>使用Spring MVC作为Rest风格框架</li></ul><p>Spring boot会生成目前主流的web默认配置（¯<em>(ツ)</em>/¯），如果需要替换，可以自定义，方法下方传送门</p><h3 id="2-可执行jar"><a href="#2-可执行jar" class="headerlink" title="2.可执行jar"></a>2.可执行jar</h3><p>可以通过maven插件配置打包，在本地命令窗口即可启动项目（简单实用的功能，省略）</p><p><strong>精选传送门，附带整合Rest风格的Demo</strong><br><strong><a href="https://www.ibm.com/developerworks/cn/java/j-spring-boot-basics-perry/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-spring-boot-basics-perry/index.html</a></strong></p><h3 id="3-Spring快速搭建"><a href="#3-Spring快速搭建" class="headerlink" title="3.Spring快速搭建"></a>3.Spring快速搭建</h3><h4 id="3-1-Demo01入门"><a href="#3-1-Demo01入门" class="headerlink" title="3-1.Demo01入门"></a>3-1.Demo01入门</h4><p>该博客有一套基础的Spring boot搭建文章<br><a href="https://www.cnblogs.com/ityouknow/p/5662753.html" target="_blank" rel="noopener">https://www.cnblogs.com/ityouknow/p/5662753.html</a></p><h3 id="4-常用注解整合"><a href="#4-常用注解整合" class="headerlink" title="4.常用注解整合"></a>4.常用注解整合</h3><h4 id="4-1-Controller层常用注解"><a href="#4-1-Controller层常用注解" class="headerlink" title="4-1.Controller层常用注解"></a>4-1.Controller层常用注解</h4><p><strong>@Controller</strong><br>Spring中，表现层的控制器标识（servlet）</p><p><strong>@RestController</strong><br>在rest风格中常用的控制器标识，是组合注解，包括</p><ul><li>@ResponseBody</li><li>@Controller</li><li>@Retention(value=RUNTIME)</li><li>@Documented<br>SpringMVC中，该类的所有handler都会以字符串渲染的形式返回给调用者</li></ul><p><strong>@RequestMapping</strong><br>扩展处理器映射器，被标注的方法即handler，可以标注对象，这也是springMVC的特点之一<br>属性：</p><ul><li>value 地址/变量/正则表达式</li><li>method 方法格式，如 RequestMethod.GET</li><li>consumes 如 consumes=”application/json” 处理Content-Type的类型为指定类型的请求</li><li>produces 如 produces=”application/json” 处理请求的Accept为指定类型的请求，并返回相同的内容类型</li><li>params 如 params = “username=DonY15” 处理带有username参数，且值为DonY15的指定请求</li><li>headers 如 headers=”Referer=<a href="http://www.ifeng.com/" target="_blank" rel="noopener">http://www.ifeng.com/</a>“ 处理header中带有Referer且值为<a href="http://www.ifeng.com/" target="_blank" rel="noopener">http://www.ifeng.com/</a>的请求</li></ul><p>不同属性的映射注解</p><ul><li>@PathVariable 如 @PathVariable String username 接收地址栏中变量/正则的注解</li><li>@RequestParams 接收约定传递的参数</li></ul><p><strong>@ResponseBody</strong><br>普通MVC中常用来返回json格式给前端，建议和json类型转换器搭配使用</p><p><strong>@RequestBody</strong><br>很少使用，限制请求参数来自请求体中</p><h4 id="4-2-配置注解"><a href="#4-2-配置注解" class="headerlink" title="4-2.配置注解"></a>4-2.配置注解</h4><p><strong>@SpringBootApplication</strong><br>启动类注解，组合注解，内部封装了三种注解，都需要时可以使用该注解来简化代码</p><ul><li>@ComponentScan 扫描需要的组件</li><li>@Configuration 配置类</li><li>@EnableAutoConfiguration 开启自动配置</li></ul><p><strong>@Component</strong><br>与Configuration类似，一般当组件配置不好分类时使用</p><p><strong>@Autowired/@Resource</strong><br>自动装配/指定注入</p><p><strong>@Inject</strong><br>等价于默认的@Autowired，只是没有required属性</p><p><strong>@ImportResource</strong><br>用来加载xml配置文件。</p><p>如Spring-xxx.xml可以注入</p><p>(技巧,可以先将多个Spring-xxx.xml通过@Import注入到一个Spring-root.xml中,再将Spring-root.xml注入到代码)</p><p><strong>@Service</strong><br>一般用于修饰service层的组件（不同框架有不同的作用，如Dubbo）</p><p><strong>@Repository</strong><br>使用@Repository注解可以确保DAO或者repositories提供异常转译，这个注解修饰的DAO或者repositories类会被ComponetScan发现并配置，同时也不需要为它们提供XML配置项。</p><p><strong>@Bean</strong><br>用@Bean标注方法等价于XML中配置的bean。</p><p><strong>@Value</strong><br>注入Spring boot application.properties配置的属性的值。</p><p>—————「待深入注解」—————<br><strong>@JsonBackReference</strong><br>解决嵌套外链问题</p><p><strong>@RepositoryRestResourcepublic</strong><br>配合spring-boot-starter-data-rest使用。</p><p><strong>@Import</strong><br>用来导入其他配置类</p><p><strong>@Qualifier</strong><br>当有多个同一类型的Bean时，可以用@Qualifier(“name”)来指定。与@Autowired配合使用。@Qualifier限定描述符除了能根据名字进行注入，但能进行更细粒度的控制如何选择候选者</p><h4 id="4-3-全局异常注解"><a href="#4-3-全局异常注解" class="headerlink" title="4-3.全局异常注解"></a>4-3.全局异常注解</h4><p><strong>@ControllerAdvice</strong><br>包含@Component。可以被扫描到。统一处理异常。</p><p><strong>@ExceptionHandler（Exception.class）</strong><br>用在方法上面表示遇到这个异常就执行以下方法。</p><h4 id="4-4-事务管理"><a href="#4-4-事务管理" class="headerlink" title="4-4.事务管理"></a>4-4.事务管理</h4><p><strong>@EnableTransactionManagement</strong><br>开始事务支持</p><p><strong> @Transactional</strong><br>Service中指定方法开启事物</p><p><strong>多事务管理器传送门</strong><br><a href="https://blog.csdn.net/catoop/article/details/50595702" target="_blank" rel="noopener">https://blog.csdn.net/catoop/article/details/50595702</a><br><strong>事务简单配置传送门</strong><br><a href="https://blog.csdn.net/rickiyeat/article/details/62042685" target="_blank" rel="noopener">https://blog.csdn.net/rickiyeat/article/details/62042685</a></p><h4 id="4-5-整合Mybatis"><a href="#4-5-整合Mybatis" class="headerlink" title="4-5.整合Mybatis"></a>4-5.整合Mybatis</h4><p>mybatis-spring-boot-starter<br><strong>@MapperScan</strong><br>扫描Mapper包</p><p><strong>整合Mybatis传送门</strong><br><a href="http://www.ityouknow.com/springboot/2016/11/06/spring-boo-mybatis.html" target="_blank" rel="noopener">http://www.ityouknow.com/springboot/2016/11/06/spring-boo-mybatis.html</a></p><h4 id="4-6-JPA注解"><a href="#4-6-JPA注解" class="headerlink" title="4-6.JPA注解"></a>4-6.JPA注解</h4><p><strong>@Entity</strong><br>实体类注解</p><p><strong>@Table</strong><br>实体类和数据库表映射，如果两者名字相同可以省略</p><p><strong>@Column</strong><br>实体类属性和字段映射，如果两者名字相同可省略</p><p><strong>@Id</strong><br>主键映射</p><p><strong>@GeneratedValue(strategy = GenerationType.SEQUENCE,generator = “repair_seq”)</strong><br>表示主键生成策略是sequence（可以为Auto、IDENTITY、native等，Auto表示可在多个数据库间切换），指定sequence的名字是repair_seq。</p><p><strong>@JsonIgnore</strong><br>作用是json序列化时将Java bean中的一些属性忽略掉,序列化和反序列化都受影响。</p><p><strong>@JoinColumn（name=”loginId”）</strong><br>一对一：本表中指向另一个表的外键。<br>一对多：另一个表指向本表的外键。</p><p>@OneToOne<br>@OneToMany<br>@ManyToOne<br>对应hibernate配置文件中的一对一，一对多，多对一。</p><p>—————「待深入注解」—————<br>@Transient：表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性。如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic。@Basic(fetch=FetchType.LAZY)：标记可以指定实体属性的加载方式</p><h3 id="5-Thymeleaf-丁香叶"><a href="#5-Thymeleaf-丁香叶" class="headerlink" title="5.Thymeleaf 丁香叶"></a>5.Thymeleaf 丁香叶</h3><p>SpringBoot官方不支持使用JSP,官方推荐 <strong>Thymeleaf</strong> 引擎代替JSP</p><p><strong>Thymeleaf支持动静结合</strong></p><h4 id="5-1-语法-th-前缀"><a href="#5-1-语法-th-前缀" class="headerlink" title="5-1. 语法 th: 前缀"></a>5-1. 语法 th: 前缀</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;p th:text=&quot;$&#123;text&#125;&quot;&gt;我是普通文本&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p th:utext=&quot;$&#123;htmlText&#125;&quot;&gt;我是转义文本(标签)&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;a th:href=&quot;@&#123;&#123;ahref&#125;?pa=&#123;text&#125;(ahref=$&#123;ahref&#125;,text=$&#123;text&#125;)&#125;&quot;&gt;我是a标签&lt;/a&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">我是表格&lt;br/&gt;</span><br><span class="line">&lt;table border=&quot;1&quot;&gt;</span><br><span class="line">    &lt;tr th:each=&quot;dept:$&#123;deptList&#125;&quot;&gt;</span><br><span class="line">        &lt;td th:text=&quot;$&#123;dept.id&#125;&quot;&gt;id&lt;/td&gt;</span><br><span class="line">        &lt;td th:text=&quot;$&#123;dept.name&#125;&quot;&gt;name&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我是下拉框</span><br><span class="line">    &lt;select  &gt;</span><br><span class="line">        &lt;option th:each=&quot;dept:$&#123;deptList&#125;&quot; th:value=&quot;$&#123;dept.id&#125;&quot; th:text=&quot;$&#123;dept.name&#125;&quot; th:selected=&quot;$&#123;dept.id&#125;==$&#123;param.id[0]&#125;&quot;&gt;&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;input th:value=&quot;$&#123;text&#125;&quot;&gt; //value值</span><br><span class="line">  </span><br><span class="line">&lt;script th:src=&quot;@&#123;static/test.js&#125;&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div th:if=&quot;$&#123;ahref == &apos;test&apos;&#125;&quot;&gt;条件判断是否显示这段话&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>Thymeleaf基础手册</strong></p><p><a href="https://blog.csdn.net/zrk1000/article/details/72667478/" target="_blank" rel="noopener">https://blog.csdn.net/zrk1000/article/details/72667478/</a></p><p>后台可以使用Model</p><h4 id="5-2-优秀传送门"><a href="#5-2-优秀传送门" class="headerlink" title="5-2.优秀传送门"></a>5-2.优秀传送门</h4><p><a href="https://www.bysocket.com/?p=1973" target="_blank" rel="noopener">https://www.bysocket.com/?p=1973</a></p><h3 id="6-PageInfo的使用"><a href="#6-PageInfo的使用" class="headerlink" title="6.PageInfo的使用"></a>6.PageInfo的使用</h3><h5 id="传送门https-blog-csdn-net-csdn-huzeliang-article-details-79350425"><a href="#传送门https-blog-csdn-net-csdn-huzeliang-article-details-79350425" class="headerlink" title="传送门https://blog.csdn.net/csdn_huzeliang/article/details/79350425"></a>传送门<a href="https://blog.csdn.net/csdn_huzeliang/article/details/79350425" target="_blank" rel="noopener">https://blog.csdn.net/csdn_huzeliang/article/details/79350425</a></h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-boot基础&quot;&gt;&lt;a href=&quot;#Spring-boot基础&quot; class=&quot;headerlink&quot; title=&quot;Spring boot基础&quot;&gt;&lt;/a&gt;Spring boot基础&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-Starte
      
    
    </summary>
    
      <category term="Spring全家桶" scheme="http://yoursite.com/categories/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>实用工具类集合</title>
    <link href="http://yoursite.com/2018/07/12/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2018/07/12/实用工具类集合/</id>
    <published>2018-07-11T16:00:00.000Z</published>
    <updated>2018-08-19T08:45:20.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实用工具类集合"><a href="#实用工具类集合" class="headerlink" title="实用工具类集合"></a>实用工具类集合</h2><p>[TOC]</p><p><strong>简述</strong></p><p>该工具类集合章会持续更新,具体工具类会集成到我的GitHub仓库中</p><p><strong>传送门</strong></p><p><strong><a href="https://github.com/dony15/mymodes" target="_blank" rel="noopener">https://github.com/dony15/mymodes</a></strong></p><h4 id="1-js-utils-js-前段小集合工具"><a href="#1-js-utils-js-前段小集合工具" class="headerlink" title="1.js-utils.js-前段小集合工具"></a>1.js-utils.js-前段小集合工具</h4><p>常用js的前段封装</p><ol><li><p>XMLHttpRequest 原生ajax的获取 ,内置了Chrome和IE的兼容转换</p></li><li><p>图片上传功能前段,四个id解决 | 图片 | 表单 | 回显 | 的结合</p></li><li><p>验证码显示和输入框校验 两个id 一个url 即可解决 | 校验 | 提示 | 提交url |的结合</p></li><li><p>点击切换验证码 id和url </p></li></ol><h4 id="2-pattern-js-正则工具"><a href="#2-pattern-js-正则工具" class="headerlink" title="2.pattern.js-正则工具"></a>2.pattern.js-正则工具</h4><p>包含开发中各种验证常用的正则封装</p><h4 id="2-CollectionsFactory-集合封装工具"><a href="#2-CollectionsFactory-集合封装工具" class="headerlink" title="2.CollectionsFactory-集合封装工具"></a>2.CollectionsFactory-集合封装工具</h4><p>包含各种集合类型的构建,静态工具类,使代码看起来更加<strong>规范简洁</strong></p><h4 id="3-DownloadUtil-文件下载工具"><a href="#3-DownloadUtil-文件下载工具" class="headerlink" title="3.DownloadUtil-文件下载工具"></a>3.DownloadUtil-文件下载工具</h4><p>文件下载工具类,根据文件名或者文件路径获取文件进行下载(多场景的封装)</p><h4 id="3-FileUtil-文件处理工具"><a href="#3-FileUtil-文件处理工具" class="headerlink" title="3.FileUtil-文件处理工具"></a>3.FileUtil-文件处理工具</h4><p>非常实用的文件处理工具,如获取文件名/去重/清空但不删除文件夹/磁盘遍历/xml生成等等…</p><h4 id="4-FormatStyle-文件容量格式转换工具"><a href="#4-FormatStyle-文件容量格式转换工具" class="headerlink" title="4.FormatStyle-文件容量格式转换工具"></a>4.FormatStyle-文件容量格式转换工具</h4><p>文件容量单位的格式转换,主要解决特殊情况下<strong>因为数字太大导致java直接写无法识别的</strong></p><h4 id="5-IDUtils-ID生成工具"><a href="#5-IDUtils-ID生成工具" class="headerlink" title="5.IDUtils-ID生成工具"></a>5.IDUtils-ID生成工具</h4><p>ID的多种生成策略</p><h4 id="5-JsonUtils-Json转化工具"><a href="#5-JsonUtils-Json转化工具" class="headerlink" title="5.JsonUtils-Json转化工具"></a>5.JsonUtils-Json转化工具</h4><p>使用jackson,多种类型和json的转化封装 <strong>对象 | List</strong></p><h4 id="6-ResourcesUtil-资源读取工具"><a href="#6-ResourcesUtil-资源读取工具" class="headerlink" title="6.ResourcesUtil-资源读取工具"></a>6.ResourcesUtil-资源读取工具</h4><p>资源读取工具类,较为特殊,使用较少(主要是国际语言的匹配读取,现在前段控制即可)</p><h4 id="7-UtilFuns-乱七八糟工具"><a href="#7-UtilFuns-乱七八糟工具" class="headerlink" title="7.UtilFuns-乱七八糟工具"></a>7.UtilFuns-乱七八糟工具</h4><p>该工具类非常的丰富.各种SE的基础转换和时间/固定长度转换/编码解码等都有涉猎</p><h4 id="8-QuartzUtil-时间调度工具"><a href="#8-QuartzUtil-时间调度工具" class="headerlink" title="8.QuartzUtil-时间调度工具"></a>8.QuartzUtil-时间调度工具</h4><p>该工具为时间调度工具类,包含增加工作,修改工作,移除工作,启动所有定时和关闭所有定时</p><h4 id="9-CookieUtils-Cookie设置工具"><a href="#9-CookieUtils-Cookie设置工具" class="headerlink" title="9.CookieUtils-Cookie设置工具"></a>9.CookieUtils-Cookie设置工具</h4><p>Cookie的设置与获取/删除/生命周期等操作集合</p><h4 id="10-ResopnseResult-响应消息工具"><a href="#10-ResopnseResult-响应消息工具" class="headerlink" title="10.ResopnseResult-响应消息工具"></a>10.ResopnseResult-响应消息工具</h4><p>响应消息的一种规范工具类 status(Boolean)/msg(String)/data(Object)</p><h4 id="11-ExcelUtils-Excel报表"><a href="#11-ExcelUtils-Excel报表" class="headerlink" title="11.ExcelUtils-Excel报表"></a>11.ExcelUtils-Excel报表</h4><p>数据库报表工具包,将数据库数据生成Excel表格,<strong>发送到前端</strong>或<strong>保存到本地</strong></p><p>(内置sheet分页功能/数据类型转换)</p><h4 id="12-SmsUtils-短信验证"><a href="#12-SmsUtils-短信验证" class="headerlink" title="12.SmsUtils-短信验证"></a>12.SmsUtils-短信验证</h4><p>短信API产品的DEMO程序,执行main函数即可体验短信产品API功能</p><p>(只需要将AK替换成开通了云通信-短信产品功能的AK即可)(<strong>国际短信发送请勿参照此DEMO</strong>)</p><h4 id="13-generatorSqlmapCustom-逆向工程-贼稳当版"><a href="#13-generatorSqlmapCustom-逆向工程-贼稳当版" class="headerlink" title="13.generatorSqlmapCustom-逆向工程(贼稳当版)"></a>13.generatorSqlmapCustom-逆向工程(贼稳当版)</h4><p><strong>ssm逆向工程工具包</strong></p><ol><li>自动生成mybatis持久层数据以及pojo对象</li><li>自动搭建持久层和pojo等<strong>关系映射</strong></li><li>生成几乎所有<strong>增删改</strong>和<strong>单表查功能</strong></li></ol><h4 id="14-wxpay工具类-微信支付"><a href="#14-wxpay工具类-微信支付" class="headerlink" title="14.wxpay工具类-微信支付"></a>14.wxpay工具类-微信支付</h4><h4 id="15-EncodeInterceptor-编码拦截工具"><a href="#15-EncodeInterceptor-编码拦截工具" class="headerlink" title="15.EncodeInterceptor-编码拦截工具"></a>15.EncodeInterceptor-编码拦截工具</h4><h4 id="16-策略模式redis工具类"><a href="#16-策略模式redis工具类" class="headerlink" title="16.策略模式redis工具类"></a>16.策略模式redis工具类</h4><p>​    接口+单机/集群+基础配置</p><h4 id="17-MessageDigestUtils-md5-sha-1-加密工具"><a href="#17-MessageDigestUtils-md5-sha-1-加密工具" class="headerlink" title="17.MessageDigestUtils -md5/sha-1-加密工具"></a>17.MessageDigestUtils -md5/sha-1-加密工具</h4><h4 id="18-FileUpLoadUtils-文件上传"><a href="#18-FileUpLoadUtils-文件上传" class="headerlink" title="18.FileUpLoadUtils-文件上传"></a>18.FileUpLoadUtils-文件上传</h4><p>较原生的上传,本地可选水印版(很少用),可以修改为FastDFS使用</p><h4 id="19-HttpClientUtil"><a href="#19-HttpClientUtil" class="headerlink" title="19.HttpClientUtil"></a>19.HttpClientUtil</h4><p>Http请求url的工具类,需要导入jar包 httpclient | jsoup(该jar爬虫时导入即可)</p><h4 id="20-java爬虫"><a href="#20-java爬虫" class="headerlink" title="20.java爬虫"></a>20.java爬虫</h4><p>基础爬虫封装(豆瓣部分示例)</p><h4 id="21-FreemarkerUtil"><a href="#21-FreemarkerUtil" class="headerlink" title="21.FreemarkerUtil"></a>21.FreemarkerUtil</h4><p>该工具类简单实用的通过freemarker模板生成静态页面</p><h4 id="其他中文命名工具类不再解释-简单明了"><a href="#其他中文命名工具类不再解释-简单明了" class="headerlink" title="其他中文命名工具类不再解释(简单明了)"></a>其他中文命名工具类不再解释(简单明了)</h4><hr><h2 id="狗厂-amp-飞机厂工具库推荐"><a href="#狗厂-amp-飞机厂工具库推荐" class="headerlink" title="狗厂&amp;飞机厂工具库推荐"></a>狗厂&amp;飞机厂工具库推荐</h2><h5 id="1-Google-Guava"><a href="#1-Google-Guava" class="headerlink" title="1.Google Guava"></a>1.Google Guava</h5><p><strong>官方教程（汉译）传送门：</strong><a href="https://blog.csdn.net/axi295309066/article/details/70856889" target="_blank" rel="noopener">https://blog.csdn.net/axi295309066/article/details/70856889</a></p><p><strong>中文指南传送门：</strong><a href="https://blog.csdn.net/qq_35246620/article/details/77970421" target="_blank" rel="noopener">https://blog.csdn.net/qq_35246620/article/details/77970421</a></p><h5 id="2-apache-commons"><a href="#2-apache-commons" class="headerlink" title="2.apache commons"></a>2.apache commons</h5><p><strong>官网</strong>：<a href="http://commons.apache.org/" target="_blank" rel="noopener">http://commons.apache.org/</a></p><p><strong>中文指南传送门：</strong><a href="http://www.mamicode.com/info-detail-1828364.html" target="_blank" rel="noopener">http://www.mamicode.com/info-detail-1828364.html</a></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实用工具类集合&quot;&gt;&lt;a href=&quot;#实用工具类集合&quot; class=&quot;headerlink&quot; title=&quot;实用工具类集合&quot;&gt;&lt;/a&gt;实用工具类集合&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该工具类集合章会持续
      
    
    </summary>
    
      <category term="工具类" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>工具类集合分析--接口</title>
    <link href="http://yoursite.com/2018/07/08/%E5%B7%A5%E5%85%B7%E7%B1%BB%E9%9B%86%E5%90%88%E5%88%86%E6%9E%90--%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2018/07/08/工具类集合分析--接口/</id>
    <published>2018-07-07T16:00:00.000Z</published>
    <updated>2018-07-12T06:15:22.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="工具类集合分析–接口"><a href="#工具类集合分析–接口" class="headerlink" title="工具类集合分析–接口"></a>工具类集合分析–接口</h3><p>[TOC]</p><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><p>使用接口作为工具类,一般分两种情况</p><p>​    (1)定义常量</p><p>​    (2)定义动态工具类</p><h4 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h4><h5 id="1-定义常量"><a href="#1-定义常量" class="headerlink" title="1.定义常量"></a>1.定义常量</h5><p>可以在工具类中快捷明了的定义常量来使用,因为接口中默认属性便是常量,如:</p><p>​    int HOTEL_STATUS_INVALID=0;//酒店失效</p><p>​    int HOTEL_STATUS_VALID=1;//酒店有效</p><p>当controller中往前端传递数据时,需要判断状态,而状态从controller中多次定义会导致观察不变,不利于交接和后期维护,此时便可以将状态抽出来存进接口工具类中,提高代码的<strong>可读性</strong>和<strong>开发效率</strong> (RestFull开发风格中,提高代码可读性尤为突出)</p><h5 id="2-定义动态工具类"><a href="#2-定义动态工具类" class="headerlink" title="2.定义动态工具类"></a>2.定义动态工具类</h5><p>当程序运行在不同的环境中时,因为程序对环境的耦合性,频繁的修改代码会大大降低开发效率,可以使用工具类接口的方式,将耦合性降低,如<strong>动态工具类</strong></p><p><strong>场景</strong></p><p>​    redis 单机版和集群版    (可以根据需要选择具体的方案,减少代码的修改量)</p><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;工具类集合分析–接口&quot;&gt;&lt;a href=&quot;#工具类集合分析–接口&quot; class=&quot;headerlink&quot; title=&quot;工具类集合分析–接口&quot;&gt;&lt;/a&gt;工具类集合分析–接口&lt;/h3&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h4 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述
      
    
    </summary>
    
      <category term="工具类" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Zookeeper与Dubbo基础原理</title>
    <link href="http://yoursite.com/2018/07/08/Zookeeper%E4%B8%8EDubbo%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/07/08/Zookeeper与Dubbo基础原理/</id>
    <published>2018-07-07T16:00:00.000Z</published>
    <updated>2018-07-26T15:00:04.103Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Zookeeper与Dubbo基础原理"><a href="#Zookeeper与Dubbo基础原理" class="headerlink" title="Zookeeper与Dubbo基础原理"></a>Zookeeper与Dubbo基础原理</h3><p>[TOC]</p><h4 id="1-Zookeeper-RPC框架"><a href="#1-Zookeeper-RPC框架" class="headerlink" title="1.Zookeeper(RPC框架)"></a>1.Zookeeper(RPC框架)</h4><p><strong>高效的分布式分布式应用协调服务,提供注册和负载均衡等–&gt;服务中心</strong></p><p><strong>Zookeeper也是集群管理工具,用来管理各种需要的集群,如solorCloud</strong></p><ul><li>zookeeper让调用者知道调用的哪台服务器地址,也是集群的管理者</li><li>Zookeeper具有心跳检测机制,当服务器挂掉时可以让调用者知道,从而切换请求服务器</li><li>Zookeeper具有高并发的横向扩展,在不改变代码的情况下对设备进行扩展</li></ul><p><strong>1.命名服务   2.配置管理   3.集群管理   4.分布式锁  5.队列管理</strong> </p><p>命名服务:在zookeeper的文件系统里创建一个目录，即有唯一的path。在我们使用tborg无法确定上游程序的部署机器时即可与下游程序约定好path，通过path即能互相探索发现。 </p><p>配置管理:程序分散部署在多台机器上难以管理,可以将每台设备的信息存储在Zookeeper的目录节点中,然后相关程序对该目录进行监控,如果配置信息发生变化,则Zookeeper会发布新的配置</p><p>集群管理:(1)设备的加入(2)选举master(可以改变设备编号,编号第一位自动master(一种思路))</p><p>分布式锁:zookeeper是一致性的文件系统,锁服务可以分为两类，(1)保持独占，(2)控制时序。  </p><p>列队管理:</p><ol><li>同步队列，当一个队列的成员都聚齐时，这个队列才可用，否则一直等待所有成员到达。在约定目录下创建临时目录节点，监听节点数目是否是我们要求的数目。  </li><li>队列按照 FIFO 方式进行入队和出队操作。和分布式锁服务中的控制时序场景基本原理一致，入列有编号，出列按编号。   </li></ol><h5 id="1-1-特性"><a href="#1-1-特性" class="headerlink" title="1-1.特性"></a>1-1.特性</h5><ol><li>最终一致性：client不论连接到哪个Server，展示给它都是同一个视图，这是zookeeper<strong>最重要的性能</strong>。 </li><li>可靠性：具有简单、健壮、良好的性能，如果消息被到一台服务器接受，那么它将被所有的服务器接受。 </li><li>实时性：Zookeeper保证客户端将在一个时间间隔范围内获得服务器的更新信息，或者服务器失效的信息。但由于网络延时等原因，Zookeeper不能保证两个客户端能同时得到刚更新的数据，如果需要最新数据，应该在读数据之前调用sync()接口。  </li><li>等待无关（wait-free）：慢的或者失效的client不得干预快速的client的请求，使得每个client都能有效的等待。  </li><li>原子性：更新只能成功或者失败，没有中间状态。  </li><li>顺序性：包括全局有序和偏序两种：全局有序是指如果在一台服务器上消息a在消息b前发布，则在所有Server上消息a都将在消息b前被发布；偏序是指如果一个消息b在消息a后被同一个发送者发布，a必将排在b前面。  </li></ol><h5 id="1-2-Zookeeper工作原理"><a href="#1-2-Zookeeper工作原理" class="headerlink" title="1-2.Zookeeper工作原理"></a>1-2.Zookeeper工作原理</h5><p>​    Zookeeper 的核心是<strong>原子广播</strong>，这个机制保证了各个Server之间的同步。实现这个机制的协议叫做<strong>Zab协议</strong>。Zab协议有两种模式，它们分别是<strong>恢复模式</strong>（选主）和<strong>广播模式</strong>（同步）。当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，当领导者被选举出来，且大多数Server完成了和 leader的状态同步以后，恢复模式就结束了。状态同步保证了leader和Server具有相同的系统状态 </p><p>​    为了保证事务的<strong>顺序一致性</strong>，zookeeper采用了递增的事务id号（zxid）来标识事务。所有的提议（proposal）都在被提出的时候加上了zxid。实现中zxid是一个64位的数字，它高32位是epoch用来标识leader关系是否改变，每次一个leader被选出来，它都会有一个新的epoch，标识当前属于那个leader的统治时期。低32位用于递增计数。 </p><p><strong>(部分整理)</strong></p><p><strong>原文:<a href="https://blog.csdn.net/xqb_756148978/article/details/52259381" target="_blank" rel="noopener">https://blog.csdn.net/xqb_756148978/article/details/52259381</a></strong></p><h4 id="2-Dubbo-SOA基础框架"><a href="#2-Dubbo-SOA基础框架" class="headerlink" title="2.Dubbo(SOA基础框架)"></a>2.Dubbo(SOA基础框架)</h4><p><strong>管理中间层的框架,与注册中心搭配使用,如Zookeeper(最常用),使之具有Zookeeper负载均衡/资源同步等的特性</strong></p><p>​      <strong>单一应用架构</strong>(ORM)</p><p> –&gt;<strong>垂直应用架构</strong>(MVC) 传统架构,难以应对高并发/高可用问题</p><p>–&gt;<strong>分布式服务架构</strong>(RPC) 功能拆分,多台服务器做不同的功能,相当于节点,一个节点下可以有多态服务器做集群</p><p>–&gt;<strong>流动计算架构</strong>(SOA) 节点和节点通过SOA通信,将冗余的业务逻辑单独提取出来,分为表现层和业务层 缓存 数据库层…</p><h5 id="2-1-核心部分"><a href="#2-1-核心部分" class="headerlink" title="2-1.核心部分"></a>2-1.核心部分</h5><ol><li>远程通讯 </li><li>集群容错 </li><li>自动发现 </li></ol><h5 id="2-2-作用"><a href="#2-2-作用" class="headerlink" title="2-2.作用"></a>2-2.作用</h5><ol><li><strong>透明化的远程方法调用</strong>，就像调用本地方法一样调用远程方法，只需简单配置，没有任何API侵入   </li><li><strong>软负载均衡及容错机制</strong>，可在内网替代F5等硬件负载均衡器，降低成本，减少单点.</li><li><strong>服务自动注册与发现</strong>，不再需要写死服务提供方地址，注册中心基于接口名查询服务提供者的IP地址，并且能够平滑添加或删除服务提供者。</li></ol><p>Dubbo采用全spring配置方式,透明化接入,应用,没有API入侵</p><h5 id="2-3-架构"><a href="#2-3-架构" class="headerlink" title="2-3.架构"></a>2-3.架构</h5><p><img src="https://i.imgur.com/zNpr0bk.jpg" alt=""></p><pre><code>Provider: 暴露服务的服务提供方。</code></pre><p>​       Consumer: 调用远程服务的服务消费方。</p><p>​       Registry: 服务注册与发现的注册中心。</p><p>​       Monitor: 统计服务的调用次调和调用时间的监控中心.</p><p>​    Container: 服务运行器。</p><h5 id="2-4-调用关系说明："><a href="#2-4-调用关系说明：" class="headerlink" title="2-4.调用关系说明："></a>2-4.调用关系说明：</h5><ol start="0"><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ol><h5 id="2-5-注意Dubbo内部版本冲突"><a href="#2-5-注意Dubbo内部版本冲突" class="headerlink" title="2-5.注意Dubbo内部版本冲突"></a>2-5.注意Dubbo内部版本冲突</h5><p>dubbo的jar包中存在spring 2.+版本以及netty过时版本,需要屏蔽使用,防止冲突</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;exclusions&gt;</span><br><span class="line">            &lt;exclusion&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring&lt;/artifactId&gt;</span><br><span class="line">            &lt;/exclusion&gt;</span><br><span class="line">            &lt;exclusion&gt;</span><br><span class="line">                &lt;groupId&gt;org.jboss.netty&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;netty&lt;/artifactId&gt;</span><br><span class="line">            &lt;/exclusion&gt;</span><br><span class="line">        &lt;/exclusions&gt;</span><br></pre></td></tr></table></figure><h5 id="2-6注意Dubbo发布过程"><a href="#2-6注意Dubbo发布过程" class="headerlink" title="2.6注意Dubbo发布过程"></a>2.6注意Dubbo发布过程</h5><ol><li>初始化Spring容器</li><li>占用暴露服务的端口进行发布,此时本机的端口不可以冲突</li></ol><p><strong>收藏Dubbo架构详解<a href="http://shiyanjun.cn/archives/325.html" target="_blank" rel="noopener">http://shiyanjun.cn/archives/325.html</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Zookeeper与Dubbo基础原理&quot;&gt;&lt;a href=&quot;#Zookeeper与Dubbo基础原理&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper与Dubbo基础原理&quot;&gt;&lt;/a&gt;Zookeeper与Dubbo基础原理&lt;/h3&gt;&lt;p&gt;[T
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Solr基础原理</title>
    <link href="http://yoursite.com/2018/07/06/Solr%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/07/06/Solr基础原理/</id>
    <published>2018-07-05T16:00:00.000Z</published>
    <updated>2018-07-26T15:46:01.516Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Solr基础原理"><a href="#Solr基础原理" class="headerlink" title="Solr基础原理"></a>Solr基础原理</h3><p>[TOC]</p><h4 id="1-目录核心组成"><a href="#1-目录核心组成" class="headerlink" title="1.目录核心组成"></a>1.目录核心组成</h4><p><strong>1.core</strong></p><p>​    solr的索引库,可以理解为数据库,需要手动创建(文件夹),core可以根据需要建立多个索引库,索引库的内容可以在后台看到也可以在core中看到</p><p><strong>2.solrhome</strong></p><p>​    solr的配置目录,solr服务器所有的配置文件存放的目录(<strong>core创建在solrhome中</strong>)</p><h5 id="3-collection一个完整的索引库-逻辑结构"><a href="#3-collection一个完整的索引库-逻辑结构" class="headerlink" title="3.collection一个完整的索引库,逻辑结构"></a><strong>3.collection</strong>一个完整的索引库,<strong>逻辑结构</strong></h5><p><strong>1.高并发,高可用</strong></p><ul><li>solr的逻辑索引(逻辑意义上的完整索引),由多个<strong>shard片</strong>的组成<strong>负载均衡</strong></li><li>每个shard可以分成多份Core,<strong>每份相同,主(leadereplica)从(replica)同步,高可用</strong></li><li>collection本质是可以跨越多个核的索引,包含冗余的索引.</li></ul><p><strong>2.海量存储</strong></p><ul><li>当存储空间不够时,只需要<strong>横向扩充shard片</strong>就可以</li></ul><h5 id="4-SolrCloud-物理结构"><a href="#4-SolrCloud-物理结构" class="headerlink" title="4.SolrCloud,物理结构"></a>4.SolrCloud,物理结构</h5><p>一个SolrCloud集群,包含多个Solr服务器,每个Solr服务器包含多个Core(索引库)</p><p><img src="https://i.imgur.com/53JsCkq.png" alt=""></p><p><strong>参考<a href="https://blog.csdn.net/zhousenshan/article/details/51799567" target="_blank" rel="noopener">https://blog.csdn.net/zhousenshan/article/details/51799567</a></strong></p><h4 id="2-配置详解"><a href="#2-配置详解" class="headerlink" title="2.配置详解"></a>2.配置详解</h4><h5 id="1-配置中文分词"><a href="#1-配置中文分词" class="headerlink" title="1.配置中文分词"></a>1.配置中文分词</h5><ol><li><fieldtype name="text_ik" class="solr.TextField">   <!-- text_ik 中文分词包的引用名 --></fieldtype></li><li><analyzer class="org.wltea.analyzer.lucene.IKAnalyzer">  <!-- 中文分词包 --></analyzer></li><li></li><li><!-- 字段title 使用中文分词 stored="true"下载并索引 --></li><li><field name="item_title" type="text_ik" indexed="true" stored="true"> </field></li><li><!-- 字段price 使用long类型 --></li><li><field name="item_price" type="long" indexed="true" stored="true"></field></li><li><!-- city_id 使用long类型 --></li><li><field name="item_city_id" type="long" indexed="true" stored="true"> </field></li><li><!-- city_name 因为城市名固定,所以不需要分词,String即可 --></li><li><field name="item_city_name" type="string" indexed="true" stored="true"></field></li><li><!-- image 图片地址,String类型 --></li><li><field name="item_image" type="string" indexed="true" stored="true"></field></li><li><!-- content 中文分词 stored="false"(不下载,但可以索引) --></li><li><field name="item_content" type="text_ik" indexed="true" stored="false"></field></li><li><!-- item_keywords 自定义查询名(关键字);可以根据title||city_name||content来查询 --></li><li><field name="item_keywords" type="text_ik" indexed="true" stored="false" multivalued="true"></field></li><li><copyfield source="item_title" dest="item_keywords"></copyfield></li><li><copyfield source="item_city_name" dest="item_keywords"></copyfield></li><li><copyfield source="item_content" dest="item_keywords"></copyfield></li></ol><ol><li><!-- 默认使用item_keywords(Solr后台分词查询中显示自定义的字段) --></li><li><requesthandler name="/select" class="solr.SearchHandler"></requesthandler></li><li>​    &lt;!– default values for query parameters can be specified, these</li><li>​         will be overridden by parameters in the request</li><li>​      –&gt;</li><li>​     <lst name="defaults"></lst></li><li>​       <str name="echoParams">explicit</str></li><li>​       <str name="df">item_keywords</str></li><li>​        <int name="rows">10</int></li></ol><ol><li><!-- 默认使用item_keywords(开启查询) --></li><li><requesthandler name="/query" class="solr.SearchHandler"></requesthandler></li><li>​     <lst name="defaults"></lst></li><li>​       <str name="echoParams">explicit</str></li><li>​       <str name="wt">json</str></li><li>​       <str name="indent">true</str></li><li>​       <str name="df">item_keywords</str></li><li>​     </li><li></li></ol><h5 id="2-配置Solr-Dataimport"><a href="#2-配置Solr-Dataimport" class="headerlink" title="2.配置Solr Dataimport"></a>2.配置Solr Dataimport</h5><ol><li><!-- dataimport 开启Solr连接数据库功能 --></li><li><requesthandler name="/dataimport" class="org.apache.solr.handler.dataimport.DataImportHandler"> </requesthandler></li><li>​    <lst name="defaults">      </lst></li><li><!-- dataimport读取data-config.xml设定的JDBC配置文件 -->   </li><li>​         <str name="config">data-config.xml</str> </li><li>​              </li><li>  </li></ol><ol><li><dataconfig>       </dataconfig></li><li><!-- JDBC配置 --></li><li>​    <datasource type="JdbcDataSource" driver="com.mysql.jdbc.Driver" url="jdbc:mysql://localhost:3306/travel_db?characterEncoding=utf-8" user="root" password="root" batchsize="-1">   </datasource></li><li>​    <document>   </document></li><li><!-- 查询语句(全表查询)字段,并匹配分词中设定的name -->  </li><li>​        <entity name="hotel" query="select ID,TITLE,PRICE,IMAGE,CITY_NAME, CITY_ID from HOTEL" datasource="JdbcDataSource">        </entity></li><li>​            <field column="ID" name="id"> </field></li><li>​            <field column="TITLE" name="item_title"> </field></li><li>​                            <field column="PRICE" name="item_price"> </field></li><li>​                            <field column="CONTENT" name="item_content"></field></li><li><field column="IMAGE" name="item_image"></field></li><li>​                            <field column="CITY_NAME" name="item_city_name"></field></li><li><field column="CITY_ID" name="item_city_id"></field></li><li>​                </li><li>​            </li><li>  </li></ol><h5 id="3-Solr后台的使用"><a href="#3-Solr后台的使用" class="headerlink" title="3.Solr后台的使用"></a>3.Solr后台的使用</h5><p>第一次先Dataimport–&gt;Execute导入,然后Refresh刷新状态即可</p><p><strong>Query:查询功能</strong> </p><p>​    q  <em> ; </em>    –&gt;第一个 <em> 表示字段; 第二个 </em> 表示字段的内容;  </p><p>​    如    item_keywords:北京   分词中有”北京”关键字的内容</p><p>​        item_price:[* TO 200]  价格是200以内的内容</p><p>​        item_price:[100 TO 700]  价格是100-200的内容</p><h4 id="3-java中的作用"><a href="#3-java中的作用" class="headerlink" title="3.java中的作用"></a>3.java中的作用</h4><p>建立一个新的索引模块 index,接口层和实现发布层</p><p>写Solr<strong>更新</strong>和<strong>搜索</strong>两个方法dubbo发布即可在controller中使用</p><p>(一般与MQ一起使用,如activeMQ,见<strong>activeMQ基础与运用章节</strong>)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Solr基础原理&quot;&gt;&lt;a href=&quot;#Solr基础原理&quot; class=&quot;headerlink&quot; title=&quot;Solr基础原理&quot;&gt;&lt;/a&gt;Solr基础原理&lt;/h3&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h4 id=&quot;1-目录核心组成&quot;&gt;&lt;a href=&quot;#1-目录核心组成
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/03/hello-world/"/>
    <id>http://yoursite.com/2018/07/03/hello-world/</id>
    <published>2018-07-03T15:51:12.163Z</published>
    <updated>2018-07-05T12:34:12.004Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Shiro基础原理</title>
    <link href="http://yoursite.com/2018/06/04/Shiro%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/06/04/Shiro基础原理/</id>
    <published>2018-06-03T16:00:00.000Z</published>
    <updated>2018-07-29T13:36:07.668Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Shiro基础原理"><a href="#Shiro基础原理" class="headerlink" title="Shiro基础原理"></a>Shiro基础原理</h2><p>[TOC]</p><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p><strong>shiro是apache的一个开源框架，实现 |认证|授权|为核心的一系列权限管理框架.</strong></p><ul><li>Web 应用程序一般做法通过表单提交用户名及密码达到认证目的。 </li><li>“授权”即是否允许已认证用户访问受保护资源。 </li></ul><h3 id="2-对比"><a href="#2-对比" class="headerlink" title="2.对比"></a>2.对比</h3><p><strong>Shiro与Spring Security</strong></p><ol><li>简单性:shiro更加简单,更容易理解</li><li>灵活性:shiro可以使用在 |Web|EJB|IoC| 等大部分的应用环境,而Spring Security必须和Spring一起集成使用</li><li>拔插性:shiro干净的API(工具类集合)和设计模式(单例+工厂)使它可以方便的和许多其他框架整合,Spring Security则只能与Spring一起集成</li></ol><h3 id="3-组成"><a href="#3-组成" class="headerlink" title="3.组成"></a>3.组成</h3><p><img src="file:///C:/Users/Administrator/Documents/My%20Knowledge/temp/1b7bc2c3-9f2c-4ea2-8ed7-97820c205482/128/index_files/871676-20160722213407794-1894786938.png" alt="img"></p><h4 id="1-三个核心组件"><a href="#1-三个核心组件" class="headerlink" title="1.三个核心组件"></a>1.三个核心组件</h4><ol><li>Subject: 令牌与项目的登录关系,Shiro保证了项目整体的安全性,是<strong>Shiro对外API的核心</strong></li><li>Security Manager:负责安全认证预授权等  <strong>Shiro的核心</strong> </li><li>Realm:整个框架中<strong>必须</strong>由设计者自行实现的模块之一.并且Shiro支持多个<strong>Realm数据源</strong>,最为重要的一种实现方式—&gt;数据库查询,当需要多个数据库组合验证时,多个数据源的效果就体现出来</li></ol><hr><h4 id="2-主要功能"><a href="#2-主要功能" class="headerlink" title="2.主要功能"></a>2.主要功能</h4><ol><li>Authentication:    身份认证</li><li>Authorization:  授权,权限验证</li><li>Session Manager: 会话管理</li><li>Cryptography:加密</li><li>Web Support: web支持</li><li>Caching:缓存</li><li>Concurrency:多线程验证</li><li>Testing:提供测试支持</li><li>Run As:允许一个用户假装另一个用户访问</li><li>Remember Me: 记住我</li></ol><h4 id="3-组件和内容流程分析"><a href="#3-组件和内容流程分析" class="headerlink" title="3.组件和内容流程分析"></a>3.组件和内容流程分析</h4><h5 id="1-subject"><a href="#1-subject" class="headerlink" title="1.subject"></a>1.subject</h5><p>外部API核心,存储用户数据和返回数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Subject currentUser = SecurityUtils.getSubject();</span><br></pre></td></tr></table></figure><p><strong>获得Subject的方法,有了Subject才能和Shiro做深入的交互</strong></p><h5 id="2-SessionManager"><a href="#2-SessionManager" class="headerlink" title="2.SessionManager"></a>2.SessionManager</h5><ol><li><p>Shiro的Session提供了HttpSession常规的大部分功能,但是又有区别,即:Session不依赖于<strong>HTTP环境</strong>,可以在程序任何地方使用</p></li><li><p>Shiro的Session可以在任何的环境下使用<strong>相同的API</strong>,而且是<strong>自动启动SessionManager</strong></p></li></ol><p>如果希望在*<em>当前与应用程序会话期间</em>,为用户提供内容,则可以设置Session</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Session session = currentUser.getSession();</span><br><span class="line">session.setAttribute( &quot;someKey&quot;, &quot;aValue&quot; );</span><br></pre></td></tr></table></figure><h5 id="3-登录认证Authentication"><a href="#3-登录认证Authentication" class="headerlink" title="3.登录认证Authentication"></a>3.登录认证Authentication</h5><p>Shiro的认证功能,会根据Subject的信息进行判断,如果认证过,则直接进入/如果没认证,则需要先认证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if ( !currentUser.isAuthenticated() ) &#123;</span><br><span class="line">    //collect user principals and credentials in a gui specific manner</span><br><span class="line">    //such as username/password html form, X509 certificate, OpenID, etc.</span><br><span class="line">    //We&apos;ll use the username/password example here since it is the most common.</span><br><span class="line">    //(do you know what movie this is from? ;)</span><br><span class="line">    UsernamePasswordToken token = new UsernamePasswordToken(&quot;lonestarr&quot;, &quot;vespa&quot;);</span><br><span class="line">    //this is all you have to do to support &apos;remember me&apos; (no config - built in!):</span><br><span class="line">    token.setRememberMe(true);</span><br><span class="line">    currentUser.login(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UsernamePasswordToken</strong>(username/password)</p><p>以特定的方式收集用户的<strong>主体</strong>和<strong>凭证</strong></p><p><strong>Remember Me</strong>  no config - built in!(true/false)</p><p>Shiro内置功能,记住用户(详情待更新)</p><p><strong>登录尝试失败的反馈–异常</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    currentUser.login( token );</span><br><span class="line">    //if no exception, that&apos;s it, we&apos;re done!</span><br><span class="line">&#125; catch ( UnknownAccountException uae ) &#123;</span><br><span class="line">    //username wasn&apos;t in the system, show them an error message?</span><br><span class="line">&#125; catch ( IncorrectCredentialsException ice ) &#123;</span><br><span class="line">    //password didn&apos;t match, try again?</span><br><span class="line">&#125; catch ( LockedAccountException lae ) &#123;</span><br><span class="line">    //account for that username is locked - can&apos;t login.  Show them a message?</span><br><span class="line">&#125;</span><br><span class="line">    ... more types exceptions to check if you want ...</span><br><span class="line">&#125; catch ( AuthenticationException ae ) &#123;</span><br><span class="line">    //unexpected condition - error?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Shiro中使用多种异常完善认证</strong></p><ul><li>将Subject的.login(token)进行捕获,从而的到许多种异常提醒,根据相应的异常判断用户登录的错误信息</li><li>注意:Shiro有丰富的认证异常设定并支持自定义异常,在Realm中通过判断条件,抛出异常的方式,可以在Controller中接收需要的异常数据来完善程序的开发</li></ul><hr><p><img src="file:///C:/Users/Administrator/Documents/My%20Knowledge/temp/b9f81ac7-ad34-4adc-b4c2-cb2f73a4f2dd/128/index_files/48cae49c-8924-4a4e-8efd-bdbf38f07c97.jpg" alt="img">    </p><ol><li><strong>注意:Shiro不会自己维护用户|权限;</strong></li><li><strong>需要开发者去 设计|提供 ;</strong></li><li><strong>然后通过接口注入给Shiro即可</strong></li></ol><h3 id="4-源码"><a href="#4-源码" class="headerlink" title="4.源码"></a>4.源码</h3><h4 id="Token认证"><a href="#Token认证" class="headerlink" title="Token认证"></a>Token认证</h4><p><strong>JdbcRealm</strong></p><p>Shiro –&gt;JdbcRealm封装的固定sql</p><p> [1.封装根据用户名查询密码的SQL语句]</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The default query used to retrieve account data for the user.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_AUTHENTICATION_QUERY = <span class="string">"select password from users where username = ?"</span>;</span><br></pre></td></tr></table></figure><pre><code>[2.盐加密&amp;&amp;authenticationQuery验证查询(判断)] </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the salt style.  See &#123;<span class="doctag">@link</span> #saltStyle&#125;.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> saltStyle new SaltStyle to set.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSaltStyle</span><span class="params">(SaltStyle saltStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.saltStyle = saltStyle;</span><br><span class="line">        <span class="keyword">if</span> (saltStyle == SaltStyle.COLUMN &amp;&amp; authenticationQuery.equals(DEFAULT_AUTHENTICATION_QUERY)) &#123;</span><br><span class="line">            authenticationQuery = DEFAULT_SALTED_AUTHENTICATION_QUERY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>  [3.发现源代码中使用预编译的原生JDBC,并根据索引查找对比,所以要求自定义语句时不能乱写,根据规则走] </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement ps = null;</span><br><span class="line">        ResultSet rs = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            ps = conn.prepareStatement(authenticationQuery);</span><br><span class="line">            ps.setString(1, username);</span><br><span class="line"></span><br><span class="line">            // Execute query</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line">            // Loop over results - although we are only expecting one result, since usernames should be unique</span><br><span class="line">            boolean foundResult = false;</span><br><span class="line">            while (rs.next()) &#123;</span><br><span class="line"></span><br><span class="line">                // Check to ensure only one row is processed</span><br><span class="line">                if (foundResult) &#123;</span><br><span class="line">                    throw new AuthenticationException(&quot;More than one user row found for user [&quot; + username + &quot;]. Usernames must be unique.&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                result[0] = rs.getString(1);     //索引查询</span><br><span class="line">                if (returningSeparatedSalt) &#123;</span><br><span class="line">                    result[1] = rs.getString(2);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                foundResult = true;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p><strong>new SimpleAuthenticationInfo()(存放唯一认证) 源码分析</strong></p><p>principal: 整个Shiro中唯一的标识符,可以存用户名,也可以存ID</p><p>credentials: 唯一标识符的密码</p><p>realmName: 当前数据源的名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleAuthenticationInfo</span><span class="params">(Object principal, Object credentials, String realmName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.principals = <span class="keyword">new</span> SimplePrincipalCollection(principal, realmName);</span><br><span class="line">        <span class="keyword">this</span>.credentials = credentials;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\Desktop\20180122131153906.png" alt="20180122131153906"></p><p>使用了工厂模式来对SecurityManager进行生成和配置  </p><p>生成过程是使用<strong>单例+工厂</strong> </p><p>提供对外的<strong>工具类</strong>来使用，包含获取SecurityManager的方法和获取Subject的方法  </p><p><img src="C:\Users\Administrator\Desktop\3.png" alt="3"></p><p>(代码略)</p><p>subject的使用是通过传入AuthenticationToken接口（注意是接口，其实扩展接口rememnverMeaut…和HostAutho…），</p><p>该接口目前的实现类是UserPasswordToken，当然也可以自己扩展实现自定义的认证Token </p><h4 id="测试加密算法"><a href="#测试加密算法" class="headerlink" title="测试加密算法"></a>测试加密算法</h4><p><strong>盐值加密如果几个人密码一样，那么加密后的密码则一致。这样不安全，要解决这个问题，可以在密码上加盐。一般会选择不重复的值作为盐值，例如 用户名。</strong>(部分代码)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造方法：</span></span><br><span class="line">        <span class="comment">//第一个参数：散列算法</span></span><br><span class="line">        <span class="comment">//第二个参数：明文，原始密码</span></span><br><span class="line">        <span class="comment">//第三个参数：盐，通过使用随机数</span></span><br><span class="line">        <span class="comment">//第四个参数：散列的次数，比如散列两次，相当 于md5(md5(''))</span></span><br><span class="line">        SimpleHash simpleHash = <span class="keyword">new</span> SimpleHash(<span class="string">"md5"</span>, source, salt, hashIterations);</span><br><span class="line">        String md5 =  simpleHash.toString();</span><br><span class="line">        System.out.println(md5);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">shiro-realm-md5.ini</span><br><span class="line">---------------------</span><br><span class="line">[main]</span><br><span class="line">定义凭证匹配器</span><br><span class="line">credentialsMatcher=org.apache.shiro.authc.credential.HashedCredentialsMatcher</span><br><span class="line">散列算法</span><br><span class="line">credentialsMatcher.hashAlgorithmName=md5</span><br><span class="line">散列次数</span><br><span class="line">credentialsMatcher.hashIterations=<span class="number">1024</span></span><br><span class="line">开启加盐（无需设置，realm中使用的SimpleAuthenticationInfo 是 SaltedAuthenticationInfo 接口的实现类，默认开启的加盐功能）</span><br><span class="line">credentialsMatcher.hashSalted=<span class="keyword">true</span></span><br><span class="line">自定义 realm</span><br><span class="line">customRealm=com.qfedu.shirodemo.realm.CustomRealmMd5</span><br><span class="line">customRealm.credentialsMatcher=$credentialsMatcher</span><br><span class="line">将realm设置到securityManager，相当 于spring中注入</span><br><span class="line">securityManager.realms=$customRealm</span><br></pre></td></tr></table></figure><h4 id="授权流程原理"><a href="#授权流程原理" class="headerlink" title="授权流程原理"></a>授权流程原理</h4><p><strong>授权</strong></p><p>授权，也叫访问控制，即在应用中控制谁能访问哪些资源（如访问页面/编辑数据/页面操作等）。在授权中需了解的几个关键对象：主体（Subject）、资源（Resource）、权限（Permission）、角色（Role）。</p><p><strong>主体（Subject）</strong></p><p>主体，即访问应用的用户，在Shiro中使用Subject代表该用户。用户只有授权后才允许访问相应的资源。</p><p><strong>资源</strong></p><p>在应用中用户可以访问的任何东西，比如JSP 页面、某些数据、某个业务方法等等都是资源。用户只要授权后才能访问。</p><p><strong>角色</strong></p><p>角色代表了操作集合，可以理解为权限的集合，一般情况下我们会赋予用户角色而不是权限，即这样用户可以拥有一组权限，赋予权限时比较方便。</p><p>典型的如：项目经理、技术总监、CTO、开发工程师等都是角色，不同的角色拥有一组不同的权限。</p><p><strong>权限</strong></p><p>权限表示在应用中用户能不能访问某个资源，</p><p>如：访问用户列表页面查看/新增/修改/删除用户数据（即很多时候都是CRUD（增查改删）式权限控制）打印文档等等。。。</p><h5 id="判断是否授权的方式"><a href="#判断是否授权的方式" class="headerlink" title="判断是否授权的方式"></a>判断是否授权的方式</h5><p>Shiro 支持三种方式的授权判断：</p><p><strong>编程式</strong></p><p>通过写if/else 授权代码块完成：</p><p>Subject subject = SecurityUtils.getSubject();</p><p>if(subject.hasRole(“admin”)) {</p><p>​      //有权限</p><p>} else {</p><p>​     //无权限</p><p>}</p><p><strong>注解式</strong></p><p>通过在执行的Java方法上放置相应的注解完成：</p><p>@RequiresRoles(“admin”)</p><p>public void hello() {</p><p>   //有权限</p><p>}</p><p>没有权限将抛出相应的异常；</p><p><strong>JSP 标签</strong></p><p>在JSP 页面通过相应的标签完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;shiro:hasRole name=&quot;admin&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!— 有权限—&gt;</span><br><span class="line"></span><br><span class="line">&lt; /shiro:hasRole &gt;</span><br></pre></td></tr></table></figure><h5 id="自定义realm授权"><a href="#自定义realm授权" class="headerlink" title="自定义realm授权"></a>自定义realm授权</h5><p><strong>从认证的realm拷贝，改变继承的抽象父类，添加新的方法</strong></p><h3 id="5-程序分析"><a href="#5-程序分析" class="headerlink" title="5.程序分析"></a>5.程序分析</h3><p><strong>程序分析：从应用程序角度的来观察如何使用Shiro完成工作</strong> </p><ol><li>应用代码通过Subject来进行认证和授权，而Subject又委托给SecurityManager； </li><li>我们需要给Shiro的SecurityManager注入Realm，从而让SecurityManager能得到合法的用户及其权限进行判断。</li><li>可以看到：应用代码直接交互的对象是Subject，也就是说Shiro的对外API核心就是Subject； </li></ol><p><img src="file:///C:/Users/Administrator/Documents/My%20Knowledge/temp/e66c475a-c763-4097-85a0-b0219938fe7f/128/index_files/4a5f51ff-ef16-4a61-a834-9a9b06da850b.jpg" alt="img"></p><p><strong>Shiro内部结构</strong></p><p><img src="file:///C:/Users/Administrator/Documents/My%20Knowledge/temp/1b7bc2c3-9f2c-4ea2-8ed7-97820c205482/128/index_files/9b959a65-799d-396e-b5f5-b4fcfe88f53c.png" alt="img"></p><p><strong>详细原理深入和运用:<a href="http://jinnianshilongnian.iteye.com/blog/2018398" target="_blank" rel="noopener">http://jinnianshilongnian.iteye.com/blog/2018398</a></strong></p><h3 id="6-Shiro认证技巧整理"><a href="#6-Shiro认证技巧整理" class="headerlink" title="6.Shiro认证技巧整理"></a>6.Shiro认证技巧整理</h3><h4 id="工具类接口的使用"><a href="#工具类接口的使用" class="headerlink" title="工具类接口的使用"></a>工具类接口的使用</h4><p>建立一个工具类接口Constants,以常量字符串的方式,专门存放Shiro中自定义的<strong>标识符</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public interface Constants &#123;</span><br><span class="line">    // md5(用户密码+PASSWORD_SALT_KEY)保存到数据库中。</span><br><span class="line">    String PASSWORD_SALT_KEY = &quot;Shiro.admin.2017&quot;;</span><br><span class="line">    //Shiro的session中存放用户的key</span><br><span class="line">    String SESSION_USER_KEY = &quot;SESSION_USER_KEY&quot;;</span><br><span class="line">    //redis中存放的用户权限菜单的key</span><br><span class="line">    String SESSION_USER_MANU = &quot;SESSION_USER_MANU&quot;;</span><br><span class="line">    //Shiro存放的角色信息</span><br><span class="line">    String SESSION_USER_ROLE = &quot;SESSION_USER_ROLE&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接口工具类的思路不仅限于Shiro,灵活的定义接口,将冗余和容易混淆的部分抽离出来统一管理,可以极大的提高开发和维护的效率</strong></p><h4 id="认证优化技巧"><a href="#认证优化技巧" class="headerlink" title="认证优化技巧"></a>认证优化技巧</h4><p>Controller层登录方法中,接收到用户名和密码后先进行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">if (!currentUser.isAuthenticated()) &#123;</span><br><span class="line">    ...认证</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接获取subject,先进性判断该用户是否认证过,如果认证过则直接跳出即可</p><p>如果没有认证过,再进入认证环节</p><p>该逻辑可以减少服务器和数据库的压力,提高服务器的并发能力</p><h4 id="shiro-xml-拦截器设置"><a href="#shiro-xml-拦截器设置" class="headerlink" title="..shiro.xml 拦截器设置"></a>..shiro.xml 拦截器设置</h4><p><strong>Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行</strong></p><ul><li>/login.html=anon 静态资源的方式屏蔽过滤器</li><li>/**=authc 该路径下需要认证才能访问</li><li>…</li></ul><p>过滤器的完整参考：</p><p><a href="http://blog.csdn.net/jadyer/article/details/12172839" target="_blank" rel="noopener">http://blog.csdn.net/jadyer/article/details/12172839</a></p><h4 id="登录认证使用原理"><a href="#登录认证使用原理" class="headerlink" title="登录认证使用原理"></a>登录认证使用原理</h4><p><strong>动态权限控制</strong></p><p><strong>RBAC（Role-Based Access Control ）基于角色的访问控制</strong></p><ol><li>配置好环境和工具类</li><li>自定义Realm和异常</li><li>service中添加通过用户名查找用户信息</li><li>在Controller层认证登录</li><li><ul><li>UsernamePasswordToken token = new UsernamePasswordToken(name, password);</li><li>Subject subject = SecurityUtils.getSubject();</li><li>ubject.login(token);</li></ul></li><li>将真正的验证交给封装的底层–&gt;AuthenticationToken实现.(自定义Realm中)</li><li>通过此时token的username去数据库查询用户信息</li><li>用户信息存在,则存入SimpleAuthenticationInfo,否则  抛出用户对应的异常</li></ol><p><strong>Shiro的分布式认证结构(shiro认证将账号密码的比较环节封装到AuthenticationToken中)</strong></p><p>​    Realm放在Controller中,在分布式中Controller使用Dubbo服务端接口,而dubbo接口通过service实现类来发布,这个角度看realm与dao隔层交互设计不太合理</p><p>​    验证成功则返回SimpleAuthenticationInfo(存放唯一标识(id或者username),密码,Realm名</p><h3 id="7-Shiro授权技巧整理"><a href="#7-Shiro授权技巧整理" class="headerlink" title="7.Shiro授权技巧整理"></a>7.Shiro授权技巧整理</h3><ol><li>通过用户登录的唯一标识principals 查找到用户有哪些菜单权限(ID)</li><li>将这些ID存到SimpleAuthorizationInfo中</li><li>在自定义ShiroFilterFactoryBean中获取所有菜单列表,并将id加入到section中</li><li>底层自动对比,哪些ID用户有,则允许访问,没有的话”authc”拦截</li><li>Controller中查询用户拥有的菜单数据返回前段即可,此时没有权限的数据已经被拦截</li></ol><h4 id="易错集合"><a href="#易错集合" class="headerlink" title="易错集合"></a>易错集合</h4><h5 id="1-授权URL"><a href="#1-授权URL" class="headerlink" title="1.授权URL"></a>1.授权URL</h5><p>​    注意使用Shiro权限设置后的url如果需要访问,逻辑路径需要放在 <strong>前端</strong> 拼接,(后台对逻辑路径没有识别,也没有必要识别,不能将逻辑路径放在后台和数据库中)</p><h5 id="2-权限顺序"><a href="#2-权限顺序" class="headerlink" title="2.权限顺序"></a>2.权限顺序</h5><p>​    运行时先执行<strong>MyRealm</strong>中的权限,然后拼接<strong>MyShiroFilterFactoryBean</strong>中的权限</p><p>​    注意:限制范围较大的往后排,特别是全部拦截的/<strong> 如果需要的话尽量放在</strong>MyShiroFilterFactoryBean**中</p><h3 id="8-Remember-me功能简述"><a href="#8-Remember-me功能简述" class="headerlink" title="8.Remember me功能简述"></a>8.Remember me功能简述</h3><p>Shiro的Remember Me可以很轻松的实现自动登录的功能,方便快捷</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UsernamePasswordToken token = new UsernamePasswordToken(username, password);</span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line">if(loginForm.getRememberMe() != null &amp;&amp; &quot;Y&quot;.equals(loginForm.getRememberMe()))&#123;</span><br><span class="line">token.setRememberMe(true);</span><br><span class="line">&#125;</span><br><span class="line">subject.login(token);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/** = user</span><br></pre></td></tr></table></figure><p>Remember Me只需要在登录时将token的RememberMe功能开启,本来的拦截级别为/ <strong> = authc 将拦截设置(降级)为</strong>user级别**即可使用</p><p>Remember Me功能开启使用后,Shiro会生成一个叫<strong>RememberMe</strong>的Cookie保存在浏览器中,当subject.loginout退出或者过期后失效,改参数是base64加密的字符串如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">名称：rememberMe</span><br><span class="line">内容：6gYvaCGZaDXt1c0xwriXj/Uvz6g8OMT3VSaAK4WL0Fvqvkcm0nf3CfTwkWWTT4EjeSS/EoQjRfCPv4WKUXezQDvoNwVgFMtsLIeYMAfTd17ey5BrZQMxW+xU1lBSDoEM1yOy/i11ENh6eXjmYeQFv0yGbhchGdJWzk5W3MxJjv2SljlW4dkGxOSsol3mucoShzmcQ4VqiDjTcbVfZ7mxSHF/0M1JnXRphi8meDaIm9IwM4Hilgjmai+yzdVHFVDDHv/vsU/fZmjb+2tJnBiZ+jrDhl2Elt4qBDKxUKT05cDtXaUZWYQmP1bet2EqTfE8eiofa1+FO3iSTJmEocRLDLPWKSJ26bUWA8wUl/QdpH07Ymq1W0ho8EIdFhOsELxM66oMcj7a/8LVzypJXAXZdMFaNe8cBSN2dXpv4PwiktCs3J9P9vP4XrmYees5x27UmXNqYFk86xQhRjFdJsw5A9ctDKXzPYvJmWFouo3qT5hugX0uxWALCfWg8MHJnG9w7QgVKM8oy3Xy4Ut8lSvYlA==</span><br></pre></td></tr></table></figure><p>Shiro的RememberMe设计时!=已经登录,因为该cookie被序列化后可以不同的浏览器之间访问,并且可能被黑客复制截取等,因此使用该功能的话尽量以非关键性资源为主,当牵扯到<strong>资金</strong>等关键资源时,选择再次登录即可</p><p>开发时如果使用Session域对象,则自动登录后Session中不会再有数据,如果需要用到,那么需要重写isAccessAllowed 方法</p><p><strong>详细参考自:<a href="https://blog.csdn.net/nsrainbow/article/details/36945267/" target="_blank" rel="noopener">https://blog.csdn.net/nsrainbow/article/details/36945267/</a></strong></p><p><strong>(本次Remember Me尚未指定配置更改,待更新)</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Shiro基础原理&quot;&gt;&lt;a href=&quot;#Shiro基础原理&quot; class=&quot;headerlink&quot; title=&quot;Shiro基础原理&quot;&gt;&lt;/a&gt;Shiro基础原理&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; cl
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-MVC基础原理</title>
    <link href="http://yoursite.com/2018/05/15/Spring-MVC%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/05/15/Spring-MVC基础原理/</id>
    <published>2018-05-14T16:00:00.000Z</published>
    <updated>2018-08-18T15:50:49.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Spring-MVC基础原理"><a href="#1-Spring-MVC基础原理" class="headerlink" title="1.Spring-MVC基础原理"></a>1.Spring-MVC基础原理</h2><p>[TOC]</p><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>优秀的Web框架,具有<strong>松散耦合</strong>,<strong>拔插组件结构</strong>,<strong>注解驱动</strong>,<strong>REST风格支持</strong>等特性,比其他web框架更具有扩展性和灵活性</p><p>在<strong>数据绑定,视图解析,本地化处理,静态资源处理</strong>上有不俗的表现,远超Struts2,WebWork等MVC框架</p><p><img src="https://i.imgur.com/0vWxf3N.png" alt="springmvc"></p><h3 id="2-MVC框架"><a href="#2-MVC框架" class="headerlink" title="2.MVC框架"></a>2.MVC框架</h3><p>MVC全称 Model veiw Controller(模型视图控制器)  <strong>软件级的解耦分离</strong></p><ul><li>M:主要包含<strong>service</strong>(核心业务逻辑)和<strong>dao</strong>(数据库访问)</li><li>V:静态资源,如<strong>HTML5,JS,CSS</strong>等</li><li>C:<strong>servlet</strong>(主要处理<strong>页面的转发和重定向</strong>,<strong>数据的接收</strong>,<strong>域对象的操作</strong>,)和<strong>jsp</strong>(本身也是servlet)</li></ul><p>MVC 分层有助于管理复杂的应用程序，因为您可以在一个时间内专门关注一个方面。例如，您可以在<strong>不依赖业务逻辑的情况下专注于视图设计</strong>。同时也<strong>让应用程序的测试更加容易</strong>。 </p><p>MVC 分层同时也简化了分组开发。不同的开发人员可同时开发<strong>视图</strong>、<strong>控制器逻辑</strong>和<strong>业务逻辑</strong>。 </p><p><strong>(扩展)</strong>Spring MVC是基于 Model 2实现的技术框架,Model 2是经典的MVC(model,view,control)模型在WEB应用中的变体.这个改变主要源于HTTP协议的无状态性,Model 2 的目的和MVC一样,也是利用处理器分离模型,视图和控制,达到不同技术层级间松散层耦合的效果,提高系统灵活性,复用性和可维护性.大多情况下,可以将Model 2 与 MVC等同起来. </p><p><strong>(扩展)三层架构基础</strong></p><ul><li><p><strong>物理三层架构:</strong>客户端(如浏览器)/Web服务器/数据库服务器</p></li><li><p><strong>逻辑三层架构:</strong>表现层/业务逻辑层/数据库访问层</p></li></ul><h3 id="3-Spring-MVC体系概述"><a href="#3-Spring-MVC体系概述" class="headerlink" title="3.Spring MVC体系概述"></a>3.Spring MVC体系概述</h3><p>Spring-MVC围绕着<strong>DispatcherServlet(前段控制器)</strong>这个核心展开,所有的前端请求都会<strong>拦截经过这里</strong>分发到Spring MVC的各个处理器中处理,<strong>(扩展)</strong>如注解驱动控制器,请求及响应的信息处理,视图解析,本地化解析,上传文件解析,异常处理及表单标签绑定内容等…</p><h3 id="4-Spring-MVC核心组件"><a href="#4-Spring-MVC核心组件" class="headerlink" title="4.Spring MVC核心组件"></a>4.Spring MVC核心组件</h3><ul><li><strong>DispatcherServlet：</strong>作为前端控制器，整个流程控制的中心，控制其它组件执行，统一调度，降低组件之间的耦合性，提高每个组件的扩展性。 </li><li><strong>HandlerMapping：</strong>通过扩展处理器映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。 </li><li><strong>HandlAdapter：</strong>通过扩展处理器适配器，支持更多类型的处理器,调用处理器传递参数等工作! </li><li><strong>ViewResolver：</strong>通过扩展视图解析器，支持更多类型的视图解析，例如：jsp、freemarker、pdf、excel等。 </li></ul><h3 id="5-Spring-MVC执行流程"><a href="#5-Spring-MVC执行流程" class="headerlink" title="5.Spring MVC执行流程"></a>5.<strong>Spring MVC执行流程</strong></h3><p><img src="https://i.imgur.com/gfPibwt.png" alt="mvc流程"></p><h4 id="5-1-Controller和Handler关系"><a href="#5-1-Controller和Handler关系" class="headerlink" title="5-1.Controller和Handler关系"></a>5-1.Controller和Handler关系</h4><p><strong>Controller指的是类</strong></p><p><strong>Handler指的是Controller中的方法</strong>,每次URL访问Handler都是访问的<strong>@RequestMapper所标注的方法</strong></p><h3 id="6-DispatcherServlet"><a href="#6-DispatcherServlet" class="headerlink" title="6.DispatcherServlet"></a>6.DispatcherServlet</h3><h4 id="1-核心"><a href="#1-核心" class="headerlink" title="1.核心"></a>1.核心</h4><ol><li>DispatcherServlet 是Spring-MVC的核心构成,负责协调所有mvc的处理器,</li><li><strong>DispatcherServlet可以和Spring-IoC无缝集成,获得Spring的所有好处</strong></li><li>使用时需要在web.xml中对DispatcherServlet进行配置</li></ol><h4 id="2-DispatcherServlet继承关系图"><a href="#2-DispatcherServlet继承关系图" class="headerlink" title="2.DispatcherServlet继承关系图"></a>2.DispatcherServlet继承关系图</h4><p><img src="https://i.imgur.com/isTWyBE.png" alt="继承关系图"></p><h4 id="3-DispatcherServlet的责任"><a href="#3-DispatcherServlet的责任" class="headerlink" title="3.DispatcherServlet的责任"></a>3.DispatcherServlet的责任</h4><p>主要负责调度Spring-mvc的工作,并控制MVC的流程</p><ol><li>文件上传解析，如果请求类型是multipart将通过MultipartResolver进行文件上传解析；</li><li>通过HandlerMapping，将请求映射到处理器（返回一个HandlerExecutionChain，它包括一个处理器、多个HandlerInterceptor拦截器）；</li><li>通过HandlerAdapter支持多种类型的处理器(HandlerExecutionChain中的处理器)；</li><li>通过ViewResolver解析逻辑视图名到具体视图实现；</li><li>本地化解析；</li><li>渲染具体的视图等；</li><li>如果执行过程中遇到异常将交给HandlerExceptionResolver来解析。</li></ol><h4 id="4-DispatcherServlet核心代码"><a href="#4-DispatcherServlet核心代码" class="headerlink" title="4.DispatcherServlet核心代码"></a>4.DispatcherServlet核心代码</h4><h4 id="5-DispatcherServlet辅助类"><a href="#5-DispatcherServlet辅助类" class="headerlink" title="5.DispatcherServlet辅助类"></a>5.DispatcherServlet辅助类</h4><h4 id="传送门-https-xuzhongcn-github-io-top"><a href="#传送门-https-xuzhongcn-github-io-top" class="headerlink" title="传送门:https://xuzhongcn.github.io/#top"></a>传送门:<a href="https://xuzhongcn.github.io/#top" target="_blank" rel="noopener">https://xuzhongcn.github.io/#top</a></h4><h3 id="7-常用注解-实用重点"><a href="#7-常用注解-实用重点" class="headerlink" title="7.常用注解(实用重点)"></a>7.常用注解(实用重点)</h3><h4 id="1-RequestMapping-请求方式"><a href="#1-RequestMapping-请求方式" class="headerlink" title="1.@RequestMapping 请求方式"></a>1.@RequestMapping 请求方式</h4><p><strong>写在类或者方法上,表示请求该类或方法的路径</strong></p><h5 id="1-value-method"><a href="#1-value-method" class="headerlink" title="1.value method"></a>1.value method</h5><p><strong>value: </strong>请求路径</p><p>指定为普通具体值(如”/dologin”)</p><p>指定为某一变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value=&quot;/user/&#123;username&#125;&quot;, method=RequestMethod.GET)</span><br><span class="line">public String findOwner(@PathVariable String username, Model model) &#123;</span><br><span class="line">  User user=userService.selectUserByUsername(username);</span><br><span class="line">  model.addAttribute(&quot;user&quot;, user);  </span><br><span class="line">  return &quot;user&quot;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定为含有正则表达式的变量(略)</p><p><strong>method:</strong> 请求类型  GET、POST、PUT、DELETE等</p><p><strong>RestFull</strong></p><p><a href="https://blog.csdn.net/gebitan505/article/details/70143901" target="_blank" rel="noopener">https://blog.csdn.net/gebitan505/article/details/70143901</a></p><h5 id="2-consumes-produces"><a href="#2-consumes-produces" class="headerlink" title="2.consumes produces"></a>2.consumes produces</h5><p><strong>consumes:</strong> 指定处理请求提交的内容类型（Content-Type），例如application/json, text/html; </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(value = &quot;/pets&quot;, method = RequestMethod.POST, consumes=&quot;application/json&quot;)</span><br><span class="line">public void addPet(@RequestBody Pet pet, Model model) &#123;    </span><br><span class="line">    // implementation omitted</span><br><span class="line">    //方法仅处理request Content-Type为“application/json”类型的请求。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>produces:</strong> 指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回； </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(value = &quot;/pets/&#123;petId&#125;&quot;, method = RequestMethod.GET, produces=&quot;application/json&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public Pet getPet(@PathVariable String petId, Model model) &#123;    </span><br><span class="line">    // implementation omitted</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅处理request请求头header中包含了指定类型<strong>application/json</strong>的请求,同时暗示返回数据也是json</p><h5 id="3-params-headers"><a href="#3-params-headers" class="headerlink" title="3.params headers"></a>3.params headers</h5><p><strong>params:</strong> 指定request中必须包含某些参数才可以调用该方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/owners/&#123;ownerId&#125;&quot;)</span><br><span class="line">public class RelativePathUriTemplateController &#123;</span><br><span class="line"></span><br><span class="line">  @RequestMapping(value = &quot;/pets/&#123;petId&#125;&quot;, method = RequestMethod.GET, params=&quot;myParam=myValue&quot;)</span><br><span class="line">  public void findPet(@PathVariable String ownerId, @PathVariable String petId, Model model) &#123;    </span><br><span class="line">    // implementation omitted</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅处理请求中包含了名为“myParam”，值为“myValue”的请求； </p><p><strong>headers:</strong>指定的request中必须包含指定的header值才可以调用该方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/owners/&#123;ownerId&#125;&quot;)</span><br><span class="line">public class RelativePathUriTemplateController &#123;</span><br><span class="line"></span><br><span class="line">@RequestMapping(value = &quot;/pets&quot;, method = RequestMethod.GET, headers=&quot;Referer=http://www.ifeng.com/&quot;)</span><br><span class="line">  public void findPet(@PathVariable String ownerId, @PathVariable String petId, Model model) &#123;    </span><br><span class="line">    // implementation omitted</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅处理request的header中包含了指定“Refer”请求头和对应值为“<code>http://www.ifeng.com/</code>”的请求； </p><h4 id="2-RequestParam-处理请求参数"><a href="#2-RequestParam-处理请求参数" class="headerlink" title="2.@RequestParam 处理请求参数"></a>2.@RequestParam 处理请求参数</h4><h4 id="3-PathVariable-路径传参"><a href="#3-PathVariable-路径传参" class="headerlink" title="3.@PathVariable 路径传参"></a>3.@PathVariable 路径传参</h4><h4 id="4-RequestBody-处理Json-xml请求"><a href="#4-RequestBody-处理Json-xml请求" class="headerlink" title="4.@RequestBody 处理Json/xml请求"></a>4.@RequestBody 处理Json/xml请求</h4><p><strong>requestBody</strong> 常用来处理不是默认类型application/x-www-form-urlcoded 的请求</p><p>如application/json或者是application/xml等(一般处理json)</p><p><strong>requestBody</strong>可以将请求体中的JSON字符串绑定到相应的bean上，也可以将其分别绑定到对应的字符串上 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">　@requestMapping(&quot;/login&quot;)</span><br><span class="line">　　　　public void login(@requestBody String userName,@requestBody String pwd)&#123;</span><br><span class="line">　　　　　　System.out.println(userName+&quot; ：&quot;+pwd);</span><br><span class="line">　　　　&#125;</span><br><span class="line">---------------</span><br><span class="line">　@requestMapping(&quot;/login&quot;)</span><br><span class="line">　　　　public void login(@requestBody User user)&#123;</span><br><span class="line">　　　　　　System.out.println(user);</span><br><span class="line">　　　　&#125;</span><br></pre></td></tr></table></figure><h4 id="5-ResponseBody-处理Json-xml-响应"><a href="#5-ResponseBody-处理Json-xml-响应" class="headerlink" title="5.@ResponseBody 处理Json/xml 响应"></a>5.@ResponseBody 处理Json/xml 响应</h4><p><strong>responseBody:</strong>用于将数据放到response的body体中响应到前端</p><p><strong>注意:</strong>返回的数据不是html标签页面,而是json/xml数据</p><p>​     <strong>如果返回String,此方法原理相当于response.write(),都不走视图解析,直接响应给页面数据,如果使用对象,才会解析为json</strong></p><h4 id="6-JsonFomat格式化时间"><a href="#6-JsonFomat格式化时间" class="headerlink" title="6.@JsonFomat格式化时间"></a>6.@JsonFomat格式化时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**更新时间  用户可以点击更新，保存最新更新的时间。**/</span><br><span class="line">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line">private Date updateTime;</span><br><span class="line"></span><br><span class="line">或者getter上</span><br><span class="line">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line">public Date getUpdateTime() &#123;</span><br><span class="line">    return updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式化时间</p><h4 id="对于请求类型的适配原理"><a href="#对于请求类型的适配原理" class="headerlink" title="对于请求类型的适配原理"></a>对于请求类型的适配原理</h4><p><strong>传送门:<a href="http://www.cnblogs.com/qq78292959/p/3760651.html" target="_blank" rel="noopener">http://www.cnblogs.com/qq78292959/p/3760651.html</a></strong></p><h3 id="8-伪静态化SEO优化"><a href="#8-伪静态化SEO优化" class="headerlink" title="8.伪静态化SEO优化"></a>8.伪静态化SEO优化</h3><p>请求的后缀改为.html 可以实现伪静态化,欺骗SEO搜索(<strong>对动态不友好</strong>),此处拦截也可以改为*.html,</p><p>这样<strong>静态资源</strong>也不会被拦截(不需要配置静态资源映射了)</p><h4 id="8-1-简单优化过程"><a href="#8-1-简单优化过程" class="headerlink" title="8-1.简单优化过程"></a>8-1.简单优化过程</h4><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>e3-portal-web<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 解决post乱码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- springmvc的前端控制器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>e3-portal-web<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- contextConfigLocation不是必须的， 如果不配置contextConfigLocation， springmvc的配置文件默认在：WEB-INF/servlet的name+"-servlet.xml" --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>e3-portal-web<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 拦截指定后缀所有请求 伪静态化 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Handler</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/index.html&quot;)</span><br><span class="line">    public String showIndex()&#123;</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li>欢迎页改为index.html  当静态页面中没有index.html时,请求会被Spring-mvc拦截器拦截到(后缀为.html)</li><li>拦截到index请求后发送到Controller中的对应Handler中,完成<strong>伪静态优化</strong> </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Spring-MVC基础原理&quot;&gt;&lt;a href=&quot;#1-Spring-MVC基础原理&quot; class=&quot;headerlink&quot; title=&quot;1.Spring-MVC基础原理&quot;&gt;&lt;/a&gt;1.Spring-MVC基础原理&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 
      
    
    </summary>
    
      <category term="Spring全家桶" scheme="http://yoursite.com/categories/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>基础排序 组合</title>
    <link href="http://yoursite.com/2018/05/08/%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%20%E7%BB%84%E5%90%88/"/>
    <id>http://yoursite.com/2018/05/08/基础排序 组合/</id>
    <published>2018-05-07T16:00:00.000Z</published>
    <updated>2018-07-29T13:36:40.145Z</updated>
    
    <content type="html"><![CDATA[<p><strong>规范:()中,先写下,在写上</strong></p><p>[TOC]</p><h3 id="1-排序"><a href="#1-排序" class="headerlink" title="1.排序"></a>1.排序</h3><p>转换为计算机写法<strong>A(n,m)</strong>     n在下  m在上</p><p>​    即:n个数中取m个来排序</p><h3 id="2-组合"><a href="#2-组合" class="headerlink" title="2.组合"></a>2.组合</h3><p>转换为计算机写法<strong>C(n,m)</strong>    n在下 m在上</p><p>​    即: 分子:n的阶乘,阶乘的个数为m</p><p>​          分母:m的阶乘</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;规范:()中,先写下,在写上&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-排序&quot;&gt;&lt;a href=&quot;#1-排序&quot; class=&quot;headerlink&quot; title=&quot;1.排序&quot;&gt;&lt;/a&gt;1.排序&lt;/h3&gt;&lt;p&gt;转换为计算机写法&lt;s
      
    
    </summary>
    
      <category term="初等数学" scheme="http://yoursite.com/categories/%E5%88%9D%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>Quartz基础原理</title>
    <link href="http://yoursite.com/2018/05/07/Quartz%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/05/07/Quartz基础原理/</id>
    <published>2018-05-06T16:00:00.000Z</published>
    <updated>2018-07-16T16:12:24.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quartz基础原理"><a href="#Quartz基础原理" class="headerlink" title="Quartz基础原理"></a>Quartz基础原理</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>Quartz是开源的<strong>任务调度框架</strong>,集合可以应用于任何java程序中,小到独立的小项目,大到规模庞大的电子商务系统.</p><p>Quartz可以创建几条/几百条甚至十万条作业调度数</p><p><strong>(Quartz的作业环境可以很复杂,精确到每个月最后一个工作日的22:50)</strong></p><p><strong>场景:</strong>每月自动还款/广告自动上下架/几个小时自动备份云盘等</p><h3 id="2-核心组成"><a href="#2-核心组成" class="headerlink" title="2.核心组成"></a>2.核心组成</h3><p><strong>Scheduler</strong>：调度器。所有的调度都是由它控制。包含两个重要组件</p><p>​    JobStore:存储运行时的信息,包括Trigger,Schduler,JobDetail，业务锁等</p><p>​    ThreadPool:Quartz自己的线程池实现,所有的任务都有线程池执行</p><p><strong>Trigger</strong>:触发器.定义触发条件.常用<strong>SimpleTrigger/CronTirgger</strong>，每隔1秒中执行一次,五种类型</p><ol><li>SimpleTrigger</li><li>CronTirgger</li><li>DateIntervalTrigger</li><li>NthIncludedDayTrigger</li><li>Calendar 类（ org.quartz.Calendar） </li></ol><p>常用:</p><ul><li>SimpleTrigger：用来触发只需执行一次或者在给定时间触发并且重复N次且每次执行延迟一定时间的任务。 </li><li>CronTrigger：按照日历触发，例如“每个周五”，每个月10日中午或者10：15分。  </li></ul><p><strong>JobDetail &amp; Job</strong>：JobDetail 定义的是<strong>任务数据</strong>，而真正的<strong>执行逻辑</strong>是在Job中。</p><p>​    设计成JobDetail+Job是因为任务有可能并发执行的,如果Scheduler直接使用Job,则有可能在同一时刻多个线程同时访问一个Job实例,造成<strong>并发访问问题</strong>;</p><p>​    而JobDetail&amp;Job的模式下,Scheduler每次使用Job前,JobDetail都会构建一个新的Job,以此来<strong>规避并发访问问题</strong></p><p>JobDetail和Trigger都有<strong>name</strong>和<strong>group</strong>。</p><p>​    name是Scheduler中的唯一标识,如果想更新JobDetail或Trigger,只需要重新定义相同的name覆盖即可</p><p>​    group是组织单元,使Scheduler可以整组的调度作业</p><h3 id="3-核心关系图"><a href="#3-核心关系图" class="headerlink" title="3.核心关系图"></a>3.核心关系图</h3><p><img src="https://i.imgur.com/SOZWmeU.png" alt="核心元素关系图"></p><h3 id="4-原理-精-传送门-https-xuzhongcn-github-io"><a href="#4-原理-精-传送门-https-xuzhongcn-github-io" class="headerlink" title="4.原理(精)传送门:https://xuzhongcn.github.io/"></a>4.原理(精)传送门:<a href="https://xuzhongcn.github.io/" target="_blank" rel="noopener">https://xuzhongcn.github.io/</a></h3><h3 id="5-使用"><a href="#5-使用" class="headerlink" title="5.使用"></a>5.使用</h3><h4 id="5-1-Cron表达式的格式：秒-分-时-日-月-周-年-可选-。"><a href="#5-1-Cron表达式的格式：秒-分-时-日-月-周-年-可选-。" class="headerlink" title="5-1 Cron表达式的格式：秒 分 时 日 月 周 年(可选)。"></a>5-1 Cron表达式的格式：秒 分 时 日 月 周 年(可选)。</h4><ol><li>字段名                 允许的值                        允许的特殊字符      </li><li>秒                         0-59                               , - * /   </li><li>分                         0-59                               , - * /  </li><li>小时                     0-23                               , - * / </li><li>日                         1-31                               , - * ? / L W C </li><li>月                         1-12 or JAN-DEC          , - * / </li><li>周几                     1-7 or SUN-SAT             , - * ? / L C # </li><li>SUN ,  MON ,  TUE ,  WED ,  THU ,  FRI  and  SAT</li><li>年 (可选字段)     empty, 1970-2099            , - * / </li></ol><ul><li>“?”字符：表示不确定的值                 </li><li>“,”字符：指定数个值                 </li><li>“-”字符：指定一个值的范围                </li><li>“/”字符：指定一个值的增加幅度。</li><li>n/m表示从n开始，每次增加m                </li><li>“L”字符：用在日表示一个月中的最后一天，用在周表示该月最后一个星期X</li><li>“W”字符：指定离给定日期最近的工作日(周一到周五)                </li><li>“#”字符：表示该月第几个周X。6#3表示该月第3个周五 </li></ul><p><strong>Cron表达式示例</strong></p><ul><li>每隔5秒执行一次：<em>/5 </em> <em> </em> * ?                  </li><li>每隔1分钟执行一次：0 <em>/1 </em> <em> </em> ?                  </li><li>每天23点执行一次：0 0 23 <em> </em> ?                   </li><li>每天凌晨1点执行一次：0 0 1 <em> </em> ?                  </li><li>每月1号凌晨1点执行一次：0 0 1 1 * ?                  </li><li>每月最后一天23点执行一次：0 0 23 L * ?                   </li><li>每周星期六凌晨1点实行一次：0 0 1 ? * L                   </li><li>在26分、29分、33分执行一次：0 26,29,33 <em> </em> * ?                   </li><li>每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 <em> </em> ? </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Quartz基础原理&quot;&gt;&lt;a href=&quot;#Quartz基础原理&quot; class=&quot;headerlink&quot; title=&quot;Quartz基础原理&quot;&gt;&lt;/a&gt;Quartz基础原理&lt;/h2&gt;&lt;h3 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; class=&quot;head
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
</feed>
